
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model contacto
 * 
 */
export type contacto = {
  numero: string
  fk_usuario: number
}

/**
 * Model departamento
 * 
 */
export type departamento = {
  nome: string
  pk_departamento: number
}

/**
 * Model edificio
 * 
 */
export type edificio = {
  nome: string
  pk_edificio: number
}

/**
 * Model funcao
 * 
 */
export type funcao = {
  nome: string
  pk_funcao: number
  fk_departamento: number
}

/**
 * Model participante
 * 
 */
export type participante = {
  fk_usuario: number
  fk_reuniao: number
}

/**
 * Model prioridade_reuniao
 * 
 */
export type prioridade_reuniao = {
  descricao: string
  pk_prioridade: number
}

/**
 * Model reuniao
 * 
 */
export type reuniao = {
  title: string
  duracao: string
  date_realizacao: Date
  tempo_inicio: Date
  tempo_final: Date
  estado_reuniao: estado_reuniao
  pk_reuniao: number
  fk_prioridade: number
  fk_sala: number
}

/**
 * Model sala
 * 
 */
export type sala = {
  piso: string
  nome: string
  pk_sala: number
  fk_edificio: number
}

/**
 * Model usuario
 * 
 */
export type usuario = {
  email: string
  name: string
  password: string
  perfil: Perfil
  pk_usuario: number
  fk_funcao: number
}


/**
 * Enums
 */

// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

export const estado_reuniao: {
  APROVADO: 'APROVADO',
  ESPERA: 'ESPERA',
  REJEITADO: 'REJEITADO'
};

export type estado_reuniao = (typeof estado_reuniao)[keyof typeof estado_reuniao]


export const Perfil: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Perfil = (typeof Perfil)[keyof typeof Perfil]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Contactos
 * const contactos = await prisma.contacto.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Contactos
   * const contactos = await prisma.contacto.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.contacto`: Exposes CRUD operations for the **contacto** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Contactos
    * const contactos = await prisma.contacto.findMany()
    * ```
    */
  get contacto(): Prisma.contactoDelegate<GlobalReject>;

  /**
   * `prisma.departamento`: Exposes CRUD operations for the **departamento** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departamentos
    * const departamentos = await prisma.departamento.findMany()
    * ```
    */
  get departamento(): Prisma.departamentoDelegate<GlobalReject>;

  /**
   * `prisma.edificio`: Exposes CRUD operations for the **edificio** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Edificios
    * const edificios = await prisma.edificio.findMany()
    * ```
    */
  get edificio(): Prisma.edificioDelegate<GlobalReject>;

  /**
   * `prisma.funcao`: Exposes CRUD operations for the **funcao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Funcaos
    * const funcaos = await prisma.funcao.findMany()
    * ```
    */
  get funcao(): Prisma.funcaoDelegate<GlobalReject>;

  /**
   * `prisma.participante`: Exposes CRUD operations for the **participante** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Participantes
    * const participantes = await prisma.participante.findMany()
    * ```
    */
  get participante(): Prisma.participanteDelegate<GlobalReject>;

  /**
   * `prisma.prioridade_reuniao`: Exposes CRUD operations for the **prioridade_reuniao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Prioridade_reuniaos
    * const prioridade_reuniaos = await prisma.prioridade_reuniao.findMany()
    * ```
    */
  get prioridade_reuniao(): Prisma.prioridade_reuniaoDelegate<GlobalReject>;

  /**
   * `prisma.reuniao`: Exposes CRUD operations for the **reuniao** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reuniaos
    * const reuniaos = await prisma.reuniao.findMany()
    * ```
    */
  get reuniao(): Prisma.reuniaoDelegate<GlobalReject>;

  /**
   * `prisma.sala`: Exposes CRUD operations for the **sala** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Salas
    * const salas = await prisma.sala.findMany()
    * ```
    */
  get sala(): Prisma.salaDelegate<GlobalReject>;

  /**
   * `prisma.usuario`: Exposes CRUD operations for the **usuario** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuario.findMany()
    * ```
    */
  get usuario(): Prisma.usuarioDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export import Metrics = runtime.Metrics
  export import Metric = runtime.Metric
  export import MetricHistogram = runtime.MetricHistogram
  export import MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
   * Prisma Client JS version: 4.1.1
   * Query Engine version: 8d8414deb360336e4698a65aa45a1fbaf1ce13d8
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    contacto: 'contacto',
    departamento: 'departamento',
    edificio: 'edificio',
    funcao: 'funcao',
    participante: 'participante',
    prioridade_reuniao: 'prioridade_reuniao',
    reuniao: 'reuniao',
    sala: 'sala',
    usuario: 'usuario'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type DepartamentoCountOutputType
   */


  export type DepartamentoCountOutputType = {
    funcao: number
  }

  export type DepartamentoCountOutputTypeSelect = {
    funcao?: boolean
  }

  export type DepartamentoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | DepartamentoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? DepartamentoCountOutputType
    : S extends undefined
    ? never
    : S extends DepartamentoCountOutputTypeArgs
    ?'include' extends U
    ? DepartamentoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof DepartamentoCountOutputType ? DepartamentoCountOutputType[P] : never
  } 
    : DepartamentoCountOutputType
  : DepartamentoCountOutputType




  // Custom InputTypes

  /**
   * DepartamentoCountOutputType without action
   */
  export type DepartamentoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the DepartamentoCountOutputType
     * 
    **/
    select?: DepartamentoCountOutputTypeSelect | null
  }



  /**
   * Count Type EdificioCountOutputType
   */


  export type EdificioCountOutputType = {
    sala: number
  }

  export type EdificioCountOutputTypeSelect = {
    sala?: boolean
  }

  export type EdificioCountOutputTypeGetPayload<
    S extends boolean | null | undefined | EdificioCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? EdificioCountOutputType
    : S extends undefined
    ? never
    : S extends EdificioCountOutputTypeArgs
    ?'include' extends U
    ? EdificioCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof EdificioCountOutputType ? EdificioCountOutputType[P] : never
  } 
    : EdificioCountOutputType
  : EdificioCountOutputType




  // Custom InputTypes

  /**
   * EdificioCountOutputType without action
   */
  export type EdificioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EdificioCountOutputType
     * 
    **/
    select?: EdificioCountOutputTypeSelect | null
  }



  /**
   * Count Type FuncaoCountOutputType
   */


  export type FuncaoCountOutputType = {
    usuario: number
  }

  export type FuncaoCountOutputTypeSelect = {
    usuario?: boolean
  }

  export type FuncaoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | FuncaoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? FuncaoCountOutputType
    : S extends undefined
    ? never
    : S extends FuncaoCountOutputTypeArgs
    ?'include' extends U
    ? FuncaoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof FuncaoCountOutputType ? FuncaoCountOutputType[P] : never
  } 
    : FuncaoCountOutputType
  : FuncaoCountOutputType




  // Custom InputTypes

  /**
   * FuncaoCountOutputType without action
   */
  export type FuncaoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the FuncaoCountOutputType
     * 
    **/
    select?: FuncaoCountOutputTypeSelect | null
  }



  /**
   * Count Type Prioridade_reuniaoCountOutputType
   */


  export type Prioridade_reuniaoCountOutputType = {
    reuniao: number
  }

  export type Prioridade_reuniaoCountOutputTypeSelect = {
    reuniao?: boolean
  }

  export type Prioridade_reuniaoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | Prioridade_reuniaoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? Prioridade_reuniaoCountOutputType
    : S extends undefined
    ? never
    : S extends Prioridade_reuniaoCountOutputTypeArgs
    ?'include' extends U
    ? Prioridade_reuniaoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof Prioridade_reuniaoCountOutputType ? Prioridade_reuniaoCountOutputType[P] : never
  } 
    : Prioridade_reuniaoCountOutputType
  : Prioridade_reuniaoCountOutputType




  // Custom InputTypes

  /**
   * Prioridade_reuniaoCountOutputType without action
   */
  export type Prioridade_reuniaoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the Prioridade_reuniaoCountOutputType
     * 
    **/
    select?: Prioridade_reuniaoCountOutputTypeSelect | null
  }



  /**
   * Count Type ReuniaoCountOutputType
   */


  export type ReuniaoCountOutputType = {
    participante: number
  }

  export type ReuniaoCountOutputTypeSelect = {
    participante?: boolean
  }

  export type ReuniaoCountOutputTypeGetPayload<
    S extends boolean | null | undefined | ReuniaoCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? ReuniaoCountOutputType
    : S extends undefined
    ? never
    : S extends ReuniaoCountOutputTypeArgs
    ?'include' extends U
    ? ReuniaoCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof ReuniaoCountOutputType ? ReuniaoCountOutputType[P] : never
  } 
    : ReuniaoCountOutputType
  : ReuniaoCountOutputType




  // Custom InputTypes

  /**
   * ReuniaoCountOutputType without action
   */
  export type ReuniaoCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ReuniaoCountOutputType
     * 
    **/
    select?: ReuniaoCountOutputTypeSelect | null
  }



  /**
   * Count Type SalaCountOutputType
   */


  export type SalaCountOutputType = {
    reuniao: number
  }

  export type SalaCountOutputTypeSelect = {
    reuniao?: boolean
  }

  export type SalaCountOutputTypeGetPayload<
    S extends boolean | null | undefined | SalaCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? SalaCountOutputType
    : S extends undefined
    ? never
    : S extends SalaCountOutputTypeArgs
    ?'include' extends U
    ? SalaCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof SalaCountOutputType ? SalaCountOutputType[P] : never
  } 
    : SalaCountOutputType
  : SalaCountOutputType




  // Custom InputTypes

  /**
   * SalaCountOutputType without action
   */
  export type SalaCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the SalaCountOutputType
     * 
    **/
    select?: SalaCountOutputTypeSelect | null
  }



  /**
   * Count Type UsuarioCountOutputType
   */


  export type UsuarioCountOutputType = {
    contacto: number
    participante: number
  }

  export type UsuarioCountOutputTypeSelect = {
    contacto?: boolean
    participante?: boolean
  }

  export type UsuarioCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UsuarioCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UsuarioCountOutputType
    : S extends undefined
    ? never
    : S extends UsuarioCountOutputTypeArgs
    ?'include' extends U
    ? UsuarioCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UsuarioCountOutputType ? UsuarioCountOutputType[P] : never
  } 
    : UsuarioCountOutputType
  : UsuarioCountOutputType




  // Custom InputTypes

  /**
   * UsuarioCountOutputType without action
   */
  export type UsuarioCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UsuarioCountOutputType
     * 
    **/
    select?: UsuarioCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model contacto
   */


  export type AggregateContacto = {
    _count: ContactoCountAggregateOutputType | null
    _avg: ContactoAvgAggregateOutputType | null
    _sum: ContactoSumAggregateOutputType | null
    _min: ContactoMinAggregateOutputType | null
    _max: ContactoMaxAggregateOutputType | null
  }

  export type ContactoAvgAggregateOutputType = {
    fk_usuario: number | null
  }

  export type ContactoSumAggregateOutputType = {
    fk_usuario: number | null
  }

  export type ContactoMinAggregateOutputType = {
    numero: string | null
    fk_usuario: number | null
  }

  export type ContactoMaxAggregateOutputType = {
    numero: string | null
    fk_usuario: number | null
  }

  export type ContactoCountAggregateOutputType = {
    numero: number
    fk_usuario: number
    _all: number
  }


  export type ContactoAvgAggregateInputType = {
    fk_usuario?: true
  }

  export type ContactoSumAggregateInputType = {
    fk_usuario?: true
  }

  export type ContactoMinAggregateInputType = {
    numero?: true
    fk_usuario?: true
  }

  export type ContactoMaxAggregateInputType = {
    numero?: true
    fk_usuario?: true
  }

  export type ContactoCountAggregateInputType = {
    numero?: true
    fk_usuario?: true
    _all?: true
  }

  export type ContactoAggregateArgs = {
    /**
     * Filter which contacto to aggregate.
     * 
    **/
    where?: contactoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contactos to fetch.
     * 
    **/
    orderBy?: Enumerable<contactoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: contactoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contactos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contactos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned contactos
    **/
    _count?: true | ContactoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ContactoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ContactoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ContactoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ContactoMaxAggregateInputType
  }

  export type GetContactoAggregateType<T extends ContactoAggregateArgs> = {
        [P in keyof T & keyof AggregateContacto]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateContacto[P]>
      : GetScalarType<T[P], AggregateContacto[P]>
  }




  export type ContactoGroupByArgs = {
    where?: contactoWhereInput
    orderBy?: Enumerable<contactoOrderByWithAggregationInput>
    by: Array<ContactoScalarFieldEnum>
    having?: contactoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ContactoCountAggregateInputType | true
    _avg?: ContactoAvgAggregateInputType
    _sum?: ContactoSumAggregateInputType
    _min?: ContactoMinAggregateInputType
    _max?: ContactoMaxAggregateInputType
  }


  export type ContactoGroupByOutputType = {
    numero: string
    fk_usuario: number
    _count: ContactoCountAggregateOutputType | null
    _avg: ContactoAvgAggregateOutputType | null
    _sum: ContactoSumAggregateOutputType | null
    _min: ContactoMinAggregateOutputType | null
    _max: ContactoMaxAggregateOutputType | null
  }

  type GetContactoGroupByPayload<T extends ContactoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ContactoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ContactoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ContactoGroupByOutputType[P]>
            : GetScalarType<T[P], ContactoGroupByOutputType[P]>
        }
      >
    >


  export type contactoSelect = {
    numero?: boolean
    fk_usuario?: boolean
    usuario?: boolean | usuarioArgs
  }

  export type contactoInclude = {
    usuario?: boolean | usuarioArgs
  }

  export type contactoGetPayload<
    S extends boolean | null | undefined | contactoArgs,
    U = keyof S
      > = S extends true
        ? contacto
    : S extends undefined
    ? never
    : S extends contactoArgs | contactoFindManyArgs
    ?'include' extends U
    ? contacto  & {
    [P in TrueKeys<S['include']>]:
        P extends 'usuario' ? usuarioGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'usuario' ? usuarioGetPayload<S['select'][P]> :  P extends keyof contacto ? contacto[P] : never
  } 
    : contacto
  : contacto


  type contactoCountArgs = Merge<
    Omit<contactoFindManyArgs, 'select' | 'include'> & {
      select?: ContactoCountAggregateInputType | true
    }
  >

  export interface contactoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Contacto that matches the filter.
     * @param {contactoFindUniqueArgs} args - Arguments to find a Contacto
     * @example
     * // Get one Contacto
     * const contacto = await prisma.contacto.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends contactoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, contactoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'contacto'> extends True ? CheckSelect<T, Prisma__contactoClient<contacto>, Prisma__contactoClient<contactoGetPayload<T>>> : CheckSelect<T, Prisma__contactoClient<contacto | null >, Prisma__contactoClient<contactoGetPayload<T> | null >>

    /**
     * Find the first Contacto that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactoFindFirstArgs} args - Arguments to find a Contacto
     * @example
     * // Get one Contacto
     * const contacto = await prisma.contacto.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends contactoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, contactoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'contacto'> extends True ? CheckSelect<T, Prisma__contactoClient<contacto>, Prisma__contactoClient<contactoGetPayload<T>>> : CheckSelect<T, Prisma__contactoClient<contacto | null >, Prisma__contactoClient<contactoGetPayload<T> | null >>

    /**
     * Find zero or more Contactos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Contactos
     * const contactos = await prisma.contacto.findMany()
     * 
     * // Get first 10 Contactos
     * const contactos = await prisma.contacto.findMany({ take: 10 })
     * 
     * // Only select the `numero`
     * const contactoWithNumeroOnly = await prisma.contacto.findMany({ select: { numero: true } })
     * 
    **/
    findMany<T extends contactoFindManyArgs>(
      args?: SelectSubset<T, contactoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<contacto>>, PrismaPromise<Array<contactoGetPayload<T>>>>

    /**
     * Create a Contacto.
     * @param {contactoCreateArgs} args - Arguments to create a Contacto.
     * @example
     * // Create one Contacto
     * const Contacto = await prisma.contacto.create({
     *   data: {
     *     // ... data to create a Contacto
     *   }
     * })
     * 
    **/
    create<T extends contactoCreateArgs>(
      args: SelectSubset<T, contactoCreateArgs>
    ): CheckSelect<T, Prisma__contactoClient<contacto>, Prisma__contactoClient<contactoGetPayload<T>>>

    /**
     * Create many Contactos.
     *     @param {contactoCreateManyArgs} args - Arguments to create many Contactos.
     *     @example
     *     // Create many Contactos
     *     const contacto = await prisma.contacto.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends contactoCreateManyArgs>(
      args?: SelectSubset<T, contactoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Contacto.
     * @param {contactoDeleteArgs} args - Arguments to delete one Contacto.
     * @example
     * // Delete one Contacto
     * const Contacto = await prisma.contacto.delete({
     *   where: {
     *     // ... filter to delete one Contacto
     *   }
     * })
     * 
    **/
    delete<T extends contactoDeleteArgs>(
      args: SelectSubset<T, contactoDeleteArgs>
    ): CheckSelect<T, Prisma__contactoClient<contacto>, Prisma__contactoClient<contactoGetPayload<T>>>

    /**
     * Update one Contacto.
     * @param {contactoUpdateArgs} args - Arguments to update one Contacto.
     * @example
     * // Update one Contacto
     * const contacto = await prisma.contacto.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends contactoUpdateArgs>(
      args: SelectSubset<T, contactoUpdateArgs>
    ): CheckSelect<T, Prisma__contactoClient<contacto>, Prisma__contactoClient<contactoGetPayload<T>>>

    /**
     * Delete zero or more Contactos.
     * @param {contactoDeleteManyArgs} args - Arguments to filter Contactos to delete.
     * @example
     * // Delete a few Contactos
     * const { count } = await prisma.contacto.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends contactoDeleteManyArgs>(
      args?: SelectSubset<T, contactoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Contactos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Contactos
     * const contacto = await prisma.contacto.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends contactoUpdateManyArgs>(
      args: SelectSubset<T, contactoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Contacto.
     * @param {contactoUpsertArgs} args - Arguments to update or create a Contacto.
     * @example
     * // Update or create a Contacto
     * const contacto = await prisma.contacto.upsert({
     *   create: {
     *     // ... data to create a Contacto
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Contacto we want to update
     *   }
     * })
    **/
    upsert<T extends contactoUpsertArgs>(
      args: SelectSubset<T, contactoUpsertArgs>
    ): CheckSelect<T, Prisma__contactoClient<contacto>, Prisma__contactoClient<contactoGetPayload<T>>>

    /**
     * Find one Contacto that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {contactoFindUniqueOrThrowArgs} args - Arguments to find a Contacto
     * @example
     * // Get one Contacto
     * const contacto = await prisma.contacto.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends contactoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, contactoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__contactoClient<contacto>, Prisma__contactoClient<contactoGetPayload<T>>>

    /**
     * Find the first Contacto that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactoFindFirstOrThrowArgs} args - Arguments to find a Contacto
     * @example
     * // Get one Contacto
     * const contacto = await prisma.contacto.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends contactoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, contactoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__contactoClient<contacto>, Prisma__contactoClient<contactoGetPayload<T>>>

    /**
     * Count the number of Contactos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {contactoCountArgs} args - Arguments to filter Contactos to count.
     * @example
     * // Count the number of Contactos
     * const count = await prisma.contacto.count({
     *   where: {
     *     // ... the filter for the Contactos we want to count
     *   }
     * })
    **/
    count<T extends contactoCountArgs>(
      args?: Subset<T, contactoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ContactoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Contacto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ContactoAggregateArgs>(args: Subset<T, ContactoAggregateArgs>): PrismaPromise<GetContactoAggregateType<T>>

    /**
     * Group by Contacto.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ContactoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ContactoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ContactoGroupByArgs['orderBy'] }
        : { orderBy?: ContactoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ContactoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for contacto.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__contactoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    usuario<T extends usuarioArgs = {}>(args?: Subset<T, usuarioArgs>): CheckSelect<T, Prisma__usuarioClient<usuario | null >, Prisma__usuarioClient<usuarioGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * contacto base type for findUnique actions
   */
  export type contactoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the contacto
     * 
    **/
    select?: contactoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: contactoInclude | null
    /**
     * Filter, which contacto to fetch.
     * 
    **/
    where: contactoWhereUniqueInput
  }

  /**
   * contacto: findUnique
   */
  export interface contactoFindUniqueArgs extends contactoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * contacto base type for findFirst actions
   */
  export type contactoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the contacto
     * 
    **/
    select?: contactoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: contactoInclude | null
    /**
     * Filter, which contacto to fetch.
     * 
    **/
    where?: contactoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contactos to fetch.
     * 
    **/
    orderBy?: Enumerable<contactoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for contactos.
     * 
    **/
    cursor?: contactoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contactos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contactos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of contactos.
     * 
    **/
    distinct?: Enumerable<ContactoScalarFieldEnum>
  }

  /**
   * contacto: findFirst
   */
  export interface contactoFindFirstArgs extends contactoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * contacto findMany
   */
  export type contactoFindManyArgs = {
    /**
     * Select specific fields to fetch from the contacto
     * 
    **/
    select?: contactoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: contactoInclude | null
    /**
     * Filter, which contactos to fetch.
     * 
    **/
    where?: contactoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of contactos to fetch.
     * 
    **/
    orderBy?: Enumerable<contactoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing contactos.
     * 
    **/
    cursor?: contactoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` contactos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` contactos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ContactoScalarFieldEnum>
  }


  /**
   * contacto create
   */
  export type contactoCreateArgs = {
    /**
     * Select specific fields to fetch from the contacto
     * 
    **/
    select?: contactoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: contactoInclude | null
    /**
     * The data needed to create a contacto.
     * 
    **/
    data: XOR<contactoCreateInput, contactoUncheckedCreateInput>
  }


  /**
   * contacto createMany
   */
  export type contactoCreateManyArgs = {
    /**
     * The data used to create many contactos.
     * 
    **/
    data: Enumerable<contactoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * contacto update
   */
  export type contactoUpdateArgs = {
    /**
     * Select specific fields to fetch from the contacto
     * 
    **/
    select?: contactoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: contactoInclude | null
    /**
     * The data needed to update a contacto.
     * 
    **/
    data: XOR<contactoUpdateInput, contactoUncheckedUpdateInput>
    /**
     * Choose, which contacto to update.
     * 
    **/
    where: contactoWhereUniqueInput
  }


  /**
   * contacto updateMany
   */
  export type contactoUpdateManyArgs = {
    /**
     * The data used to update contactos.
     * 
    **/
    data: XOR<contactoUpdateManyMutationInput, contactoUncheckedUpdateManyInput>
    /**
     * Filter which contactos to update
     * 
    **/
    where?: contactoWhereInput
  }


  /**
   * contacto upsert
   */
  export type contactoUpsertArgs = {
    /**
     * Select specific fields to fetch from the contacto
     * 
    **/
    select?: contactoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: contactoInclude | null
    /**
     * The filter to search for the contacto to update in case it exists.
     * 
    **/
    where: contactoWhereUniqueInput
    /**
     * In case the contacto found by the `where` argument doesn't exist, create a new contacto with this data.
     * 
    **/
    create: XOR<contactoCreateInput, contactoUncheckedCreateInput>
    /**
     * In case the contacto was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<contactoUpdateInput, contactoUncheckedUpdateInput>
  }


  /**
   * contacto delete
   */
  export type contactoDeleteArgs = {
    /**
     * Select specific fields to fetch from the contacto
     * 
    **/
    select?: contactoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: contactoInclude | null
    /**
     * Filter which contacto to delete.
     * 
    **/
    where: contactoWhereUniqueInput
  }


  /**
   * contacto deleteMany
   */
  export type contactoDeleteManyArgs = {
    /**
     * Filter which contactos to delete
     * 
    **/
    where?: contactoWhereInput
  }


  /**
   * contacto: findUniqueOrThrow
   */
  export type contactoFindUniqueOrThrowArgs = contactoFindUniqueArgsBase
      

  /**
   * contacto: findFirstOrThrow
   */
  export type contactoFindFirstOrThrowArgs = contactoFindFirstArgsBase
      

  /**
   * contacto without action
   */
  export type contactoArgs = {
    /**
     * Select specific fields to fetch from the contacto
     * 
    **/
    select?: contactoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: contactoInclude | null
  }



  /**
   * Model departamento
   */


  export type AggregateDepartamento = {
    _count: DepartamentoCountAggregateOutputType | null
    _avg: DepartamentoAvgAggregateOutputType | null
    _sum: DepartamentoSumAggregateOutputType | null
    _min: DepartamentoMinAggregateOutputType | null
    _max: DepartamentoMaxAggregateOutputType | null
  }

  export type DepartamentoAvgAggregateOutputType = {
    pk_departamento: number | null
  }

  export type DepartamentoSumAggregateOutputType = {
    pk_departamento: number | null
  }

  export type DepartamentoMinAggregateOutputType = {
    nome: string | null
    pk_departamento: number | null
  }

  export type DepartamentoMaxAggregateOutputType = {
    nome: string | null
    pk_departamento: number | null
  }

  export type DepartamentoCountAggregateOutputType = {
    nome: number
    pk_departamento: number
    _all: number
  }


  export type DepartamentoAvgAggregateInputType = {
    pk_departamento?: true
  }

  export type DepartamentoSumAggregateInputType = {
    pk_departamento?: true
  }

  export type DepartamentoMinAggregateInputType = {
    nome?: true
    pk_departamento?: true
  }

  export type DepartamentoMaxAggregateInputType = {
    nome?: true
    pk_departamento?: true
  }

  export type DepartamentoCountAggregateInputType = {
    nome?: true
    pk_departamento?: true
    _all?: true
  }

  export type DepartamentoAggregateArgs = {
    /**
     * Filter which departamento to aggregate.
     * 
    **/
    where?: departamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of departamentos to fetch.
     * 
    **/
    orderBy?: Enumerable<departamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: departamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departamentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departamentos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned departamentos
    **/
    _count?: true | DepartamentoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DepartamentoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DepartamentoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartamentoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartamentoMaxAggregateInputType
  }

  export type GetDepartamentoAggregateType<T extends DepartamentoAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartamento]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartamento[P]>
      : GetScalarType<T[P], AggregateDepartamento[P]>
  }




  export type DepartamentoGroupByArgs = {
    where?: departamentoWhereInput
    orderBy?: Enumerable<departamentoOrderByWithAggregationInput>
    by: Array<DepartamentoScalarFieldEnum>
    having?: departamentoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartamentoCountAggregateInputType | true
    _avg?: DepartamentoAvgAggregateInputType
    _sum?: DepartamentoSumAggregateInputType
    _min?: DepartamentoMinAggregateInputType
    _max?: DepartamentoMaxAggregateInputType
  }


  export type DepartamentoGroupByOutputType = {
    nome: string
    pk_departamento: number
    _count: DepartamentoCountAggregateOutputType | null
    _avg: DepartamentoAvgAggregateOutputType | null
    _sum: DepartamentoSumAggregateOutputType | null
    _min: DepartamentoMinAggregateOutputType | null
    _max: DepartamentoMaxAggregateOutputType | null
  }

  type GetDepartamentoGroupByPayload<T extends DepartamentoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<DepartamentoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartamentoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartamentoGroupByOutputType[P]>
            : GetScalarType<T[P], DepartamentoGroupByOutputType[P]>
        }
      >
    >


  export type departamentoSelect = {
    nome?: boolean
    pk_departamento?: boolean
    funcao?: boolean | funcaoFindManyArgs
    _count?: boolean | DepartamentoCountOutputTypeArgs
  }

  export type departamentoInclude = {
    funcao?: boolean | funcaoFindManyArgs
    _count?: boolean | DepartamentoCountOutputTypeArgs
  }

  export type departamentoGetPayload<
    S extends boolean | null | undefined | departamentoArgs,
    U = keyof S
      > = S extends true
        ? departamento
    : S extends undefined
    ? never
    : S extends departamentoArgs | departamentoFindManyArgs
    ?'include' extends U
    ? departamento  & {
    [P in TrueKeys<S['include']>]:
        P extends 'funcao' ? Array < funcaoGetPayload<S['include'][P]>>  :
        P extends '_count' ? DepartamentoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'funcao' ? Array < funcaoGetPayload<S['select'][P]>>  :
        P extends '_count' ? DepartamentoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof departamento ? departamento[P] : never
  } 
    : departamento
  : departamento


  type departamentoCountArgs = Merge<
    Omit<departamentoFindManyArgs, 'select' | 'include'> & {
      select?: DepartamentoCountAggregateInputType | true
    }
  >

  export interface departamentoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Departamento that matches the filter.
     * @param {departamentoFindUniqueArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends departamentoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, departamentoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'departamento'> extends True ? CheckSelect<T, Prisma__departamentoClient<departamento>, Prisma__departamentoClient<departamentoGetPayload<T>>> : CheckSelect<T, Prisma__departamentoClient<departamento | null >, Prisma__departamentoClient<departamentoGetPayload<T> | null >>

    /**
     * Find the first Departamento that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departamentoFindFirstArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends departamentoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, departamentoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'departamento'> extends True ? CheckSelect<T, Prisma__departamentoClient<departamento>, Prisma__departamentoClient<departamentoGetPayload<T>>> : CheckSelect<T, Prisma__departamentoClient<departamento | null >, Prisma__departamentoClient<departamentoGetPayload<T> | null >>

    /**
     * Find zero or more Departamentos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departamentoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departamentos
     * const departamentos = await prisma.departamento.findMany()
     * 
     * // Get first 10 Departamentos
     * const departamentos = await prisma.departamento.findMany({ take: 10 })
     * 
     * // Only select the `nome`
     * const departamentoWithNomeOnly = await prisma.departamento.findMany({ select: { nome: true } })
     * 
    **/
    findMany<T extends departamentoFindManyArgs>(
      args?: SelectSubset<T, departamentoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<departamento>>, PrismaPromise<Array<departamentoGetPayload<T>>>>

    /**
     * Create a Departamento.
     * @param {departamentoCreateArgs} args - Arguments to create a Departamento.
     * @example
     * // Create one Departamento
     * const Departamento = await prisma.departamento.create({
     *   data: {
     *     // ... data to create a Departamento
     *   }
     * })
     * 
    **/
    create<T extends departamentoCreateArgs>(
      args: SelectSubset<T, departamentoCreateArgs>
    ): CheckSelect<T, Prisma__departamentoClient<departamento>, Prisma__departamentoClient<departamentoGetPayload<T>>>

    /**
     * Create many Departamentos.
     *     @param {departamentoCreateManyArgs} args - Arguments to create many Departamentos.
     *     @example
     *     // Create many Departamentos
     *     const departamento = await prisma.departamento.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends departamentoCreateManyArgs>(
      args?: SelectSubset<T, departamentoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Departamento.
     * @param {departamentoDeleteArgs} args - Arguments to delete one Departamento.
     * @example
     * // Delete one Departamento
     * const Departamento = await prisma.departamento.delete({
     *   where: {
     *     // ... filter to delete one Departamento
     *   }
     * })
     * 
    **/
    delete<T extends departamentoDeleteArgs>(
      args: SelectSubset<T, departamentoDeleteArgs>
    ): CheckSelect<T, Prisma__departamentoClient<departamento>, Prisma__departamentoClient<departamentoGetPayload<T>>>

    /**
     * Update one Departamento.
     * @param {departamentoUpdateArgs} args - Arguments to update one Departamento.
     * @example
     * // Update one Departamento
     * const departamento = await prisma.departamento.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends departamentoUpdateArgs>(
      args: SelectSubset<T, departamentoUpdateArgs>
    ): CheckSelect<T, Prisma__departamentoClient<departamento>, Prisma__departamentoClient<departamentoGetPayload<T>>>

    /**
     * Delete zero or more Departamentos.
     * @param {departamentoDeleteManyArgs} args - Arguments to filter Departamentos to delete.
     * @example
     * // Delete a few Departamentos
     * const { count } = await prisma.departamento.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends departamentoDeleteManyArgs>(
      args?: SelectSubset<T, departamentoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departamentoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departamentos
     * const departamento = await prisma.departamento.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends departamentoUpdateManyArgs>(
      args: SelectSubset<T, departamentoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Departamento.
     * @param {departamentoUpsertArgs} args - Arguments to update or create a Departamento.
     * @example
     * // Update or create a Departamento
     * const departamento = await prisma.departamento.upsert({
     *   create: {
     *     // ... data to create a Departamento
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Departamento we want to update
     *   }
     * })
    **/
    upsert<T extends departamentoUpsertArgs>(
      args: SelectSubset<T, departamentoUpsertArgs>
    ): CheckSelect<T, Prisma__departamentoClient<departamento>, Prisma__departamentoClient<departamentoGetPayload<T>>>

    /**
     * Find one Departamento that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {departamentoFindUniqueOrThrowArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends departamentoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, departamentoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__departamentoClient<departamento>, Prisma__departamentoClient<departamentoGetPayload<T>>>

    /**
     * Find the first Departamento that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departamentoFindFirstOrThrowArgs} args - Arguments to find a Departamento
     * @example
     * // Get one Departamento
     * const departamento = await prisma.departamento.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends departamentoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, departamentoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__departamentoClient<departamento>, Prisma__departamentoClient<departamentoGetPayload<T>>>

    /**
     * Count the number of Departamentos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {departamentoCountArgs} args - Arguments to filter Departamentos to count.
     * @example
     * // Count the number of Departamentos
     * const count = await prisma.departamento.count({
     *   where: {
     *     // ... the filter for the Departamentos we want to count
     *   }
     * })
    **/
    count<T extends departamentoCountArgs>(
      args?: Subset<T, departamentoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartamentoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Departamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartamentoAggregateArgs>(args: Subset<T, DepartamentoAggregateArgs>): PrismaPromise<GetDepartamentoAggregateType<T>>

    /**
     * Group by Departamento.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartamentoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartamentoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartamentoGroupByArgs['orderBy'] }
        : { orderBy?: DepartamentoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartamentoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartamentoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for departamento.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__departamentoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    funcao<T extends funcaoFindManyArgs = {}>(args?: Subset<T, funcaoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<funcao>>, PrismaPromise<Array<funcaoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * departamento base type for findUnique actions
   */
  export type departamentoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the departamento
     * 
    **/
    select?: departamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: departamentoInclude | null
    /**
     * Filter, which departamento to fetch.
     * 
    **/
    where: departamentoWhereUniqueInput
  }

  /**
   * departamento: findUnique
   */
  export interface departamentoFindUniqueArgs extends departamentoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * departamento base type for findFirst actions
   */
  export type departamentoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the departamento
     * 
    **/
    select?: departamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: departamentoInclude | null
    /**
     * Filter, which departamento to fetch.
     * 
    **/
    where?: departamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of departamentos to fetch.
     * 
    **/
    orderBy?: Enumerable<departamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for departamentos.
     * 
    **/
    cursor?: departamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departamentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departamentos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of departamentos.
     * 
    **/
    distinct?: Enumerable<DepartamentoScalarFieldEnum>
  }

  /**
   * departamento: findFirst
   */
  export interface departamentoFindFirstArgs extends departamentoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * departamento findMany
   */
  export type departamentoFindManyArgs = {
    /**
     * Select specific fields to fetch from the departamento
     * 
    **/
    select?: departamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: departamentoInclude | null
    /**
     * Filter, which departamentos to fetch.
     * 
    **/
    where?: departamentoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of departamentos to fetch.
     * 
    **/
    orderBy?: Enumerable<departamentoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing departamentos.
     * 
    **/
    cursor?: departamentoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` departamentos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` departamentos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<DepartamentoScalarFieldEnum>
  }


  /**
   * departamento create
   */
  export type departamentoCreateArgs = {
    /**
     * Select specific fields to fetch from the departamento
     * 
    **/
    select?: departamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: departamentoInclude | null
    /**
     * The data needed to create a departamento.
     * 
    **/
    data: XOR<departamentoCreateInput, departamentoUncheckedCreateInput>
  }


  /**
   * departamento createMany
   */
  export type departamentoCreateManyArgs = {
    /**
     * The data used to create many departamentos.
     * 
    **/
    data: Enumerable<departamentoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * departamento update
   */
  export type departamentoUpdateArgs = {
    /**
     * Select specific fields to fetch from the departamento
     * 
    **/
    select?: departamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: departamentoInclude | null
    /**
     * The data needed to update a departamento.
     * 
    **/
    data: XOR<departamentoUpdateInput, departamentoUncheckedUpdateInput>
    /**
     * Choose, which departamento to update.
     * 
    **/
    where: departamentoWhereUniqueInput
  }


  /**
   * departamento updateMany
   */
  export type departamentoUpdateManyArgs = {
    /**
     * The data used to update departamentos.
     * 
    **/
    data: XOR<departamentoUpdateManyMutationInput, departamentoUncheckedUpdateManyInput>
    /**
     * Filter which departamentos to update
     * 
    **/
    where?: departamentoWhereInput
  }


  /**
   * departamento upsert
   */
  export type departamentoUpsertArgs = {
    /**
     * Select specific fields to fetch from the departamento
     * 
    **/
    select?: departamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: departamentoInclude | null
    /**
     * The filter to search for the departamento to update in case it exists.
     * 
    **/
    where: departamentoWhereUniqueInput
    /**
     * In case the departamento found by the `where` argument doesn't exist, create a new departamento with this data.
     * 
    **/
    create: XOR<departamentoCreateInput, departamentoUncheckedCreateInput>
    /**
     * In case the departamento was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<departamentoUpdateInput, departamentoUncheckedUpdateInput>
  }


  /**
   * departamento delete
   */
  export type departamentoDeleteArgs = {
    /**
     * Select specific fields to fetch from the departamento
     * 
    **/
    select?: departamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: departamentoInclude | null
    /**
     * Filter which departamento to delete.
     * 
    **/
    where: departamentoWhereUniqueInput
  }


  /**
   * departamento deleteMany
   */
  export type departamentoDeleteManyArgs = {
    /**
     * Filter which departamentos to delete
     * 
    **/
    where?: departamentoWhereInput
  }


  /**
   * departamento: findUniqueOrThrow
   */
  export type departamentoFindUniqueOrThrowArgs = departamentoFindUniqueArgsBase
      

  /**
   * departamento: findFirstOrThrow
   */
  export type departamentoFindFirstOrThrowArgs = departamentoFindFirstArgsBase
      

  /**
   * departamento without action
   */
  export type departamentoArgs = {
    /**
     * Select specific fields to fetch from the departamento
     * 
    **/
    select?: departamentoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: departamentoInclude | null
  }



  /**
   * Model edificio
   */


  export type AggregateEdificio = {
    _count: EdificioCountAggregateOutputType | null
    _avg: EdificioAvgAggregateOutputType | null
    _sum: EdificioSumAggregateOutputType | null
    _min: EdificioMinAggregateOutputType | null
    _max: EdificioMaxAggregateOutputType | null
  }

  export type EdificioAvgAggregateOutputType = {
    pk_edificio: number | null
  }

  export type EdificioSumAggregateOutputType = {
    pk_edificio: number | null
  }

  export type EdificioMinAggregateOutputType = {
    nome: string | null
    pk_edificio: number | null
  }

  export type EdificioMaxAggregateOutputType = {
    nome: string | null
    pk_edificio: number | null
  }

  export type EdificioCountAggregateOutputType = {
    nome: number
    pk_edificio: number
    _all: number
  }


  export type EdificioAvgAggregateInputType = {
    pk_edificio?: true
  }

  export type EdificioSumAggregateInputType = {
    pk_edificio?: true
  }

  export type EdificioMinAggregateInputType = {
    nome?: true
    pk_edificio?: true
  }

  export type EdificioMaxAggregateInputType = {
    nome?: true
    pk_edificio?: true
  }

  export type EdificioCountAggregateInputType = {
    nome?: true
    pk_edificio?: true
    _all?: true
  }

  export type EdificioAggregateArgs = {
    /**
     * Filter which edificio to aggregate.
     * 
    **/
    where?: edificioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of edificios to fetch.
     * 
    **/
    orderBy?: Enumerable<edificioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: edificioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` edificios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` edificios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned edificios
    **/
    _count?: true | EdificioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EdificioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EdificioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EdificioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EdificioMaxAggregateInputType
  }

  export type GetEdificioAggregateType<T extends EdificioAggregateArgs> = {
        [P in keyof T & keyof AggregateEdificio]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEdificio[P]>
      : GetScalarType<T[P], AggregateEdificio[P]>
  }




  export type EdificioGroupByArgs = {
    where?: edificioWhereInput
    orderBy?: Enumerable<edificioOrderByWithAggregationInput>
    by: Array<EdificioScalarFieldEnum>
    having?: edificioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EdificioCountAggregateInputType | true
    _avg?: EdificioAvgAggregateInputType
    _sum?: EdificioSumAggregateInputType
    _min?: EdificioMinAggregateInputType
    _max?: EdificioMaxAggregateInputType
  }


  export type EdificioGroupByOutputType = {
    nome: string
    pk_edificio: number
    _count: EdificioCountAggregateOutputType | null
    _avg: EdificioAvgAggregateOutputType | null
    _sum: EdificioSumAggregateOutputType | null
    _min: EdificioMinAggregateOutputType | null
    _max: EdificioMaxAggregateOutputType | null
  }

  type GetEdificioGroupByPayload<T extends EdificioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<EdificioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EdificioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EdificioGroupByOutputType[P]>
            : GetScalarType<T[P], EdificioGroupByOutputType[P]>
        }
      >
    >


  export type edificioSelect = {
    nome?: boolean
    pk_edificio?: boolean
    sala?: boolean | salaFindManyArgs
    _count?: boolean | EdificioCountOutputTypeArgs
  }

  export type edificioInclude = {
    sala?: boolean | salaFindManyArgs
    _count?: boolean | EdificioCountOutputTypeArgs
  }

  export type edificioGetPayload<
    S extends boolean | null | undefined | edificioArgs,
    U = keyof S
      > = S extends true
        ? edificio
    : S extends undefined
    ? never
    : S extends edificioArgs | edificioFindManyArgs
    ?'include' extends U
    ? edificio  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sala' ? Array < salaGetPayload<S['include'][P]>>  :
        P extends '_count' ? EdificioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sala' ? Array < salaGetPayload<S['select'][P]>>  :
        P extends '_count' ? EdificioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof edificio ? edificio[P] : never
  } 
    : edificio
  : edificio


  type edificioCountArgs = Merge<
    Omit<edificioFindManyArgs, 'select' | 'include'> & {
      select?: EdificioCountAggregateInputType | true
    }
  >

  export interface edificioDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Edificio that matches the filter.
     * @param {edificioFindUniqueArgs} args - Arguments to find a Edificio
     * @example
     * // Get one Edificio
     * const edificio = await prisma.edificio.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends edificioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, edificioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'edificio'> extends True ? CheckSelect<T, Prisma__edificioClient<edificio>, Prisma__edificioClient<edificioGetPayload<T>>> : CheckSelect<T, Prisma__edificioClient<edificio | null >, Prisma__edificioClient<edificioGetPayload<T> | null >>

    /**
     * Find the first Edificio that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {edificioFindFirstArgs} args - Arguments to find a Edificio
     * @example
     * // Get one Edificio
     * const edificio = await prisma.edificio.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends edificioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, edificioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'edificio'> extends True ? CheckSelect<T, Prisma__edificioClient<edificio>, Prisma__edificioClient<edificioGetPayload<T>>> : CheckSelect<T, Prisma__edificioClient<edificio | null >, Prisma__edificioClient<edificioGetPayload<T> | null >>

    /**
     * Find zero or more Edificios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {edificioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Edificios
     * const edificios = await prisma.edificio.findMany()
     * 
     * // Get first 10 Edificios
     * const edificios = await prisma.edificio.findMany({ take: 10 })
     * 
     * // Only select the `nome`
     * const edificioWithNomeOnly = await prisma.edificio.findMany({ select: { nome: true } })
     * 
    **/
    findMany<T extends edificioFindManyArgs>(
      args?: SelectSubset<T, edificioFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<edificio>>, PrismaPromise<Array<edificioGetPayload<T>>>>

    /**
     * Create a Edificio.
     * @param {edificioCreateArgs} args - Arguments to create a Edificio.
     * @example
     * // Create one Edificio
     * const Edificio = await prisma.edificio.create({
     *   data: {
     *     // ... data to create a Edificio
     *   }
     * })
     * 
    **/
    create<T extends edificioCreateArgs>(
      args: SelectSubset<T, edificioCreateArgs>
    ): CheckSelect<T, Prisma__edificioClient<edificio>, Prisma__edificioClient<edificioGetPayload<T>>>

    /**
     * Create many Edificios.
     *     @param {edificioCreateManyArgs} args - Arguments to create many Edificios.
     *     @example
     *     // Create many Edificios
     *     const edificio = await prisma.edificio.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends edificioCreateManyArgs>(
      args?: SelectSubset<T, edificioCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Edificio.
     * @param {edificioDeleteArgs} args - Arguments to delete one Edificio.
     * @example
     * // Delete one Edificio
     * const Edificio = await prisma.edificio.delete({
     *   where: {
     *     // ... filter to delete one Edificio
     *   }
     * })
     * 
    **/
    delete<T extends edificioDeleteArgs>(
      args: SelectSubset<T, edificioDeleteArgs>
    ): CheckSelect<T, Prisma__edificioClient<edificio>, Prisma__edificioClient<edificioGetPayload<T>>>

    /**
     * Update one Edificio.
     * @param {edificioUpdateArgs} args - Arguments to update one Edificio.
     * @example
     * // Update one Edificio
     * const edificio = await prisma.edificio.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends edificioUpdateArgs>(
      args: SelectSubset<T, edificioUpdateArgs>
    ): CheckSelect<T, Prisma__edificioClient<edificio>, Prisma__edificioClient<edificioGetPayload<T>>>

    /**
     * Delete zero or more Edificios.
     * @param {edificioDeleteManyArgs} args - Arguments to filter Edificios to delete.
     * @example
     * // Delete a few Edificios
     * const { count } = await prisma.edificio.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends edificioDeleteManyArgs>(
      args?: SelectSubset<T, edificioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Edificios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {edificioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Edificios
     * const edificio = await prisma.edificio.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends edificioUpdateManyArgs>(
      args: SelectSubset<T, edificioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Edificio.
     * @param {edificioUpsertArgs} args - Arguments to update or create a Edificio.
     * @example
     * // Update or create a Edificio
     * const edificio = await prisma.edificio.upsert({
     *   create: {
     *     // ... data to create a Edificio
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Edificio we want to update
     *   }
     * })
    **/
    upsert<T extends edificioUpsertArgs>(
      args: SelectSubset<T, edificioUpsertArgs>
    ): CheckSelect<T, Prisma__edificioClient<edificio>, Prisma__edificioClient<edificioGetPayload<T>>>

    /**
     * Find one Edificio that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {edificioFindUniqueOrThrowArgs} args - Arguments to find a Edificio
     * @example
     * // Get one Edificio
     * const edificio = await prisma.edificio.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends edificioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, edificioFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__edificioClient<edificio>, Prisma__edificioClient<edificioGetPayload<T>>>

    /**
     * Find the first Edificio that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {edificioFindFirstOrThrowArgs} args - Arguments to find a Edificio
     * @example
     * // Get one Edificio
     * const edificio = await prisma.edificio.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends edificioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, edificioFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__edificioClient<edificio>, Prisma__edificioClient<edificioGetPayload<T>>>

    /**
     * Count the number of Edificios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {edificioCountArgs} args - Arguments to filter Edificios to count.
     * @example
     * // Count the number of Edificios
     * const count = await prisma.edificio.count({
     *   where: {
     *     // ... the filter for the Edificios we want to count
     *   }
     * })
    **/
    count<T extends edificioCountArgs>(
      args?: Subset<T, edificioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EdificioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Edificio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EdificioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EdificioAggregateArgs>(args: Subset<T, EdificioAggregateArgs>): PrismaPromise<GetEdificioAggregateType<T>>

    /**
     * Group by Edificio.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EdificioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EdificioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EdificioGroupByArgs['orderBy'] }
        : { orderBy?: EdificioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EdificioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEdificioGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for edificio.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__edificioClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sala<T extends salaFindManyArgs = {}>(args?: Subset<T, salaFindManyArgs>): CheckSelect<T, PrismaPromise<Array<sala>>, PrismaPromise<Array<salaGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * edificio base type for findUnique actions
   */
  export type edificioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the edificio
     * 
    **/
    select?: edificioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: edificioInclude | null
    /**
     * Filter, which edificio to fetch.
     * 
    **/
    where: edificioWhereUniqueInput
  }

  /**
   * edificio: findUnique
   */
  export interface edificioFindUniqueArgs extends edificioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * edificio base type for findFirst actions
   */
  export type edificioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the edificio
     * 
    **/
    select?: edificioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: edificioInclude | null
    /**
     * Filter, which edificio to fetch.
     * 
    **/
    where?: edificioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of edificios to fetch.
     * 
    **/
    orderBy?: Enumerable<edificioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for edificios.
     * 
    **/
    cursor?: edificioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` edificios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` edificios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of edificios.
     * 
    **/
    distinct?: Enumerable<EdificioScalarFieldEnum>
  }

  /**
   * edificio: findFirst
   */
  export interface edificioFindFirstArgs extends edificioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * edificio findMany
   */
  export type edificioFindManyArgs = {
    /**
     * Select specific fields to fetch from the edificio
     * 
    **/
    select?: edificioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: edificioInclude | null
    /**
     * Filter, which edificios to fetch.
     * 
    **/
    where?: edificioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of edificios to fetch.
     * 
    **/
    orderBy?: Enumerable<edificioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing edificios.
     * 
    **/
    cursor?: edificioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` edificios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` edificios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<EdificioScalarFieldEnum>
  }


  /**
   * edificio create
   */
  export type edificioCreateArgs = {
    /**
     * Select specific fields to fetch from the edificio
     * 
    **/
    select?: edificioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: edificioInclude | null
    /**
     * The data needed to create a edificio.
     * 
    **/
    data: XOR<edificioCreateInput, edificioUncheckedCreateInput>
  }


  /**
   * edificio createMany
   */
  export type edificioCreateManyArgs = {
    /**
     * The data used to create many edificios.
     * 
    **/
    data: Enumerable<edificioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * edificio update
   */
  export type edificioUpdateArgs = {
    /**
     * Select specific fields to fetch from the edificio
     * 
    **/
    select?: edificioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: edificioInclude | null
    /**
     * The data needed to update a edificio.
     * 
    **/
    data: XOR<edificioUpdateInput, edificioUncheckedUpdateInput>
    /**
     * Choose, which edificio to update.
     * 
    **/
    where: edificioWhereUniqueInput
  }


  /**
   * edificio updateMany
   */
  export type edificioUpdateManyArgs = {
    /**
     * The data used to update edificios.
     * 
    **/
    data: XOR<edificioUpdateManyMutationInput, edificioUncheckedUpdateManyInput>
    /**
     * Filter which edificios to update
     * 
    **/
    where?: edificioWhereInput
  }


  /**
   * edificio upsert
   */
  export type edificioUpsertArgs = {
    /**
     * Select specific fields to fetch from the edificio
     * 
    **/
    select?: edificioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: edificioInclude | null
    /**
     * The filter to search for the edificio to update in case it exists.
     * 
    **/
    where: edificioWhereUniqueInput
    /**
     * In case the edificio found by the `where` argument doesn't exist, create a new edificio with this data.
     * 
    **/
    create: XOR<edificioCreateInput, edificioUncheckedCreateInput>
    /**
     * In case the edificio was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<edificioUpdateInput, edificioUncheckedUpdateInput>
  }


  /**
   * edificio delete
   */
  export type edificioDeleteArgs = {
    /**
     * Select specific fields to fetch from the edificio
     * 
    **/
    select?: edificioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: edificioInclude | null
    /**
     * Filter which edificio to delete.
     * 
    **/
    where: edificioWhereUniqueInput
  }


  /**
   * edificio deleteMany
   */
  export type edificioDeleteManyArgs = {
    /**
     * Filter which edificios to delete
     * 
    **/
    where?: edificioWhereInput
  }


  /**
   * edificio: findUniqueOrThrow
   */
  export type edificioFindUniqueOrThrowArgs = edificioFindUniqueArgsBase
      

  /**
   * edificio: findFirstOrThrow
   */
  export type edificioFindFirstOrThrowArgs = edificioFindFirstArgsBase
      

  /**
   * edificio without action
   */
  export type edificioArgs = {
    /**
     * Select specific fields to fetch from the edificio
     * 
    **/
    select?: edificioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: edificioInclude | null
  }



  /**
   * Model funcao
   */


  export type AggregateFuncao = {
    _count: FuncaoCountAggregateOutputType | null
    _avg: FuncaoAvgAggregateOutputType | null
    _sum: FuncaoSumAggregateOutputType | null
    _min: FuncaoMinAggregateOutputType | null
    _max: FuncaoMaxAggregateOutputType | null
  }

  export type FuncaoAvgAggregateOutputType = {
    pk_funcao: number | null
    fk_departamento: number | null
  }

  export type FuncaoSumAggregateOutputType = {
    pk_funcao: number | null
    fk_departamento: number | null
  }

  export type FuncaoMinAggregateOutputType = {
    nome: string | null
    pk_funcao: number | null
    fk_departamento: number | null
  }

  export type FuncaoMaxAggregateOutputType = {
    nome: string | null
    pk_funcao: number | null
    fk_departamento: number | null
  }

  export type FuncaoCountAggregateOutputType = {
    nome: number
    pk_funcao: number
    fk_departamento: number
    _all: number
  }


  export type FuncaoAvgAggregateInputType = {
    pk_funcao?: true
    fk_departamento?: true
  }

  export type FuncaoSumAggregateInputType = {
    pk_funcao?: true
    fk_departamento?: true
  }

  export type FuncaoMinAggregateInputType = {
    nome?: true
    pk_funcao?: true
    fk_departamento?: true
  }

  export type FuncaoMaxAggregateInputType = {
    nome?: true
    pk_funcao?: true
    fk_departamento?: true
  }

  export type FuncaoCountAggregateInputType = {
    nome?: true
    pk_funcao?: true
    fk_departamento?: true
    _all?: true
  }

  export type FuncaoAggregateArgs = {
    /**
     * Filter which funcao to aggregate.
     * 
    **/
    where?: funcaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funcaos to fetch.
     * 
    **/
    orderBy?: Enumerable<funcaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: funcaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funcaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funcaos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned funcaos
    **/
    _count?: true | FuncaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FuncaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FuncaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FuncaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FuncaoMaxAggregateInputType
  }

  export type GetFuncaoAggregateType<T extends FuncaoAggregateArgs> = {
        [P in keyof T & keyof AggregateFuncao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFuncao[P]>
      : GetScalarType<T[P], AggregateFuncao[P]>
  }




  export type FuncaoGroupByArgs = {
    where?: funcaoWhereInput
    orderBy?: Enumerable<funcaoOrderByWithAggregationInput>
    by: Array<FuncaoScalarFieldEnum>
    having?: funcaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FuncaoCountAggregateInputType | true
    _avg?: FuncaoAvgAggregateInputType
    _sum?: FuncaoSumAggregateInputType
    _min?: FuncaoMinAggregateInputType
    _max?: FuncaoMaxAggregateInputType
  }


  export type FuncaoGroupByOutputType = {
    nome: string
    pk_funcao: number
    fk_departamento: number
    _count: FuncaoCountAggregateOutputType | null
    _avg: FuncaoAvgAggregateOutputType | null
    _sum: FuncaoSumAggregateOutputType | null
    _min: FuncaoMinAggregateOutputType | null
    _max: FuncaoMaxAggregateOutputType | null
  }

  type GetFuncaoGroupByPayload<T extends FuncaoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<FuncaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FuncaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FuncaoGroupByOutputType[P]>
            : GetScalarType<T[P], FuncaoGroupByOutputType[P]>
        }
      >
    >


  export type funcaoSelect = {
    nome?: boolean
    pk_funcao?: boolean
    fk_departamento?: boolean
    departamento?: boolean | departamentoArgs
    usuario?: boolean | usuarioFindManyArgs
    _count?: boolean | FuncaoCountOutputTypeArgs
  }

  export type funcaoInclude = {
    departamento?: boolean | departamentoArgs
    usuario?: boolean | usuarioFindManyArgs
    _count?: boolean | FuncaoCountOutputTypeArgs
  }

  export type funcaoGetPayload<
    S extends boolean | null | undefined | funcaoArgs,
    U = keyof S
      > = S extends true
        ? funcao
    : S extends undefined
    ? never
    : S extends funcaoArgs | funcaoFindManyArgs
    ?'include' extends U
    ? funcao  & {
    [P in TrueKeys<S['include']>]:
        P extends 'departamento' ? departamentoGetPayload<S['include'][P]> :
        P extends 'usuario' ? Array < usuarioGetPayload<S['include'][P]>>  :
        P extends '_count' ? FuncaoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'departamento' ? departamentoGetPayload<S['select'][P]> :
        P extends 'usuario' ? Array < usuarioGetPayload<S['select'][P]>>  :
        P extends '_count' ? FuncaoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof funcao ? funcao[P] : never
  } 
    : funcao
  : funcao


  type funcaoCountArgs = Merge<
    Omit<funcaoFindManyArgs, 'select' | 'include'> & {
      select?: FuncaoCountAggregateInputType | true
    }
  >

  export interface funcaoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Funcao that matches the filter.
     * @param {funcaoFindUniqueArgs} args - Arguments to find a Funcao
     * @example
     * // Get one Funcao
     * const funcao = await prisma.funcao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends funcaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, funcaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'funcao'> extends True ? CheckSelect<T, Prisma__funcaoClient<funcao>, Prisma__funcaoClient<funcaoGetPayload<T>>> : CheckSelect<T, Prisma__funcaoClient<funcao | null >, Prisma__funcaoClient<funcaoGetPayload<T> | null >>

    /**
     * Find the first Funcao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funcaoFindFirstArgs} args - Arguments to find a Funcao
     * @example
     * // Get one Funcao
     * const funcao = await prisma.funcao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends funcaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, funcaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'funcao'> extends True ? CheckSelect<T, Prisma__funcaoClient<funcao>, Prisma__funcaoClient<funcaoGetPayload<T>>> : CheckSelect<T, Prisma__funcaoClient<funcao | null >, Prisma__funcaoClient<funcaoGetPayload<T> | null >>

    /**
     * Find zero or more Funcaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funcaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Funcaos
     * const funcaos = await prisma.funcao.findMany()
     * 
     * // Get first 10 Funcaos
     * const funcaos = await prisma.funcao.findMany({ take: 10 })
     * 
     * // Only select the `nome`
     * const funcaoWithNomeOnly = await prisma.funcao.findMany({ select: { nome: true } })
     * 
    **/
    findMany<T extends funcaoFindManyArgs>(
      args?: SelectSubset<T, funcaoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<funcao>>, PrismaPromise<Array<funcaoGetPayload<T>>>>

    /**
     * Create a Funcao.
     * @param {funcaoCreateArgs} args - Arguments to create a Funcao.
     * @example
     * // Create one Funcao
     * const Funcao = await prisma.funcao.create({
     *   data: {
     *     // ... data to create a Funcao
     *   }
     * })
     * 
    **/
    create<T extends funcaoCreateArgs>(
      args: SelectSubset<T, funcaoCreateArgs>
    ): CheckSelect<T, Prisma__funcaoClient<funcao>, Prisma__funcaoClient<funcaoGetPayload<T>>>

    /**
     * Create many Funcaos.
     *     @param {funcaoCreateManyArgs} args - Arguments to create many Funcaos.
     *     @example
     *     // Create many Funcaos
     *     const funcao = await prisma.funcao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends funcaoCreateManyArgs>(
      args?: SelectSubset<T, funcaoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Funcao.
     * @param {funcaoDeleteArgs} args - Arguments to delete one Funcao.
     * @example
     * // Delete one Funcao
     * const Funcao = await prisma.funcao.delete({
     *   where: {
     *     // ... filter to delete one Funcao
     *   }
     * })
     * 
    **/
    delete<T extends funcaoDeleteArgs>(
      args: SelectSubset<T, funcaoDeleteArgs>
    ): CheckSelect<T, Prisma__funcaoClient<funcao>, Prisma__funcaoClient<funcaoGetPayload<T>>>

    /**
     * Update one Funcao.
     * @param {funcaoUpdateArgs} args - Arguments to update one Funcao.
     * @example
     * // Update one Funcao
     * const funcao = await prisma.funcao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends funcaoUpdateArgs>(
      args: SelectSubset<T, funcaoUpdateArgs>
    ): CheckSelect<T, Prisma__funcaoClient<funcao>, Prisma__funcaoClient<funcaoGetPayload<T>>>

    /**
     * Delete zero or more Funcaos.
     * @param {funcaoDeleteManyArgs} args - Arguments to filter Funcaos to delete.
     * @example
     * // Delete a few Funcaos
     * const { count } = await prisma.funcao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends funcaoDeleteManyArgs>(
      args?: SelectSubset<T, funcaoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Funcaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funcaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Funcaos
     * const funcao = await prisma.funcao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends funcaoUpdateManyArgs>(
      args: SelectSubset<T, funcaoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Funcao.
     * @param {funcaoUpsertArgs} args - Arguments to update or create a Funcao.
     * @example
     * // Update or create a Funcao
     * const funcao = await prisma.funcao.upsert({
     *   create: {
     *     // ... data to create a Funcao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Funcao we want to update
     *   }
     * })
    **/
    upsert<T extends funcaoUpsertArgs>(
      args: SelectSubset<T, funcaoUpsertArgs>
    ): CheckSelect<T, Prisma__funcaoClient<funcao>, Prisma__funcaoClient<funcaoGetPayload<T>>>

    /**
     * Find one Funcao that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {funcaoFindUniqueOrThrowArgs} args - Arguments to find a Funcao
     * @example
     * // Get one Funcao
     * const funcao = await prisma.funcao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends funcaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, funcaoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__funcaoClient<funcao>, Prisma__funcaoClient<funcaoGetPayload<T>>>

    /**
     * Find the first Funcao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funcaoFindFirstOrThrowArgs} args - Arguments to find a Funcao
     * @example
     * // Get one Funcao
     * const funcao = await prisma.funcao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends funcaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, funcaoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__funcaoClient<funcao>, Prisma__funcaoClient<funcaoGetPayload<T>>>

    /**
     * Count the number of Funcaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {funcaoCountArgs} args - Arguments to filter Funcaos to count.
     * @example
     * // Count the number of Funcaos
     * const count = await prisma.funcao.count({
     *   where: {
     *     // ... the filter for the Funcaos we want to count
     *   }
     * })
    **/
    count<T extends funcaoCountArgs>(
      args?: Subset<T, funcaoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FuncaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Funcao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FuncaoAggregateArgs>(args: Subset<T, FuncaoAggregateArgs>): PrismaPromise<GetFuncaoAggregateType<T>>

    /**
     * Group by Funcao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FuncaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FuncaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FuncaoGroupByArgs['orderBy'] }
        : { orderBy?: FuncaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FuncaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFuncaoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for funcao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__funcaoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    departamento<T extends departamentoArgs = {}>(args?: Subset<T, departamentoArgs>): CheckSelect<T, Prisma__departamentoClient<departamento | null >, Prisma__departamentoClient<departamentoGetPayload<T> | null >>;

    usuario<T extends usuarioFindManyArgs = {}>(args?: Subset<T, usuarioFindManyArgs>): CheckSelect<T, PrismaPromise<Array<usuario>>, PrismaPromise<Array<usuarioGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * funcao base type for findUnique actions
   */
  export type funcaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the funcao
     * 
    **/
    select?: funcaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: funcaoInclude | null
    /**
     * Filter, which funcao to fetch.
     * 
    **/
    where: funcaoWhereUniqueInput
  }

  /**
   * funcao: findUnique
   */
  export interface funcaoFindUniqueArgs extends funcaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * funcao base type for findFirst actions
   */
  export type funcaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the funcao
     * 
    **/
    select?: funcaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: funcaoInclude | null
    /**
     * Filter, which funcao to fetch.
     * 
    **/
    where?: funcaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funcaos to fetch.
     * 
    **/
    orderBy?: Enumerable<funcaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for funcaos.
     * 
    **/
    cursor?: funcaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funcaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funcaos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of funcaos.
     * 
    **/
    distinct?: Enumerable<FuncaoScalarFieldEnum>
  }

  /**
   * funcao: findFirst
   */
  export interface funcaoFindFirstArgs extends funcaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * funcao findMany
   */
  export type funcaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the funcao
     * 
    **/
    select?: funcaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: funcaoInclude | null
    /**
     * Filter, which funcaos to fetch.
     * 
    **/
    where?: funcaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of funcaos to fetch.
     * 
    **/
    orderBy?: Enumerable<funcaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing funcaos.
     * 
    **/
    cursor?: funcaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` funcaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` funcaos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<FuncaoScalarFieldEnum>
  }


  /**
   * funcao create
   */
  export type funcaoCreateArgs = {
    /**
     * Select specific fields to fetch from the funcao
     * 
    **/
    select?: funcaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: funcaoInclude | null
    /**
     * The data needed to create a funcao.
     * 
    **/
    data: XOR<funcaoCreateInput, funcaoUncheckedCreateInput>
  }


  /**
   * funcao createMany
   */
  export type funcaoCreateManyArgs = {
    /**
     * The data used to create many funcaos.
     * 
    **/
    data: Enumerable<funcaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * funcao update
   */
  export type funcaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the funcao
     * 
    **/
    select?: funcaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: funcaoInclude | null
    /**
     * The data needed to update a funcao.
     * 
    **/
    data: XOR<funcaoUpdateInput, funcaoUncheckedUpdateInput>
    /**
     * Choose, which funcao to update.
     * 
    **/
    where: funcaoWhereUniqueInput
  }


  /**
   * funcao updateMany
   */
  export type funcaoUpdateManyArgs = {
    /**
     * The data used to update funcaos.
     * 
    **/
    data: XOR<funcaoUpdateManyMutationInput, funcaoUncheckedUpdateManyInput>
    /**
     * Filter which funcaos to update
     * 
    **/
    where?: funcaoWhereInput
  }


  /**
   * funcao upsert
   */
  export type funcaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the funcao
     * 
    **/
    select?: funcaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: funcaoInclude | null
    /**
     * The filter to search for the funcao to update in case it exists.
     * 
    **/
    where: funcaoWhereUniqueInput
    /**
     * In case the funcao found by the `where` argument doesn't exist, create a new funcao with this data.
     * 
    **/
    create: XOR<funcaoCreateInput, funcaoUncheckedCreateInput>
    /**
     * In case the funcao was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<funcaoUpdateInput, funcaoUncheckedUpdateInput>
  }


  /**
   * funcao delete
   */
  export type funcaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the funcao
     * 
    **/
    select?: funcaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: funcaoInclude | null
    /**
     * Filter which funcao to delete.
     * 
    **/
    where: funcaoWhereUniqueInput
  }


  /**
   * funcao deleteMany
   */
  export type funcaoDeleteManyArgs = {
    /**
     * Filter which funcaos to delete
     * 
    **/
    where?: funcaoWhereInput
  }


  /**
   * funcao: findUniqueOrThrow
   */
  export type funcaoFindUniqueOrThrowArgs = funcaoFindUniqueArgsBase
      

  /**
   * funcao: findFirstOrThrow
   */
  export type funcaoFindFirstOrThrowArgs = funcaoFindFirstArgsBase
      

  /**
   * funcao without action
   */
  export type funcaoArgs = {
    /**
     * Select specific fields to fetch from the funcao
     * 
    **/
    select?: funcaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: funcaoInclude | null
  }



  /**
   * Model participante
   */


  export type AggregateParticipante = {
    _count: ParticipanteCountAggregateOutputType | null
    _avg: ParticipanteAvgAggregateOutputType | null
    _sum: ParticipanteSumAggregateOutputType | null
    _min: ParticipanteMinAggregateOutputType | null
    _max: ParticipanteMaxAggregateOutputType | null
  }

  export type ParticipanteAvgAggregateOutputType = {
    fk_usuario: number | null
    fk_reuniao: number | null
  }

  export type ParticipanteSumAggregateOutputType = {
    fk_usuario: number | null
    fk_reuniao: number | null
  }

  export type ParticipanteMinAggregateOutputType = {
    fk_usuario: number | null
    fk_reuniao: number | null
  }

  export type ParticipanteMaxAggregateOutputType = {
    fk_usuario: number | null
    fk_reuniao: number | null
  }

  export type ParticipanteCountAggregateOutputType = {
    fk_usuario: number
    fk_reuniao: number
    _all: number
  }


  export type ParticipanteAvgAggregateInputType = {
    fk_usuario?: true
    fk_reuniao?: true
  }

  export type ParticipanteSumAggregateInputType = {
    fk_usuario?: true
    fk_reuniao?: true
  }

  export type ParticipanteMinAggregateInputType = {
    fk_usuario?: true
    fk_reuniao?: true
  }

  export type ParticipanteMaxAggregateInputType = {
    fk_usuario?: true
    fk_reuniao?: true
  }

  export type ParticipanteCountAggregateInputType = {
    fk_usuario?: true
    fk_reuniao?: true
    _all?: true
  }

  export type ParticipanteAggregateArgs = {
    /**
     * Filter which participante to aggregate.
     * 
    **/
    where?: participanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participantes to fetch.
     * 
    **/
    orderBy?: Enumerable<participanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: participanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participantes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned participantes
    **/
    _count?: true | ParticipanteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ParticipanteAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ParticipanteSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ParticipanteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ParticipanteMaxAggregateInputType
  }

  export type GetParticipanteAggregateType<T extends ParticipanteAggregateArgs> = {
        [P in keyof T & keyof AggregateParticipante]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateParticipante[P]>
      : GetScalarType<T[P], AggregateParticipante[P]>
  }




  export type ParticipanteGroupByArgs = {
    where?: participanteWhereInput
    orderBy?: Enumerable<participanteOrderByWithAggregationInput>
    by: Array<ParticipanteScalarFieldEnum>
    having?: participanteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ParticipanteCountAggregateInputType | true
    _avg?: ParticipanteAvgAggregateInputType
    _sum?: ParticipanteSumAggregateInputType
    _min?: ParticipanteMinAggregateInputType
    _max?: ParticipanteMaxAggregateInputType
  }


  export type ParticipanteGroupByOutputType = {
    fk_usuario: number
    fk_reuniao: number
    _count: ParticipanteCountAggregateOutputType | null
    _avg: ParticipanteAvgAggregateOutputType | null
    _sum: ParticipanteSumAggregateOutputType | null
    _min: ParticipanteMinAggregateOutputType | null
    _max: ParticipanteMaxAggregateOutputType | null
  }

  type GetParticipanteGroupByPayload<T extends ParticipanteGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ParticipanteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ParticipanteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ParticipanteGroupByOutputType[P]>
            : GetScalarType<T[P], ParticipanteGroupByOutputType[P]>
        }
      >
    >


  export type participanteSelect = {
    fk_usuario?: boolean
    fk_reuniao?: boolean
    reuniao?: boolean | reuniaoArgs
    usuario?: boolean | usuarioArgs
  }

  export type participanteInclude = {
    reuniao?: boolean | reuniaoArgs
    usuario?: boolean | usuarioArgs
  }

  export type participanteGetPayload<
    S extends boolean | null | undefined | participanteArgs,
    U = keyof S
      > = S extends true
        ? participante
    : S extends undefined
    ? never
    : S extends participanteArgs | participanteFindManyArgs
    ?'include' extends U
    ? participante  & {
    [P in TrueKeys<S['include']>]:
        P extends 'reuniao' ? reuniaoGetPayload<S['include'][P]> :
        P extends 'usuario' ? usuarioGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'reuniao' ? reuniaoGetPayload<S['select'][P]> :
        P extends 'usuario' ? usuarioGetPayload<S['select'][P]> :  P extends keyof participante ? participante[P] : never
  } 
    : participante
  : participante


  type participanteCountArgs = Merge<
    Omit<participanteFindManyArgs, 'select' | 'include'> & {
      select?: ParticipanteCountAggregateInputType | true
    }
  >

  export interface participanteDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Participante that matches the filter.
     * @param {participanteFindUniqueArgs} args - Arguments to find a Participante
     * @example
     * // Get one Participante
     * const participante = await prisma.participante.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends participanteFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, participanteFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'participante'> extends True ? CheckSelect<T, Prisma__participanteClient<participante>, Prisma__participanteClient<participanteGetPayload<T>>> : CheckSelect<T, Prisma__participanteClient<participante | null >, Prisma__participanteClient<participanteGetPayload<T> | null >>

    /**
     * Find the first Participante that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participanteFindFirstArgs} args - Arguments to find a Participante
     * @example
     * // Get one Participante
     * const participante = await prisma.participante.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends participanteFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, participanteFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'participante'> extends True ? CheckSelect<T, Prisma__participanteClient<participante>, Prisma__participanteClient<participanteGetPayload<T>>> : CheckSelect<T, Prisma__participanteClient<participante | null >, Prisma__participanteClient<participanteGetPayload<T> | null >>

    /**
     * Find zero or more Participantes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participanteFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Participantes
     * const participantes = await prisma.participante.findMany()
     * 
     * // Get first 10 Participantes
     * const participantes = await prisma.participante.findMany({ take: 10 })
     * 
     * // Only select the `fk_usuario`
     * const participanteWithFk_usuarioOnly = await prisma.participante.findMany({ select: { fk_usuario: true } })
     * 
    **/
    findMany<T extends participanteFindManyArgs>(
      args?: SelectSubset<T, participanteFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<participante>>, PrismaPromise<Array<participanteGetPayload<T>>>>

    /**
     * Create a Participante.
     * @param {participanteCreateArgs} args - Arguments to create a Participante.
     * @example
     * // Create one Participante
     * const Participante = await prisma.participante.create({
     *   data: {
     *     // ... data to create a Participante
     *   }
     * })
     * 
    **/
    create<T extends participanteCreateArgs>(
      args: SelectSubset<T, participanteCreateArgs>
    ): CheckSelect<T, Prisma__participanteClient<participante>, Prisma__participanteClient<participanteGetPayload<T>>>

    /**
     * Create many Participantes.
     *     @param {participanteCreateManyArgs} args - Arguments to create many Participantes.
     *     @example
     *     // Create many Participantes
     *     const participante = await prisma.participante.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends participanteCreateManyArgs>(
      args?: SelectSubset<T, participanteCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Participante.
     * @param {participanteDeleteArgs} args - Arguments to delete one Participante.
     * @example
     * // Delete one Participante
     * const Participante = await prisma.participante.delete({
     *   where: {
     *     // ... filter to delete one Participante
     *   }
     * })
     * 
    **/
    delete<T extends participanteDeleteArgs>(
      args: SelectSubset<T, participanteDeleteArgs>
    ): CheckSelect<T, Prisma__participanteClient<participante>, Prisma__participanteClient<participanteGetPayload<T>>>

    /**
     * Update one Participante.
     * @param {participanteUpdateArgs} args - Arguments to update one Participante.
     * @example
     * // Update one Participante
     * const participante = await prisma.participante.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends participanteUpdateArgs>(
      args: SelectSubset<T, participanteUpdateArgs>
    ): CheckSelect<T, Prisma__participanteClient<participante>, Prisma__participanteClient<participanteGetPayload<T>>>

    /**
     * Delete zero or more Participantes.
     * @param {participanteDeleteManyArgs} args - Arguments to filter Participantes to delete.
     * @example
     * // Delete a few Participantes
     * const { count } = await prisma.participante.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends participanteDeleteManyArgs>(
      args?: SelectSubset<T, participanteDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Participantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participanteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Participantes
     * const participante = await prisma.participante.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends participanteUpdateManyArgs>(
      args: SelectSubset<T, participanteUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Participante.
     * @param {participanteUpsertArgs} args - Arguments to update or create a Participante.
     * @example
     * // Update or create a Participante
     * const participante = await prisma.participante.upsert({
     *   create: {
     *     // ... data to create a Participante
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Participante we want to update
     *   }
     * })
    **/
    upsert<T extends participanteUpsertArgs>(
      args: SelectSubset<T, participanteUpsertArgs>
    ): CheckSelect<T, Prisma__participanteClient<participante>, Prisma__participanteClient<participanteGetPayload<T>>>

    /**
     * Find one Participante that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {participanteFindUniqueOrThrowArgs} args - Arguments to find a Participante
     * @example
     * // Get one Participante
     * const participante = await prisma.participante.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends participanteFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, participanteFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__participanteClient<participante>, Prisma__participanteClient<participanteGetPayload<T>>>

    /**
     * Find the first Participante that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participanteFindFirstOrThrowArgs} args - Arguments to find a Participante
     * @example
     * // Get one Participante
     * const participante = await prisma.participante.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends participanteFindFirstOrThrowArgs>(
      args?: SelectSubset<T, participanteFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__participanteClient<participante>, Prisma__participanteClient<participanteGetPayload<T>>>

    /**
     * Count the number of Participantes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {participanteCountArgs} args - Arguments to filter Participantes to count.
     * @example
     * // Count the number of Participantes
     * const count = await prisma.participante.count({
     *   where: {
     *     // ... the filter for the Participantes we want to count
     *   }
     * })
    **/
    count<T extends participanteCountArgs>(
      args?: Subset<T, participanteCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ParticipanteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Participante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipanteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ParticipanteAggregateArgs>(args: Subset<T, ParticipanteAggregateArgs>): PrismaPromise<GetParticipanteAggregateType<T>>

    /**
     * Group by Participante.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ParticipanteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ParticipanteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ParticipanteGroupByArgs['orderBy'] }
        : { orderBy?: ParticipanteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ParticipanteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetParticipanteGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for participante.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__participanteClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    reuniao<T extends reuniaoArgs = {}>(args?: Subset<T, reuniaoArgs>): CheckSelect<T, Prisma__reuniaoClient<reuniao | null >, Prisma__reuniaoClient<reuniaoGetPayload<T> | null >>;

    usuario<T extends usuarioArgs = {}>(args?: Subset<T, usuarioArgs>): CheckSelect<T, Prisma__usuarioClient<usuario | null >, Prisma__usuarioClient<usuarioGetPayload<T> | null >>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * participante base type for findUnique actions
   */
  export type participanteFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the participante
     * 
    **/
    select?: participanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: participanteInclude | null
    /**
     * Filter, which participante to fetch.
     * 
    **/
    where: participanteWhereUniqueInput
  }

  /**
   * participante: findUnique
   */
  export interface participanteFindUniqueArgs extends participanteFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * participante base type for findFirst actions
   */
  export type participanteFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the participante
     * 
    **/
    select?: participanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: participanteInclude | null
    /**
     * Filter, which participante to fetch.
     * 
    **/
    where?: participanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participantes to fetch.
     * 
    **/
    orderBy?: Enumerable<participanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for participantes.
     * 
    **/
    cursor?: participanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participantes.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of participantes.
     * 
    **/
    distinct?: Enumerable<ParticipanteScalarFieldEnum>
  }

  /**
   * participante: findFirst
   */
  export interface participanteFindFirstArgs extends participanteFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * participante findMany
   */
  export type participanteFindManyArgs = {
    /**
     * Select specific fields to fetch from the participante
     * 
    **/
    select?: participanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: participanteInclude | null
    /**
     * Filter, which participantes to fetch.
     * 
    **/
    where?: participanteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of participantes to fetch.
     * 
    **/
    orderBy?: Enumerable<participanteOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing participantes.
     * 
    **/
    cursor?: participanteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` participantes from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` participantes.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ParticipanteScalarFieldEnum>
  }


  /**
   * participante create
   */
  export type participanteCreateArgs = {
    /**
     * Select specific fields to fetch from the participante
     * 
    **/
    select?: participanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: participanteInclude | null
    /**
     * The data needed to create a participante.
     * 
    **/
    data: XOR<participanteCreateInput, participanteUncheckedCreateInput>
  }


  /**
   * participante createMany
   */
  export type participanteCreateManyArgs = {
    /**
     * The data used to create many participantes.
     * 
    **/
    data: Enumerable<participanteCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * participante update
   */
  export type participanteUpdateArgs = {
    /**
     * Select specific fields to fetch from the participante
     * 
    **/
    select?: participanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: participanteInclude | null
    /**
     * The data needed to update a participante.
     * 
    **/
    data: XOR<participanteUpdateInput, participanteUncheckedUpdateInput>
    /**
     * Choose, which participante to update.
     * 
    **/
    where: participanteWhereUniqueInput
  }


  /**
   * participante updateMany
   */
  export type participanteUpdateManyArgs = {
    /**
     * The data used to update participantes.
     * 
    **/
    data: XOR<participanteUpdateManyMutationInput, participanteUncheckedUpdateManyInput>
    /**
     * Filter which participantes to update
     * 
    **/
    where?: participanteWhereInput
  }


  /**
   * participante upsert
   */
  export type participanteUpsertArgs = {
    /**
     * Select specific fields to fetch from the participante
     * 
    **/
    select?: participanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: participanteInclude | null
    /**
     * The filter to search for the participante to update in case it exists.
     * 
    **/
    where: participanteWhereUniqueInput
    /**
     * In case the participante found by the `where` argument doesn't exist, create a new participante with this data.
     * 
    **/
    create: XOR<participanteCreateInput, participanteUncheckedCreateInput>
    /**
     * In case the participante was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<participanteUpdateInput, participanteUncheckedUpdateInput>
  }


  /**
   * participante delete
   */
  export type participanteDeleteArgs = {
    /**
     * Select specific fields to fetch from the participante
     * 
    **/
    select?: participanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: participanteInclude | null
    /**
     * Filter which participante to delete.
     * 
    **/
    where: participanteWhereUniqueInput
  }


  /**
   * participante deleteMany
   */
  export type participanteDeleteManyArgs = {
    /**
     * Filter which participantes to delete
     * 
    **/
    where?: participanteWhereInput
  }


  /**
   * participante: findUniqueOrThrow
   */
  export type participanteFindUniqueOrThrowArgs = participanteFindUniqueArgsBase
      

  /**
   * participante: findFirstOrThrow
   */
  export type participanteFindFirstOrThrowArgs = participanteFindFirstArgsBase
      

  /**
   * participante without action
   */
  export type participanteArgs = {
    /**
     * Select specific fields to fetch from the participante
     * 
    **/
    select?: participanteSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: participanteInclude | null
  }



  /**
   * Model prioridade_reuniao
   */


  export type AggregatePrioridade_reuniao = {
    _count: Prioridade_reuniaoCountAggregateOutputType | null
    _avg: Prioridade_reuniaoAvgAggregateOutputType | null
    _sum: Prioridade_reuniaoSumAggregateOutputType | null
    _min: Prioridade_reuniaoMinAggregateOutputType | null
    _max: Prioridade_reuniaoMaxAggregateOutputType | null
  }

  export type Prioridade_reuniaoAvgAggregateOutputType = {
    pk_prioridade: number | null
  }

  export type Prioridade_reuniaoSumAggregateOutputType = {
    pk_prioridade: number | null
  }

  export type Prioridade_reuniaoMinAggregateOutputType = {
    descricao: string | null
    pk_prioridade: number | null
  }

  export type Prioridade_reuniaoMaxAggregateOutputType = {
    descricao: string | null
    pk_prioridade: number | null
  }

  export type Prioridade_reuniaoCountAggregateOutputType = {
    descricao: number
    pk_prioridade: number
    _all: number
  }


  export type Prioridade_reuniaoAvgAggregateInputType = {
    pk_prioridade?: true
  }

  export type Prioridade_reuniaoSumAggregateInputType = {
    pk_prioridade?: true
  }

  export type Prioridade_reuniaoMinAggregateInputType = {
    descricao?: true
    pk_prioridade?: true
  }

  export type Prioridade_reuniaoMaxAggregateInputType = {
    descricao?: true
    pk_prioridade?: true
  }

  export type Prioridade_reuniaoCountAggregateInputType = {
    descricao?: true
    pk_prioridade?: true
    _all?: true
  }

  export type Prioridade_reuniaoAggregateArgs = {
    /**
     * Filter which prioridade_reuniao to aggregate.
     * 
    **/
    where?: prioridade_reuniaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prioridade_reuniaos to fetch.
     * 
    **/
    orderBy?: Enumerable<prioridade_reuniaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: prioridade_reuniaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prioridade_reuniaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prioridade_reuniaos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned prioridade_reuniaos
    **/
    _count?: true | Prioridade_reuniaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Prioridade_reuniaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Prioridade_reuniaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Prioridade_reuniaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Prioridade_reuniaoMaxAggregateInputType
  }

  export type GetPrioridade_reuniaoAggregateType<T extends Prioridade_reuniaoAggregateArgs> = {
        [P in keyof T & keyof AggregatePrioridade_reuniao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePrioridade_reuniao[P]>
      : GetScalarType<T[P], AggregatePrioridade_reuniao[P]>
  }




  export type Prioridade_reuniaoGroupByArgs = {
    where?: prioridade_reuniaoWhereInput
    orderBy?: Enumerable<prioridade_reuniaoOrderByWithAggregationInput>
    by: Array<Prioridade_reuniaoScalarFieldEnum>
    having?: prioridade_reuniaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Prioridade_reuniaoCountAggregateInputType | true
    _avg?: Prioridade_reuniaoAvgAggregateInputType
    _sum?: Prioridade_reuniaoSumAggregateInputType
    _min?: Prioridade_reuniaoMinAggregateInputType
    _max?: Prioridade_reuniaoMaxAggregateInputType
  }


  export type Prioridade_reuniaoGroupByOutputType = {
    descricao: string
    pk_prioridade: number
    _count: Prioridade_reuniaoCountAggregateOutputType | null
    _avg: Prioridade_reuniaoAvgAggregateOutputType | null
    _sum: Prioridade_reuniaoSumAggregateOutputType | null
    _min: Prioridade_reuniaoMinAggregateOutputType | null
    _max: Prioridade_reuniaoMaxAggregateOutputType | null
  }

  type GetPrioridade_reuniaoGroupByPayload<T extends Prioridade_reuniaoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<Prioridade_reuniaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Prioridade_reuniaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Prioridade_reuniaoGroupByOutputType[P]>
            : GetScalarType<T[P], Prioridade_reuniaoGroupByOutputType[P]>
        }
      >
    >


  export type prioridade_reuniaoSelect = {
    descricao?: boolean
    pk_prioridade?: boolean
    reuniao?: boolean | reuniaoFindManyArgs
    _count?: boolean | Prioridade_reuniaoCountOutputTypeArgs
  }

  export type prioridade_reuniaoInclude = {
    reuniao?: boolean | reuniaoFindManyArgs
    _count?: boolean | Prioridade_reuniaoCountOutputTypeArgs
  }

  export type prioridade_reuniaoGetPayload<
    S extends boolean | null | undefined | prioridade_reuniaoArgs,
    U = keyof S
      > = S extends true
        ? prioridade_reuniao
    : S extends undefined
    ? never
    : S extends prioridade_reuniaoArgs | prioridade_reuniaoFindManyArgs
    ?'include' extends U
    ? prioridade_reuniao  & {
    [P in TrueKeys<S['include']>]:
        P extends 'reuniao' ? Array < reuniaoGetPayload<S['include'][P]>>  :
        P extends '_count' ? Prioridade_reuniaoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'reuniao' ? Array < reuniaoGetPayload<S['select'][P]>>  :
        P extends '_count' ? Prioridade_reuniaoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof prioridade_reuniao ? prioridade_reuniao[P] : never
  } 
    : prioridade_reuniao
  : prioridade_reuniao


  type prioridade_reuniaoCountArgs = Merge<
    Omit<prioridade_reuniaoFindManyArgs, 'select' | 'include'> & {
      select?: Prioridade_reuniaoCountAggregateInputType | true
    }
  >

  export interface prioridade_reuniaoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Prioridade_reuniao that matches the filter.
     * @param {prioridade_reuniaoFindUniqueArgs} args - Arguments to find a Prioridade_reuniao
     * @example
     * // Get one Prioridade_reuniao
     * const prioridade_reuniao = await prisma.prioridade_reuniao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends prioridade_reuniaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, prioridade_reuniaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'prioridade_reuniao'> extends True ? CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao>, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T>>> : CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao | null >, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T> | null >>

    /**
     * Find the first Prioridade_reuniao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prioridade_reuniaoFindFirstArgs} args - Arguments to find a Prioridade_reuniao
     * @example
     * // Get one Prioridade_reuniao
     * const prioridade_reuniao = await prisma.prioridade_reuniao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends prioridade_reuniaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, prioridade_reuniaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'prioridade_reuniao'> extends True ? CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao>, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T>>> : CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao | null >, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T> | null >>

    /**
     * Find zero or more Prioridade_reuniaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prioridade_reuniaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Prioridade_reuniaos
     * const prioridade_reuniaos = await prisma.prioridade_reuniao.findMany()
     * 
     * // Get first 10 Prioridade_reuniaos
     * const prioridade_reuniaos = await prisma.prioridade_reuniao.findMany({ take: 10 })
     * 
     * // Only select the `descricao`
     * const prioridade_reuniaoWithDescricaoOnly = await prisma.prioridade_reuniao.findMany({ select: { descricao: true } })
     * 
    **/
    findMany<T extends prioridade_reuniaoFindManyArgs>(
      args?: SelectSubset<T, prioridade_reuniaoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<prioridade_reuniao>>, PrismaPromise<Array<prioridade_reuniaoGetPayload<T>>>>

    /**
     * Create a Prioridade_reuniao.
     * @param {prioridade_reuniaoCreateArgs} args - Arguments to create a Prioridade_reuniao.
     * @example
     * // Create one Prioridade_reuniao
     * const Prioridade_reuniao = await prisma.prioridade_reuniao.create({
     *   data: {
     *     // ... data to create a Prioridade_reuniao
     *   }
     * })
     * 
    **/
    create<T extends prioridade_reuniaoCreateArgs>(
      args: SelectSubset<T, prioridade_reuniaoCreateArgs>
    ): CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao>, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T>>>

    /**
     * Create many Prioridade_reuniaos.
     *     @param {prioridade_reuniaoCreateManyArgs} args - Arguments to create many Prioridade_reuniaos.
     *     @example
     *     // Create many Prioridade_reuniaos
     *     const prioridade_reuniao = await prisma.prioridade_reuniao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends prioridade_reuniaoCreateManyArgs>(
      args?: SelectSubset<T, prioridade_reuniaoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Prioridade_reuniao.
     * @param {prioridade_reuniaoDeleteArgs} args - Arguments to delete one Prioridade_reuniao.
     * @example
     * // Delete one Prioridade_reuniao
     * const Prioridade_reuniao = await prisma.prioridade_reuniao.delete({
     *   where: {
     *     // ... filter to delete one Prioridade_reuniao
     *   }
     * })
     * 
    **/
    delete<T extends prioridade_reuniaoDeleteArgs>(
      args: SelectSubset<T, prioridade_reuniaoDeleteArgs>
    ): CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao>, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T>>>

    /**
     * Update one Prioridade_reuniao.
     * @param {prioridade_reuniaoUpdateArgs} args - Arguments to update one Prioridade_reuniao.
     * @example
     * // Update one Prioridade_reuniao
     * const prioridade_reuniao = await prisma.prioridade_reuniao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends prioridade_reuniaoUpdateArgs>(
      args: SelectSubset<T, prioridade_reuniaoUpdateArgs>
    ): CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao>, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T>>>

    /**
     * Delete zero or more Prioridade_reuniaos.
     * @param {prioridade_reuniaoDeleteManyArgs} args - Arguments to filter Prioridade_reuniaos to delete.
     * @example
     * // Delete a few Prioridade_reuniaos
     * const { count } = await prisma.prioridade_reuniao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends prioridade_reuniaoDeleteManyArgs>(
      args?: SelectSubset<T, prioridade_reuniaoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Prioridade_reuniaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prioridade_reuniaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Prioridade_reuniaos
     * const prioridade_reuniao = await prisma.prioridade_reuniao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends prioridade_reuniaoUpdateManyArgs>(
      args: SelectSubset<T, prioridade_reuniaoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Prioridade_reuniao.
     * @param {prioridade_reuniaoUpsertArgs} args - Arguments to update or create a Prioridade_reuniao.
     * @example
     * // Update or create a Prioridade_reuniao
     * const prioridade_reuniao = await prisma.prioridade_reuniao.upsert({
     *   create: {
     *     // ... data to create a Prioridade_reuniao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Prioridade_reuniao we want to update
     *   }
     * })
    **/
    upsert<T extends prioridade_reuniaoUpsertArgs>(
      args: SelectSubset<T, prioridade_reuniaoUpsertArgs>
    ): CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao>, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T>>>

    /**
     * Find one Prioridade_reuniao that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {prioridade_reuniaoFindUniqueOrThrowArgs} args - Arguments to find a Prioridade_reuniao
     * @example
     * // Get one Prioridade_reuniao
     * const prioridade_reuniao = await prisma.prioridade_reuniao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends prioridade_reuniaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, prioridade_reuniaoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao>, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T>>>

    /**
     * Find the first Prioridade_reuniao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prioridade_reuniaoFindFirstOrThrowArgs} args - Arguments to find a Prioridade_reuniao
     * @example
     * // Get one Prioridade_reuniao
     * const prioridade_reuniao = await prisma.prioridade_reuniao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends prioridade_reuniaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, prioridade_reuniaoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao>, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T>>>

    /**
     * Count the number of Prioridade_reuniaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {prioridade_reuniaoCountArgs} args - Arguments to filter Prioridade_reuniaos to count.
     * @example
     * // Count the number of Prioridade_reuniaos
     * const count = await prisma.prioridade_reuniao.count({
     *   where: {
     *     // ... the filter for the Prioridade_reuniaos we want to count
     *   }
     * })
    **/
    count<T extends prioridade_reuniaoCountArgs>(
      args?: Subset<T, prioridade_reuniaoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Prioridade_reuniaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Prioridade_reuniao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prioridade_reuniaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Prioridade_reuniaoAggregateArgs>(args: Subset<T, Prioridade_reuniaoAggregateArgs>): PrismaPromise<GetPrioridade_reuniaoAggregateType<T>>

    /**
     * Group by Prioridade_reuniao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Prioridade_reuniaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends Prioridade_reuniaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: Prioridade_reuniaoGroupByArgs['orderBy'] }
        : { orderBy?: Prioridade_reuniaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, Prioridade_reuniaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPrioridade_reuniaoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for prioridade_reuniao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__prioridade_reuniaoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    reuniao<T extends reuniaoFindManyArgs = {}>(args?: Subset<T, reuniaoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<reuniao>>, PrismaPromise<Array<reuniaoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * prioridade_reuniao base type for findUnique actions
   */
  export type prioridade_reuniaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the prioridade_reuniao
     * 
    **/
    select?: prioridade_reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: prioridade_reuniaoInclude | null
    /**
     * Filter, which prioridade_reuniao to fetch.
     * 
    **/
    where: prioridade_reuniaoWhereUniqueInput
  }

  /**
   * prioridade_reuniao: findUnique
   */
  export interface prioridade_reuniaoFindUniqueArgs extends prioridade_reuniaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * prioridade_reuniao base type for findFirst actions
   */
  export type prioridade_reuniaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the prioridade_reuniao
     * 
    **/
    select?: prioridade_reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: prioridade_reuniaoInclude | null
    /**
     * Filter, which prioridade_reuniao to fetch.
     * 
    **/
    where?: prioridade_reuniaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prioridade_reuniaos to fetch.
     * 
    **/
    orderBy?: Enumerable<prioridade_reuniaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for prioridade_reuniaos.
     * 
    **/
    cursor?: prioridade_reuniaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prioridade_reuniaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prioridade_reuniaos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of prioridade_reuniaos.
     * 
    **/
    distinct?: Enumerable<Prioridade_reuniaoScalarFieldEnum>
  }

  /**
   * prioridade_reuniao: findFirst
   */
  export interface prioridade_reuniaoFindFirstArgs extends prioridade_reuniaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * prioridade_reuniao findMany
   */
  export type prioridade_reuniaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the prioridade_reuniao
     * 
    **/
    select?: prioridade_reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: prioridade_reuniaoInclude | null
    /**
     * Filter, which prioridade_reuniaos to fetch.
     * 
    **/
    where?: prioridade_reuniaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of prioridade_reuniaos to fetch.
     * 
    **/
    orderBy?: Enumerable<prioridade_reuniaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing prioridade_reuniaos.
     * 
    **/
    cursor?: prioridade_reuniaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` prioridade_reuniaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` prioridade_reuniaos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<Prioridade_reuniaoScalarFieldEnum>
  }


  /**
   * prioridade_reuniao create
   */
  export type prioridade_reuniaoCreateArgs = {
    /**
     * Select specific fields to fetch from the prioridade_reuniao
     * 
    **/
    select?: prioridade_reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: prioridade_reuniaoInclude | null
    /**
     * The data needed to create a prioridade_reuniao.
     * 
    **/
    data: XOR<prioridade_reuniaoCreateInput, prioridade_reuniaoUncheckedCreateInput>
  }


  /**
   * prioridade_reuniao createMany
   */
  export type prioridade_reuniaoCreateManyArgs = {
    /**
     * The data used to create many prioridade_reuniaos.
     * 
    **/
    data: Enumerable<prioridade_reuniaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * prioridade_reuniao update
   */
  export type prioridade_reuniaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the prioridade_reuniao
     * 
    **/
    select?: prioridade_reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: prioridade_reuniaoInclude | null
    /**
     * The data needed to update a prioridade_reuniao.
     * 
    **/
    data: XOR<prioridade_reuniaoUpdateInput, prioridade_reuniaoUncheckedUpdateInput>
    /**
     * Choose, which prioridade_reuniao to update.
     * 
    **/
    where: prioridade_reuniaoWhereUniqueInput
  }


  /**
   * prioridade_reuniao updateMany
   */
  export type prioridade_reuniaoUpdateManyArgs = {
    /**
     * The data used to update prioridade_reuniaos.
     * 
    **/
    data: XOR<prioridade_reuniaoUpdateManyMutationInput, prioridade_reuniaoUncheckedUpdateManyInput>
    /**
     * Filter which prioridade_reuniaos to update
     * 
    **/
    where?: prioridade_reuniaoWhereInput
  }


  /**
   * prioridade_reuniao upsert
   */
  export type prioridade_reuniaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the prioridade_reuniao
     * 
    **/
    select?: prioridade_reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: prioridade_reuniaoInclude | null
    /**
     * The filter to search for the prioridade_reuniao to update in case it exists.
     * 
    **/
    where: prioridade_reuniaoWhereUniqueInput
    /**
     * In case the prioridade_reuniao found by the `where` argument doesn't exist, create a new prioridade_reuniao with this data.
     * 
    **/
    create: XOR<prioridade_reuniaoCreateInput, prioridade_reuniaoUncheckedCreateInput>
    /**
     * In case the prioridade_reuniao was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<prioridade_reuniaoUpdateInput, prioridade_reuniaoUncheckedUpdateInput>
  }


  /**
   * prioridade_reuniao delete
   */
  export type prioridade_reuniaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the prioridade_reuniao
     * 
    **/
    select?: prioridade_reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: prioridade_reuniaoInclude | null
    /**
     * Filter which prioridade_reuniao to delete.
     * 
    **/
    where: prioridade_reuniaoWhereUniqueInput
  }


  /**
   * prioridade_reuniao deleteMany
   */
  export type prioridade_reuniaoDeleteManyArgs = {
    /**
     * Filter which prioridade_reuniaos to delete
     * 
    **/
    where?: prioridade_reuniaoWhereInput
  }


  /**
   * prioridade_reuniao: findUniqueOrThrow
   */
  export type prioridade_reuniaoFindUniqueOrThrowArgs = prioridade_reuniaoFindUniqueArgsBase
      

  /**
   * prioridade_reuniao: findFirstOrThrow
   */
  export type prioridade_reuniaoFindFirstOrThrowArgs = prioridade_reuniaoFindFirstArgsBase
      

  /**
   * prioridade_reuniao without action
   */
  export type prioridade_reuniaoArgs = {
    /**
     * Select specific fields to fetch from the prioridade_reuniao
     * 
    **/
    select?: prioridade_reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: prioridade_reuniaoInclude | null
  }



  /**
   * Model reuniao
   */


  export type AggregateReuniao = {
    _count: ReuniaoCountAggregateOutputType | null
    _avg: ReuniaoAvgAggregateOutputType | null
    _sum: ReuniaoSumAggregateOutputType | null
    _min: ReuniaoMinAggregateOutputType | null
    _max: ReuniaoMaxAggregateOutputType | null
  }

  export type ReuniaoAvgAggregateOutputType = {
    pk_reuniao: number | null
    fk_prioridade: number | null
    fk_sala: number | null
  }

  export type ReuniaoSumAggregateOutputType = {
    pk_reuniao: number | null
    fk_prioridade: number | null
    fk_sala: number | null
  }

  export type ReuniaoMinAggregateOutputType = {
    title: string | null
    duracao: string | null
    date_realizacao: Date | null
    tempo_inicio: Date | null
    tempo_final: Date | null
    estado_reuniao: estado_reuniao | null
    pk_reuniao: number | null
    fk_prioridade: number | null
    fk_sala: number | null
  }

  export type ReuniaoMaxAggregateOutputType = {
    title: string | null
    duracao: string | null
    date_realizacao: Date | null
    tempo_inicio: Date | null
    tempo_final: Date | null
    estado_reuniao: estado_reuniao | null
    pk_reuniao: number | null
    fk_prioridade: number | null
    fk_sala: number | null
  }

  export type ReuniaoCountAggregateOutputType = {
    title: number
    duracao: number
    date_realizacao: number
    tempo_inicio: number
    tempo_final: number
    estado_reuniao: number
    pk_reuniao: number
    fk_prioridade: number
    fk_sala: number
    _all: number
  }


  export type ReuniaoAvgAggregateInputType = {
    pk_reuniao?: true
    fk_prioridade?: true
    fk_sala?: true
  }

  export type ReuniaoSumAggregateInputType = {
    pk_reuniao?: true
    fk_prioridade?: true
    fk_sala?: true
  }

  export type ReuniaoMinAggregateInputType = {
    title?: true
    duracao?: true
    date_realizacao?: true
    tempo_inicio?: true
    tempo_final?: true
    estado_reuniao?: true
    pk_reuniao?: true
    fk_prioridade?: true
    fk_sala?: true
  }

  export type ReuniaoMaxAggregateInputType = {
    title?: true
    duracao?: true
    date_realizacao?: true
    tempo_inicio?: true
    tempo_final?: true
    estado_reuniao?: true
    pk_reuniao?: true
    fk_prioridade?: true
    fk_sala?: true
  }

  export type ReuniaoCountAggregateInputType = {
    title?: true
    duracao?: true
    date_realizacao?: true
    tempo_inicio?: true
    tempo_final?: true
    estado_reuniao?: true
    pk_reuniao?: true
    fk_prioridade?: true
    fk_sala?: true
    _all?: true
  }

  export type ReuniaoAggregateArgs = {
    /**
     * Filter which reuniao to aggregate.
     * 
    **/
    where?: reuniaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reuniaos to fetch.
     * 
    **/
    orderBy?: Enumerable<reuniaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: reuniaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reuniaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reuniaos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned reuniaos
    **/
    _count?: true | ReuniaoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReuniaoAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReuniaoSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReuniaoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReuniaoMaxAggregateInputType
  }

  export type GetReuniaoAggregateType<T extends ReuniaoAggregateArgs> = {
        [P in keyof T & keyof AggregateReuniao]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReuniao[P]>
      : GetScalarType<T[P], AggregateReuniao[P]>
  }




  export type ReuniaoGroupByArgs = {
    where?: reuniaoWhereInput
    orderBy?: Enumerable<reuniaoOrderByWithAggregationInput>
    by: Array<ReuniaoScalarFieldEnum>
    having?: reuniaoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReuniaoCountAggregateInputType | true
    _avg?: ReuniaoAvgAggregateInputType
    _sum?: ReuniaoSumAggregateInputType
    _min?: ReuniaoMinAggregateInputType
    _max?: ReuniaoMaxAggregateInputType
  }


  export type ReuniaoGroupByOutputType = {
    title: string
    duracao: string
    date_realizacao: Date
    tempo_inicio: Date
    tempo_final: Date
    estado_reuniao: estado_reuniao
    pk_reuniao: number
    fk_prioridade: number
    fk_sala: number
    _count: ReuniaoCountAggregateOutputType | null
    _avg: ReuniaoAvgAggregateOutputType | null
    _sum: ReuniaoSumAggregateOutputType | null
    _min: ReuniaoMinAggregateOutputType | null
    _max: ReuniaoMaxAggregateOutputType | null
  }

  type GetReuniaoGroupByPayload<T extends ReuniaoGroupByArgs> = PrismaPromise<
    Array<
      PickArray<ReuniaoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReuniaoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReuniaoGroupByOutputType[P]>
            : GetScalarType<T[P], ReuniaoGroupByOutputType[P]>
        }
      >
    >


  export type reuniaoSelect = {
    title?: boolean
    duracao?: boolean
    date_realizacao?: boolean
    tempo_inicio?: boolean
    tempo_final?: boolean
    estado_reuniao?: boolean
    pk_reuniao?: boolean
    fk_prioridade?: boolean
    fk_sala?: boolean
    sala?: boolean | salaArgs
    prioridade_reuniao?: boolean | prioridade_reuniaoArgs
    participante?: boolean | participanteFindManyArgs
    _count?: boolean | ReuniaoCountOutputTypeArgs
  }

  export type reuniaoInclude = {
    sala?: boolean | salaArgs
    prioridade_reuniao?: boolean | prioridade_reuniaoArgs
    participante?: boolean | participanteFindManyArgs
    _count?: boolean | ReuniaoCountOutputTypeArgs
  }

  export type reuniaoGetPayload<
    S extends boolean | null | undefined | reuniaoArgs,
    U = keyof S
      > = S extends true
        ? reuniao
    : S extends undefined
    ? never
    : S extends reuniaoArgs | reuniaoFindManyArgs
    ?'include' extends U
    ? reuniao  & {
    [P in TrueKeys<S['include']>]:
        P extends 'sala' ? salaGetPayload<S['include'][P]> :
        P extends 'prioridade_reuniao' ? prioridade_reuniaoGetPayload<S['include'][P]> :
        P extends 'participante' ? Array < participanteGetPayload<S['include'][P]>>  :
        P extends '_count' ? ReuniaoCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'sala' ? salaGetPayload<S['select'][P]> :
        P extends 'prioridade_reuniao' ? prioridade_reuniaoGetPayload<S['select'][P]> :
        P extends 'participante' ? Array < participanteGetPayload<S['select'][P]>>  :
        P extends '_count' ? ReuniaoCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof reuniao ? reuniao[P] : never
  } 
    : reuniao
  : reuniao


  type reuniaoCountArgs = Merge<
    Omit<reuniaoFindManyArgs, 'select' | 'include'> & {
      select?: ReuniaoCountAggregateInputType | true
    }
  >

  export interface reuniaoDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Reuniao that matches the filter.
     * @param {reuniaoFindUniqueArgs} args - Arguments to find a Reuniao
     * @example
     * // Get one Reuniao
     * const reuniao = await prisma.reuniao.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends reuniaoFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, reuniaoFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'reuniao'> extends True ? CheckSelect<T, Prisma__reuniaoClient<reuniao>, Prisma__reuniaoClient<reuniaoGetPayload<T>>> : CheckSelect<T, Prisma__reuniaoClient<reuniao | null >, Prisma__reuniaoClient<reuniaoGetPayload<T> | null >>

    /**
     * Find the first Reuniao that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reuniaoFindFirstArgs} args - Arguments to find a Reuniao
     * @example
     * // Get one Reuniao
     * const reuniao = await prisma.reuniao.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends reuniaoFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, reuniaoFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'reuniao'> extends True ? CheckSelect<T, Prisma__reuniaoClient<reuniao>, Prisma__reuniaoClient<reuniaoGetPayload<T>>> : CheckSelect<T, Prisma__reuniaoClient<reuniao | null >, Prisma__reuniaoClient<reuniaoGetPayload<T> | null >>

    /**
     * Find zero or more Reuniaos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reuniaoFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reuniaos
     * const reuniaos = await prisma.reuniao.findMany()
     * 
     * // Get first 10 Reuniaos
     * const reuniaos = await prisma.reuniao.findMany({ take: 10 })
     * 
     * // Only select the `title`
     * const reuniaoWithTitleOnly = await prisma.reuniao.findMany({ select: { title: true } })
     * 
    **/
    findMany<T extends reuniaoFindManyArgs>(
      args?: SelectSubset<T, reuniaoFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<reuniao>>, PrismaPromise<Array<reuniaoGetPayload<T>>>>

    /**
     * Create a Reuniao.
     * @param {reuniaoCreateArgs} args - Arguments to create a Reuniao.
     * @example
     * // Create one Reuniao
     * const Reuniao = await prisma.reuniao.create({
     *   data: {
     *     // ... data to create a Reuniao
     *   }
     * })
     * 
    **/
    create<T extends reuniaoCreateArgs>(
      args: SelectSubset<T, reuniaoCreateArgs>
    ): CheckSelect<T, Prisma__reuniaoClient<reuniao>, Prisma__reuniaoClient<reuniaoGetPayload<T>>>

    /**
     * Create many Reuniaos.
     *     @param {reuniaoCreateManyArgs} args - Arguments to create many Reuniaos.
     *     @example
     *     // Create many Reuniaos
     *     const reuniao = await prisma.reuniao.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends reuniaoCreateManyArgs>(
      args?: SelectSubset<T, reuniaoCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Reuniao.
     * @param {reuniaoDeleteArgs} args - Arguments to delete one Reuniao.
     * @example
     * // Delete one Reuniao
     * const Reuniao = await prisma.reuniao.delete({
     *   where: {
     *     // ... filter to delete one Reuniao
     *   }
     * })
     * 
    **/
    delete<T extends reuniaoDeleteArgs>(
      args: SelectSubset<T, reuniaoDeleteArgs>
    ): CheckSelect<T, Prisma__reuniaoClient<reuniao>, Prisma__reuniaoClient<reuniaoGetPayload<T>>>

    /**
     * Update one Reuniao.
     * @param {reuniaoUpdateArgs} args - Arguments to update one Reuniao.
     * @example
     * // Update one Reuniao
     * const reuniao = await prisma.reuniao.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends reuniaoUpdateArgs>(
      args: SelectSubset<T, reuniaoUpdateArgs>
    ): CheckSelect<T, Prisma__reuniaoClient<reuniao>, Prisma__reuniaoClient<reuniaoGetPayload<T>>>

    /**
     * Delete zero or more Reuniaos.
     * @param {reuniaoDeleteManyArgs} args - Arguments to filter Reuniaos to delete.
     * @example
     * // Delete a few Reuniaos
     * const { count } = await prisma.reuniao.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends reuniaoDeleteManyArgs>(
      args?: SelectSubset<T, reuniaoDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reuniaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reuniaoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reuniaos
     * const reuniao = await prisma.reuniao.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends reuniaoUpdateManyArgs>(
      args: SelectSubset<T, reuniaoUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Reuniao.
     * @param {reuniaoUpsertArgs} args - Arguments to update or create a Reuniao.
     * @example
     * // Update or create a Reuniao
     * const reuniao = await prisma.reuniao.upsert({
     *   create: {
     *     // ... data to create a Reuniao
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Reuniao we want to update
     *   }
     * })
    **/
    upsert<T extends reuniaoUpsertArgs>(
      args: SelectSubset<T, reuniaoUpsertArgs>
    ): CheckSelect<T, Prisma__reuniaoClient<reuniao>, Prisma__reuniaoClient<reuniaoGetPayload<T>>>

    /**
     * Find one Reuniao that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {reuniaoFindUniqueOrThrowArgs} args - Arguments to find a Reuniao
     * @example
     * // Get one Reuniao
     * const reuniao = await prisma.reuniao.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends reuniaoFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, reuniaoFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__reuniaoClient<reuniao>, Prisma__reuniaoClient<reuniaoGetPayload<T>>>

    /**
     * Find the first Reuniao that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reuniaoFindFirstOrThrowArgs} args - Arguments to find a Reuniao
     * @example
     * // Get one Reuniao
     * const reuniao = await prisma.reuniao.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends reuniaoFindFirstOrThrowArgs>(
      args?: SelectSubset<T, reuniaoFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__reuniaoClient<reuniao>, Prisma__reuniaoClient<reuniaoGetPayload<T>>>

    /**
     * Count the number of Reuniaos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {reuniaoCountArgs} args - Arguments to filter Reuniaos to count.
     * @example
     * // Count the number of Reuniaos
     * const count = await prisma.reuniao.count({
     *   where: {
     *     // ... the filter for the Reuniaos we want to count
     *   }
     * })
    **/
    count<T extends reuniaoCountArgs>(
      args?: Subset<T, reuniaoCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReuniaoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Reuniao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReuniaoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReuniaoAggregateArgs>(args: Subset<T, ReuniaoAggregateArgs>): PrismaPromise<GetReuniaoAggregateType<T>>

    /**
     * Group by Reuniao.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReuniaoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReuniaoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReuniaoGroupByArgs['orderBy'] }
        : { orderBy?: ReuniaoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReuniaoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReuniaoGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for reuniao.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__reuniaoClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    sala<T extends salaArgs = {}>(args?: Subset<T, salaArgs>): CheckSelect<T, Prisma__salaClient<sala | null >, Prisma__salaClient<salaGetPayload<T> | null >>;

    prioridade_reuniao<T extends prioridade_reuniaoArgs = {}>(args?: Subset<T, prioridade_reuniaoArgs>): CheckSelect<T, Prisma__prioridade_reuniaoClient<prioridade_reuniao | null >, Prisma__prioridade_reuniaoClient<prioridade_reuniaoGetPayload<T> | null >>;

    participante<T extends participanteFindManyArgs = {}>(args?: Subset<T, participanteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<participante>>, PrismaPromise<Array<participanteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * reuniao base type for findUnique actions
   */
  export type reuniaoFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the reuniao
     * 
    **/
    select?: reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reuniaoInclude | null
    /**
     * Filter, which reuniao to fetch.
     * 
    **/
    where: reuniaoWhereUniqueInput
  }

  /**
   * reuniao: findUnique
   */
  export interface reuniaoFindUniqueArgs extends reuniaoFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reuniao base type for findFirst actions
   */
  export type reuniaoFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the reuniao
     * 
    **/
    select?: reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reuniaoInclude | null
    /**
     * Filter, which reuniao to fetch.
     * 
    **/
    where?: reuniaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reuniaos to fetch.
     * 
    **/
    orderBy?: Enumerable<reuniaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for reuniaos.
     * 
    **/
    cursor?: reuniaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reuniaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reuniaos.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of reuniaos.
     * 
    **/
    distinct?: Enumerable<ReuniaoScalarFieldEnum>
  }

  /**
   * reuniao: findFirst
   */
  export interface reuniaoFindFirstArgs extends reuniaoFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * reuniao findMany
   */
  export type reuniaoFindManyArgs = {
    /**
     * Select specific fields to fetch from the reuniao
     * 
    **/
    select?: reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reuniaoInclude | null
    /**
     * Filter, which reuniaos to fetch.
     * 
    **/
    where?: reuniaoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of reuniaos to fetch.
     * 
    **/
    orderBy?: Enumerable<reuniaoOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing reuniaos.
     * 
    **/
    cursor?: reuniaoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` reuniaos from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` reuniaos.
     * 
    **/
    skip?: number
    distinct?: Enumerable<ReuniaoScalarFieldEnum>
  }


  /**
   * reuniao create
   */
  export type reuniaoCreateArgs = {
    /**
     * Select specific fields to fetch from the reuniao
     * 
    **/
    select?: reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reuniaoInclude | null
    /**
     * The data needed to create a reuniao.
     * 
    **/
    data: XOR<reuniaoCreateInput, reuniaoUncheckedCreateInput>
  }


  /**
   * reuniao createMany
   */
  export type reuniaoCreateManyArgs = {
    /**
     * The data used to create many reuniaos.
     * 
    **/
    data: Enumerable<reuniaoCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * reuniao update
   */
  export type reuniaoUpdateArgs = {
    /**
     * Select specific fields to fetch from the reuniao
     * 
    **/
    select?: reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reuniaoInclude | null
    /**
     * The data needed to update a reuniao.
     * 
    **/
    data: XOR<reuniaoUpdateInput, reuniaoUncheckedUpdateInput>
    /**
     * Choose, which reuniao to update.
     * 
    **/
    where: reuniaoWhereUniqueInput
  }


  /**
   * reuniao updateMany
   */
  export type reuniaoUpdateManyArgs = {
    /**
     * The data used to update reuniaos.
     * 
    **/
    data: XOR<reuniaoUpdateManyMutationInput, reuniaoUncheckedUpdateManyInput>
    /**
     * Filter which reuniaos to update
     * 
    **/
    where?: reuniaoWhereInput
  }


  /**
   * reuniao upsert
   */
  export type reuniaoUpsertArgs = {
    /**
     * Select specific fields to fetch from the reuniao
     * 
    **/
    select?: reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reuniaoInclude | null
    /**
     * The filter to search for the reuniao to update in case it exists.
     * 
    **/
    where: reuniaoWhereUniqueInput
    /**
     * In case the reuniao found by the `where` argument doesn't exist, create a new reuniao with this data.
     * 
    **/
    create: XOR<reuniaoCreateInput, reuniaoUncheckedCreateInput>
    /**
     * In case the reuniao was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<reuniaoUpdateInput, reuniaoUncheckedUpdateInput>
  }


  /**
   * reuniao delete
   */
  export type reuniaoDeleteArgs = {
    /**
     * Select specific fields to fetch from the reuniao
     * 
    **/
    select?: reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reuniaoInclude | null
    /**
     * Filter which reuniao to delete.
     * 
    **/
    where: reuniaoWhereUniqueInput
  }


  /**
   * reuniao deleteMany
   */
  export type reuniaoDeleteManyArgs = {
    /**
     * Filter which reuniaos to delete
     * 
    **/
    where?: reuniaoWhereInput
  }


  /**
   * reuniao: findUniqueOrThrow
   */
  export type reuniaoFindUniqueOrThrowArgs = reuniaoFindUniqueArgsBase
      

  /**
   * reuniao: findFirstOrThrow
   */
  export type reuniaoFindFirstOrThrowArgs = reuniaoFindFirstArgsBase
      

  /**
   * reuniao without action
   */
  export type reuniaoArgs = {
    /**
     * Select specific fields to fetch from the reuniao
     * 
    **/
    select?: reuniaoSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: reuniaoInclude | null
  }



  /**
   * Model sala
   */


  export type AggregateSala = {
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  export type SalaAvgAggregateOutputType = {
    pk_sala: number | null
    fk_edificio: number | null
  }

  export type SalaSumAggregateOutputType = {
    pk_sala: number | null
    fk_edificio: number | null
  }

  export type SalaMinAggregateOutputType = {
    piso: string | null
    nome: string | null
    pk_sala: number | null
    fk_edificio: number | null
  }

  export type SalaMaxAggregateOutputType = {
    piso: string | null
    nome: string | null
    pk_sala: number | null
    fk_edificio: number | null
  }

  export type SalaCountAggregateOutputType = {
    piso: number
    nome: number
    pk_sala: number
    fk_edificio: number
    _all: number
  }


  export type SalaAvgAggregateInputType = {
    pk_sala?: true
    fk_edificio?: true
  }

  export type SalaSumAggregateInputType = {
    pk_sala?: true
    fk_edificio?: true
  }

  export type SalaMinAggregateInputType = {
    piso?: true
    nome?: true
    pk_sala?: true
    fk_edificio?: true
  }

  export type SalaMaxAggregateInputType = {
    piso?: true
    nome?: true
    pk_sala?: true
    fk_edificio?: true
  }

  export type SalaCountAggregateInputType = {
    piso?: true
    nome?: true
    pk_sala?: true
    fk_edificio?: true
    _all?: true
  }

  export type SalaAggregateArgs = {
    /**
     * Filter which sala to aggregate.
     * 
    **/
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     * 
    **/
    orderBy?: Enumerable<salaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned salas
    **/
    _count?: true | SalaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SalaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SalaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SalaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SalaMaxAggregateInputType
  }

  export type GetSalaAggregateType<T extends SalaAggregateArgs> = {
        [P in keyof T & keyof AggregateSala]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSala[P]>
      : GetScalarType<T[P], AggregateSala[P]>
  }




  export type SalaGroupByArgs = {
    where?: salaWhereInput
    orderBy?: Enumerable<salaOrderByWithAggregationInput>
    by: Array<SalaScalarFieldEnum>
    having?: salaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SalaCountAggregateInputType | true
    _avg?: SalaAvgAggregateInputType
    _sum?: SalaSumAggregateInputType
    _min?: SalaMinAggregateInputType
    _max?: SalaMaxAggregateInputType
  }


  export type SalaGroupByOutputType = {
    piso: string
    nome: string
    pk_sala: number
    fk_edificio: number
    _count: SalaCountAggregateOutputType | null
    _avg: SalaAvgAggregateOutputType | null
    _sum: SalaSumAggregateOutputType | null
    _min: SalaMinAggregateOutputType | null
    _max: SalaMaxAggregateOutputType | null
  }

  type GetSalaGroupByPayload<T extends SalaGroupByArgs> = PrismaPromise<
    Array<
      PickArray<SalaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SalaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SalaGroupByOutputType[P]>
            : GetScalarType<T[P], SalaGroupByOutputType[P]>
        }
      >
    >


  export type salaSelect = {
    piso?: boolean
    nome?: boolean
    pk_sala?: boolean
    fk_edificio?: boolean
    edificio?: boolean | edificioArgs
    reuniao?: boolean | reuniaoFindManyArgs
    _count?: boolean | SalaCountOutputTypeArgs
  }

  export type salaInclude = {
    edificio?: boolean | edificioArgs
    reuniao?: boolean | reuniaoFindManyArgs
    _count?: boolean | SalaCountOutputTypeArgs
  }

  export type salaGetPayload<
    S extends boolean | null | undefined | salaArgs,
    U = keyof S
      > = S extends true
        ? sala
    : S extends undefined
    ? never
    : S extends salaArgs | salaFindManyArgs
    ?'include' extends U
    ? sala  & {
    [P in TrueKeys<S['include']>]:
        P extends 'edificio' ? edificioGetPayload<S['include'][P]> :
        P extends 'reuniao' ? Array < reuniaoGetPayload<S['include'][P]>>  :
        P extends '_count' ? SalaCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'edificio' ? edificioGetPayload<S['select'][P]> :
        P extends 'reuniao' ? Array < reuniaoGetPayload<S['select'][P]>>  :
        P extends '_count' ? SalaCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof sala ? sala[P] : never
  } 
    : sala
  : sala


  type salaCountArgs = Merge<
    Omit<salaFindManyArgs, 'select' | 'include'> & {
      select?: SalaCountAggregateInputType | true
    }
  >

  export interface salaDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Sala that matches the filter.
     * @param {salaFindUniqueArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends salaFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, salaFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'sala'> extends True ? CheckSelect<T, Prisma__salaClient<sala>, Prisma__salaClient<salaGetPayload<T>>> : CheckSelect<T, Prisma__salaClient<sala | null >, Prisma__salaClient<salaGetPayload<T> | null >>

    /**
     * Find the first Sala that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindFirstArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends salaFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, salaFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'sala'> extends True ? CheckSelect<T, Prisma__salaClient<sala>, Prisma__salaClient<salaGetPayload<T>>> : CheckSelect<T, Prisma__salaClient<sala | null >, Prisma__salaClient<salaGetPayload<T> | null >>

    /**
     * Find zero or more Salas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Salas
     * const salas = await prisma.sala.findMany()
     * 
     * // Get first 10 Salas
     * const salas = await prisma.sala.findMany({ take: 10 })
     * 
     * // Only select the `piso`
     * const salaWithPisoOnly = await prisma.sala.findMany({ select: { piso: true } })
     * 
    **/
    findMany<T extends salaFindManyArgs>(
      args?: SelectSubset<T, salaFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<sala>>, PrismaPromise<Array<salaGetPayload<T>>>>

    /**
     * Create a Sala.
     * @param {salaCreateArgs} args - Arguments to create a Sala.
     * @example
     * // Create one Sala
     * const Sala = await prisma.sala.create({
     *   data: {
     *     // ... data to create a Sala
     *   }
     * })
     * 
    **/
    create<T extends salaCreateArgs>(
      args: SelectSubset<T, salaCreateArgs>
    ): CheckSelect<T, Prisma__salaClient<sala>, Prisma__salaClient<salaGetPayload<T>>>

    /**
     * Create many Salas.
     *     @param {salaCreateManyArgs} args - Arguments to create many Salas.
     *     @example
     *     // Create many Salas
     *     const sala = await prisma.sala.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends salaCreateManyArgs>(
      args?: SelectSubset<T, salaCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Sala.
     * @param {salaDeleteArgs} args - Arguments to delete one Sala.
     * @example
     * // Delete one Sala
     * const Sala = await prisma.sala.delete({
     *   where: {
     *     // ... filter to delete one Sala
     *   }
     * })
     * 
    **/
    delete<T extends salaDeleteArgs>(
      args: SelectSubset<T, salaDeleteArgs>
    ): CheckSelect<T, Prisma__salaClient<sala>, Prisma__salaClient<salaGetPayload<T>>>

    /**
     * Update one Sala.
     * @param {salaUpdateArgs} args - Arguments to update one Sala.
     * @example
     * // Update one Sala
     * const sala = await prisma.sala.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends salaUpdateArgs>(
      args: SelectSubset<T, salaUpdateArgs>
    ): CheckSelect<T, Prisma__salaClient<sala>, Prisma__salaClient<salaGetPayload<T>>>

    /**
     * Delete zero or more Salas.
     * @param {salaDeleteManyArgs} args - Arguments to filter Salas to delete.
     * @example
     * // Delete a few Salas
     * const { count } = await prisma.sala.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends salaDeleteManyArgs>(
      args?: SelectSubset<T, salaDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Salas
     * const sala = await prisma.sala.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends salaUpdateManyArgs>(
      args: SelectSubset<T, salaUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Sala.
     * @param {salaUpsertArgs} args - Arguments to update or create a Sala.
     * @example
     * // Update or create a Sala
     * const sala = await prisma.sala.upsert({
     *   create: {
     *     // ... data to create a Sala
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Sala we want to update
     *   }
     * })
    **/
    upsert<T extends salaUpsertArgs>(
      args: SelectSubset<T, salaUpsertArgs>
    ): CheckSelect<T, Prisma__salaClient<sala>, Prisma__salaClient<salaGetPayload<T>>>

    /**
     * Find one Sala that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {salaFindUniqueOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends salaFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, salaFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__salaClient<sala>, Prisma__salaClient<salaGetPayload<T>>>

    /**
     * Find the first Sala that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaFindFirstOrThrowArgs} args - Arguments to find a Sala
     * @example
     * // Get one Sala
     * const sala = await prisma.sala.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends salaFindFirstOrThrowArgs>(
      args?: SelectSubset<T, salaFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__salaClient<sala>, Prisma__salaClient<salaGetPayload<T>>>

    /**
     * Count the number of Salas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {salaCountArgs} args - Arguments to filter Salas to count.
     * @example
     * // Count the number of Salas
     * const count = await prisma.sala.count({
     *   where: {
     *     // ... the filter for the Salas we want to count
     *   }
     * })
    **/
    count<T extends salaCountArgs>(
      args?: Subset<T, salaCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SalaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SalaAggregateArgs>(args: Subset<T, SalaAggregateArgs>): PrismaPromise<GetSalaAggregateType<T>>

    /**
     * Group by Sala.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SalaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SalaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SalaGroupByArgs['orderBy'] }
        : { orderBy?: SalaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SalaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSalaGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for sala.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__salaClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    edificio<T extends edificioArgs = {}>(args?: Subset<T, edificioArgs>): CheckSelect<T, Prisma__edificioClient<edificio | null >, Prisma__edificioClient<edificioGetPayload<T> | null >>;

    reuniao<T extends reuniaoFindManyArgs = {}>(args?: Subset<T, reuniaoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<reuniao>>, PrismaPromise<Array<reuniaoGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * sala base type for findUnique actions
   */
  export type salaFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the sala
     * 
    **/
    select?: salaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salaInclude | null
    /**
     * Filter, which sala to fetch.
     * 
    **/
    where: salaWhereUniqueInput
  }

  /**
   * sala: findUnique
   */
  export interface salaFindUniqueArgs extends salaFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sala base type for findFirst actions
   */
  export type salaFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the sala
     * 
    **/
    select?: salaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salaInclude | null
    /**
     * Filter, which sala to fetch.
     * 
    **/
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     * 
    **/
    orderBy?: Enumerable<salaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for salas.
     * 
    **/
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of salas.
     * 
    **/
    distinct?: Enumerable<SalaScalarFieldEnum>
  }

  /**
   * sala: findFirst
   */
  export interface salaFindFirstArgs extends salaFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * sala findMany
   */
  export type salaFindManyArgs = {
    /**
     * Select specific fields to fetch from the sala
     * 
    **/
    select?: salaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salaInclude | null
    /**
     * Filter, which salas to fetch.
     * 
    **/
    where?: salaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of salas to fetch.
     * 
    **/
    orderBy?: Enumerable<salaOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing salas.
     * 
    **/
    cursor?: salaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` salas from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` salas.
     * 
    **/
    skip?: number
    distinct?: Enumerable<SalaScalarFieldEnum>
  }


  /**
   * sala create
   */
  export type salaCreateArgs = {
    /**
     * Select specific fields to fetch from the sala
     * 
    **/
    select?: salaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salaInclude | null
    /**
     * The data needed to create a sala.
     * 
    **/
    data: XOR<salaCreateInput, salaUncheckedCreateInput>
  }


  /**
   * sala createMany
   */
  export type salaCreateManyArgs = {
    /**
     * The data used to create many salas.
     * 
    **/
    data: Enumerable<salaCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * sala update
   */
  export type salaUpdateArgs = {
    /**
     * Select specific fields to fetch from the sala
     * 
    **/
    select?: salaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salaInclude | null
    /**
     * The data needed to update a sala.
     * 
    **/
    data: XOR<salaUpdateInput, salaUncheckedUpdateInput>
    /**
     * Choose, which sala to update.
     * 
    **/
    where: salaWhereUniqueInput
  }


  /**
   * sala updateMany
   */
  export type salaUpdateManyArgs = {
    /**
     * The data used to update salas.
     * 
    **/
    data: XOR<salaUpdateManyMutationInput, salaUncheckedUpdateManyInput>
    /**
     * Filter which salas to update
     * 
    **/
    where?: salaWhereInput
  }


  /**
   * sala upsert
   */
  export type salaUpsertArgs = {
    /**
     * Select specific fields to fetch from the sala
     * 
    **/
    select?: salaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salaInclude | null
    /**
     * The filter to search for the sala to update in case it exists.
     * 
    **/
    where: salaWhereUniqueInput
    /**
     * In case the sala found by the `where` argument doesn't exist, create a new sala with this data.
     * 
    **/
    create: XOR<salaCreateInput, salaUncheckedCreateInput>
    /**
     * In case the sala was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<salaUpdateInput, salaUncheckedUpdateInput>
  }


  /**
   * sala delete
   */
  export type salaDeleteArgs = {
    /**
     * Select specific fields to fetch from the sala
     * 
    **/
    select?: salaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salaInclude | null
    /**
     * Filter which sala to delete.
     * 
    **/
    where: salaWhereUniqueInput
  }


  /**
   * sala deleteMany
   */
  export type salaDeleteManyArgs = {
    /**
     * Filter which salas to delete
     * 
    **/
    where?: salaWhereInput
  }


  /**
   * sala: findUniqueOrThrow
   */
  export type salaFindUniqueOrThrowArgs = salaFindUniqueArgsBase
      

  /**
   * sala: findFirstOrThrow
   */
  export type salaFindFirstOrThrowArgs = salaFindFirstArgsBase
      

  /**
   * sala without action
   */
  export type salaArgs = {
    /**
     * Select specific fields to fetch from the sala
     * 
    **/
    select?: salaSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: salaInclude | null
  }



  /**
   * Model usuario
   */


  export type AggregateUsuario = {
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  export type UsuarioAvgAggregateOutputType = {
    pk_usuario: number | null
    fk_funcao: number | null
  }

  export type UsuarioSumAggregateOutputType = {
    pk_usuario: number | null
    fk_funcao: number | null
  }

  export type UsuarioMinAggregateOutputType = {
    email: string | null
    name: string | null
    password: string | null
    perfil: Perfil | null
    pk_usuario: number | null
    fk_funcao: number | null
  }

  export type UsuarioMaxAggregateOutputType = {
    email: string | null
    name: string | null
    password: string | null
    perfil: Perfil | null
    pk_usuario: number | null
    fk_funcao: number | null
  }

  export type UsuarioCountAggregateOutputType = {
    email: number
    name: number
    password: number
    perfil: number
    pk_usuario: number
    fk_funcao: number
    _all: number
  }


  export type UsuarioAvgAggregateInputType = {
    pk_usuario?: true
    fk_funcao?: true
  }

  export type UsuarioSumAggregateInputType = {
    pk_usuario?: true
    fk_funcao?: true
  }

  export type UsuarioMinAggregateInputType = {
    email?: true
    name?: true
    password?: true
    perfil?: true
    pk_usuario?: true
    fk_funcao?: true
  }

  export type UsuarioMaxAggregateInputType = {
    email?: true
    name?: true
    password?: true
    perfil?: true
    pk_usuario?: true
    fk_funcao?: true
  }

  export type UsuarioCountAggregateInputType = {
    email?: true
    name?: true
    password?: true
    perfil?: true
    pk_usuario?: true
    fk_funcao?: true
    _all?: true
  }

  export type UsuarioAggregateArgs = {
    /**
     * Filter which usuario to aggregate.
     * 
    **/
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuarioCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuarioAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuarioSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuarioMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuarioMaxAggregateInputType
  }

  export type GetUsuarioAggregateType<T extends UsuarioAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuario]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuario[P]>
      : GetScalarType<T[P], AggregateUsuario[P]>
  }




  export type UsuarioGroupByArgs = {
    where?: usuarioWhereInput
    orderBy?: Enumerable<usuarioOrderByWithAggregationInput>
    by: Array<UsuarioScalarFieldEnum>
    having?: usuarioScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuarioCountAggregateInputType | true
    _avg?: UsuarioAvgAggregateInputType
    _sum?: UsuarioSumAggregateInputType
    _min?: UsuarioMinAggregateInputType
    _max?: UsuarioMaxAggregateInputType
  }


  export type UsuarioGroupByOutputType = {
    email: string
    name: string
    password: string
    perfil: Perfil
    pk_usuario: number
    fk_funcao: number
    _count: UsuarioCountAggregateOutputType | null
    _avg: UsuarioAvgAggregateOutputType | null
    _sum: UsuarioSumAggregateOutputType | null
    _min: UsuarioMinAggregateOutputType | null
    _max: UsuarioMaxAggregateOutputType | null
  }

  type GetUsuarioGroupByPayload<T extends UsuarioGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UsuarioGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuarioGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
            : GetScalarType<T[P], UsuarioGroupByOutputType[P]>
        }
      >
    >


  export type usuarioSelect = {
    email?: boolean
    name?: boolean
    password?: boolean
    perfil?: boolean
    pk_usuario?: boolean
    fk_funcao?: boolean
    funcao?: boolean | funcaoArgs
    contacto?: boolean | contactoFindManyArgs
    participante?: boolean | participanteFindManyArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type usuarioInclude = {
    funcao?: boolean | funcaoArgs
    contacto?: boolean | contactoFindManyArgs
    participante?: boolean | participanteFindManyArgs
    _count?: boolean | UsuarioCountOutputTypeArgs
  }

  export type usuarioGetPayload<
    S extends boolean | null | undefined | usuarioArgs,
    U = keyof S
      > = S extends true
        ? usuario
    : S extends undefined
    ? never
    : S extends usuarioArgs | usuarioFindManyArgs
    ?'include' extends U
    ? usuario  & {
    [P in TrueKeys<S['include']>]:
        P extends 'funcao' ? funcaoGetPayload<S['include'][P]> :
        P extends 'contacto' ? Array < contactoGetPayload<S['include'][P]>>  :
        P extends 'participante' ? Array < participanteGetPayload<S['include'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'funcao' ? funcaoGetPayload<S['select'][P]> :
        P extends 'contacto' ? Array < contactoGetPayload<S['select'][P]>>  :
        P extends 'participante' ? Array < participanteGetPayload<S['select'][P]>>  :
        P extends '_count' ? UsuarioCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof usuario ? usuario[P] : never
  } 
    : usuario
  : usuario


  type usuarioCountArgs = Merge<
    Omit<usuarioFindManyArgs, 'select' | 'include'> & {
      select?: UsuarioCountAggregateInputType | true
    }
  >

  export interface usuarioDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Usuario that matches the filter.
     * @param {usuarioFindUniqueArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usuarioFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, usuarioFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'usuario'> extends True ? CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>> : CheckSelect<T, Prisma__usuarioClient<usuario | null >, Prisma__usuarioClient<usuarioGetPayload<T> | null >>

    /**
     * Find the first Usuario that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usuarioFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, usuarioFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'usuario'> extends True ? CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>> : CheckSelect<T, Prisma__usuarioClient<usuario | null >, Prisma__usuarioClient<usuarioGetPayload<T> | null >>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuario.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuario.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const usuarioWithEmailOnly = await prisma.usuario.findMany({ select: { email: true } })
     * 
    **/
    findMany<T extends usuarioFindManyArgs>(
      args?: SelectSubset<T, usuarioFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<usuario>>, PrismaPromise<Array<usuarioGetPayload<T>>>>

    /**
     * Create a Usuario.
     * @param {usuarioCreateArgs} args - Arguments to create a Usuario.
     * @example
     * // Create one Usuario
     * const Usuario = await prisma.usuario.create({
     *   data: {
     *     // ... data to create a Usuario
     *   }
     * })
     * 
    **/
    create<T extends usuarioCreateArgs>(
      args: SelectSubset<T, usuarioCreateArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Create many Usuarios.
     *     @param {usuarioCreateManyArgs} args - Arguments to create many Usuarios.
     *     @example
     *     // Create many Usuarios
     *     const usuario = await prisma.usuario.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usuarioCreateManyArgs>(
      args?: SelectSubset<T, usuarioCreateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Delete a Usuario.
     * @param {usuarioDeleteArgs} args - Arguments to delete one Usuario.
     * @example
     * // Delete one Usuario
     * const Usuario = await prisma.usuario.delete({
     *   where: {
     *     // ... filter to delete one Usuario
     *   }
     * })
     * 
    **/
    delete<T extends usuarioDeleteArgs>(
      args: SelectSubset<T, usuarioDeleteArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Update one Usuario.
     * @param {usuarioUpdateArgs} args - Arguments to update one Usuario.
     * @example
     * // Update one Usuario
     * const usuario = await prisma.usuario.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usuarioUpdateArgs>(
      args: SelectSubset<T, usuarioUpdateArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Delete zero or more Usuarios.
     * @param {usuarioDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuario.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usuarioDeleteManyArgs>(
      args?: SelectSubset<T, usuarioDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuario = await prisma.usuario.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usuarioUpdateManyArgs>(
      args: SelectSubset<T, usuarioUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Usuario.
     * @param {usuarioUpsertArgs} args - Arguments to update or create a Usuario.
     * @example
     * // Update or create a Usuario
     * const usuario = await prisma.usuario.upsert({
     *   create: {
     *     // ... data to create a Usuario
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuario we want to update
     *   }
     * })
    **/
    upsert<T extends usuarioUpsertArgs>(
      args: SelectSubset<T, usuarioUpsertArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Find one Usuario that matches the filter or throw
     * `NotFoundError` if no matches were found.
     * @param {usuarioFindUniqueOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usuarioFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, usuarioFindUniqueOrThrowArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Find the first Usuario that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioFindFirstOrThrowArgs} args - Arguments to find a Usuario
     * @example
     * // Get one Usuario
     * const usuario = await prisma.usuario.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usuarioFindFirstOrThrowArgs>(
      args?: SelectSubset<T, usuarioFindFirstOrThrowArgs>
    ): CheckSelect<T, Prisma__usuarioClient<usuario>, Prisma__usuarioClient<usuarioGetPayload<T>>>

    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuarioCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuario.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuarioCountArgs>(
      args?: Subset<T, usuarioCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuarioCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuarioAggregateArgs>(args: Subset<T, UsuarioAggregateArgs>): PrismaPromise<GetUsuarioAggregateType<T>>

    /**
     * Group by Usuario.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuarioGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UsuarioGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UsuarioGroupByArgs['orderBy'] }
        : { orderBy?: UsuarioGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UsuarioGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuarioGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuario.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__usuarioClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    funcao<T extends funcaoArgs = {}>(args?: Subset<T, funcaoArgs>): CheckSelect<T, Prisma__funcaoClient<funcao | null >, Prisma__funcaoClient<funcaoGetPayload<T> | null >>;

    contacto<T extends contactoFindManyArgs = {}>(args?: Subset<T, contactoFindManyArgs>): CheckSelect<T, PrismaPromise<Array<contacto>>, PrismaPromise<Array<contactoGetPayload<T>>>>;

    participante<T extends participanteFindManyArgs = {}>(args?: Subset<T, participanteFindManyArgs>): CheckSelect<T, PrismaPromise<Array<participante>>, PrismaPromise<Array<participanteGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * usuario base type for findUnique actions
   */
  export type usuarioFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * Filter, which usuario to fetch.
     * 
    **/
    where: usuarioWhereUniqueInput
  }

  /**
   * usuario: findUnique
   */
  export interface usuarioFindUniqueArgs extends usuarioFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usuario base type for findFirst actions
   */
  export type usuarioFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * Filter, which usuario to fetch.
     * 
    **/
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     * 
    **/
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     * 
    **/
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }

  /**
   * usuario: findFirst
   */
  export interface usuarioFindFirstArgs extends usuarioFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * usuario findMany
   */
  export type usuarioFindManyArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * Filter, which usuarios to fetch.
     * 
    **/
    where?: usuarioWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     * 
    **/
    orderBy?: Enumerable<usuarioOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     * 
    **/
    cursor?: usuarioWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UsuarioScalarFieldEnum>
  }


  /**
   * usuario create
   */
  export type usuarioCreateArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * The data needed to create a usuario.
     * 
    **/
    data: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
  }


  /**
   * usuario createMany
   */
  export type usuarioCreateManyArgs = {
    /**
     * The data used to create many usuarios.
     * 
    **/
    data: Enumerable<usuarioCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * usuario update
   */
  export type usuarioUpdateArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * The data needed to update a usuario.
     * 
    **/
    data: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
    /**
     * Choose, which usuario to update.
     * 
    **/
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario updateMany
   */
  export type usuarioUpdateManyArgs = {
    /**
     * The data used to update usuarios.
     * 
    **/
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     * 
    **/
    where?: usuarioWhereInput
  }


  /**
   * usuario upsert
   */
  export type usuarioUpsertArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * The filter to search for the usuario to update in case it exists.
     * 
    **/
    where: usuarioWhereUniqueInput
    /**
     * In case the usuario found by the `where` argument doesn't exist, create a new usuario with this data.
     * 
    **/
    create: XOR<usuarioCreateInput, usuarioUncheckedCreateInput>
    /**
     * In case the usuario was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<usuarioUpdateInput, usuarioUncheckedUpdateInput>
  }


  /**
   * usuario delete
   */
  export type usuarioDeleteArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
    /**
     * Filter which usuario to delete.
     * 
    **/
    where: usuarioWhereUniqueInput
  }


  /**
   * usuario deleteMany
   */
  export type usuarioDeleteManyArgs = {
    /**
     * Filter which usuarios to delete
     * 
    **/
    where?: usuarioWhereInput
  }


  /**
   * usuario: findUniqueOrThrow
   */
  export type usuarioFindUniqueOrThrowArgs = usuarioFindUniqueArgsBase
      

  /**
   * usuario: findFirstOrThrow
   */
  export type usuarioFindFirstOrThrowArgs = usuarioFindFirstArgsBase
      

  /**
   * usuario without action
   */
  export type usuarioArgs = {
    /**
     * Select specific fields to fetch from the usuario
     * 
    **/
    select?: usuarioSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: usuarioInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const ContactoScalarFieldEnum: {
    numero: 'numero',
    fk_usuario: 'fk_usuario'
  };

  export type ContactoScalarFieldEnum = (typeof ContactoScalarFieldEnum)[keyof typeof ContactoScalarFieldEnum]


  export const DepartamentoScalarFieldEnum: {
    nome: 'nome',
    pk_departamento: 'pk_departamento'
  };

  export type DepartamentoScalarFieldEnum = (typeof DepartamentoScalarFieldEnum)[keyof typeof DepartamentoScalarFieldEnum]


  export const EdificioScalarFieldEnum: {
    nome: 'nome',
    pk_edificio: 'pk_edificio'
  };

  export type EdificioScalarFieldEnum = (typeof EdificioScalarFieldEnum)[keyof typeof EdificioScalarFieldEnum]


  export const FuncaoScalarFieldEnum: {
    nome: 'nome',
    pk_funcao: 'pk_funcao',
    fk_departamento: 'fk_departamento'
  };

  export type FuncaoScalarFieldEnum = (typeof FuncaoScalarFieldEnum)[keyof typeof FuncaoScalarFieldEnum]


  export const ParticipanteScalarFieldEnum: {
    fk_usuario: 'fk_usuario',
    fk_reuniao: 'fk_reuniao'
  };

  export type ParticipanteScalarFieldEnum = (typeof ParticipanteScalarFieldEnum)[keyof typeof ParticipanteScalarFieldEnum]


  export const Prioridade_reuniaoScalarFieldEnum: {
    descricao: 'descricao',
    pk_prioridade: 'pk_prioridade'
  };

  export type Prioridade_reuniaoScalarFieldEnum = (typeof Prioridade_reuniaoScalarFieldEnum)[keyof typeof Prioridade_reuniaoScalarFieldEnum]


  export const ReuniaoScalarFieldEnum: {
    title: 'title',
    duracao: 'duracao',
    date_realizacao: 'date_realizacao',
    tempo_inicio: 'tempo_inicio',
    tempo_final: 'tempo_final',
    estado_reuniao: 'estado_reuniao',
    pk_reuniao: 'pk_reuniao',
    fk_prioridade: 'fk_prioridade',
    fk_sala: 'fk_sala'
  };

  export type ReuniaoScalarFieldEnum = (typeof ReuniaoScalarFieldEnum)[keyof typeof ReuniaoScalarFieldEnum]


  export const SalaScalarFieldEnum: {
    piso: 'piso',
    nome: 'nome',
    pk_sala: 'pk_sala',
    fk_edificio: 'fk_edificio'
  };

  export type SalaScalarFieldEnum = (typeof SalaScalarFieldEnum)[keyof typeof SalaScalarFieldEnum]


  export const UsuarioScalarFieldEnum: {
    email: 'email',
    name: 'name',
    password: 'password',
    perfil: 'perfil',
    pk_usuario: 'pk_usuario',
    fk_funcao: 'fk_funcao'
  };

  export type UsuarioScalarFieldEnum = (typeof UsuarioScalarFieldEnum)[keyof typeof UsuarioScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Deep Input Types
   */


  export type contactoWhereInput = {
    AND?: Enumerable<contactoWhereInput>
    OR?: Enumerable<contactoWhereInput>
    NOT?: Enumerable<contactoWhereInput>
    numero?: StringFilter | string
    fk_usuario?: IntFilter | number
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type contactoOrderByWithRelationInput = {
    numero?: SortOrder
    fk_usuario?: SortOrder
    usuario?: usuarioOrderByWithRelationInput
  }

  export type contactoWhereUniqueInput = {
    numero?: string
  }

  export type contactoOrderByWithAggregationInput = {
    numero?: SortOrder
    fk_usuario?: SortOrder
    _count?: contactoCountOrderByAggregateInput
    _avg?: contactoAvgOrderByAggregateInput
    _max?: contactoMaxOrderByAggregateInput
    _min?: contactoMinOrderByAggregateInput
    _sum?: contactoSumOrderByAggregateInput
  }

  export type contactoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<contactoScalarWhereWithAggregatesInput>
    OR?: Enumerable<contactoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<contactoScalarWhereWithAggregatesInput>
    numero?: StringWithAggregatesFilter | string
    fk_usuario?: IntWithAggregatesFilter | number
  }

  export type departamentoWhereInput = {
    AND?: Enumerable<departamentoWhereInput>
    OR?: Enumerable<departamentoWhereInput>
    NOT?: Enumerable<departamentoWhereInput>
    nome?: StringFilter | string
    pk_departamento?: IntFilter | number
    funcao?: FuncaoListRelationFilter
  }

  export type departamentoOrderByWithRelationInput = {
    nome?: SortOrder
    pk_departamento?: SortOrder
    funcao?: funcaoOrderByRelationAggregateInput
  }

  export type departamentoWhereUniqueInput = {
    nome?: string
    pk_departamento?: number
  }

  export type departamentoOrderByWithAggregationInput = {
    nome?: SortOrder
    pk_departamento?: SortOrder
    _count?: departamentoCountOrderByAggregateInput
    _avg?: departamentoAvgOrderByAggregateInput
    _max?: departamentoMaxOrderByAggregateInput
    _min?: departamentoMinOrderByAggregateInput
    _sum?: departamentoSumOrderByAggregateInput
  }

  export type departamentoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<departamentoScalarWhereWithAggregatesInput>
    OR?: Enumerable<departamentoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<departamentoScalarWhereWithAggregatesInput>
    nome?: StringWithAggregatesFilter | string
    pk_departamento?: IntWithAggregatesFilter | number
  }

  export type edificioWhereInput = {
    AND?: Enumerable<edificioWhereInput>
    OR?: Enumerable<edificioWhereInput>
    NOT?: Enumerable<edificioWhereInput>
    nome?: StringFilter | string
    pk_edificio?: IntFilter | number
    sala?: SalaListRelationFilter
  }

  export type edificioOrderByWithRelationInput = {
    nome?: SortOrder
    pk_edificio?: SortOrder
    sala?: salaOrderByRelationAggregateInput
  }

  export type edificioWhereUniqueInput = {
    pk_edificio?: number
  }

  export type edificioOrderByWithAggregationInput = {
    nome?: SortOrder
    pk_edificio?: SortOrder
    _count?: edificioCountOrderByAggregateInput
    _avg?: edificioAvgOrderByAggregateInput
    _max?: edificioMaxOrderByAggregateInput
    _min?: edificioMinOrderByAggregateInput
    _sum?: edificioSumOrderByAggregateInput
  }

  export type edificioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<edificioScalarWhereWithAggregatesInput>
    OR?: Enumerable<edificioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<edificioScalarWhereWithAggregatesInput>
    nome?: StringWithAggregatesFilter | string
    pk_edificio?: IntWithAggregatesFilter | number
  }

  export type funcaoWhereInput = {
    AND?: Enumerable<funcaoWhereInput>
    OR?: Enumerable<funcaoWhereInput>
    NOT?: Enumerable<funcaoWhereInput>
    nome?: StringFilter | string
    pk_funcao?: IntFilter | number
    fk_departamento?: IntFilter | number
    departamento?: XOR<DepartamentoRelationFilter, departamentoWhereInput>
    usuario?: UsuarioListRelationFilter
  }

  export type funcaoOrderByWithRelationInput = {
    nome?: SortOrder
    pk_funcao?: SortOrder
    fk_departamento?: SortOrder
    departamento?: departamentoOrderByWithRelationInput
    usuario?: usuarioOrderByRelationAggregateInput
  }

  export type funcaoWhereUniqueInput = {
    nome?: string
    pk_funcao?: number
  }

  export type funcaoOrderByWithAggregationInput = {
    nome?: SortOrder
    pk_funcao?: SortOrder
    fk_departamento?: SortOrder
    _count?: funcaoCountOrderByAggregateInput
    _avg?: funcaoAvgOrderByAggregateInput
    _max?: funcaoMaxOrderByAggregateInput
    _min?: funcaoMinOrderByAggregateInput
    _sum?: funcaoSumOrderByAggregateInput
  }

  export type funcaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<funcaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<funcaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<funcaoScalarWhereWithAggregatesInput>
    nome?: StringWithAggregatesFilter | string
    pk_funcao?: IntWithAggregatesFilter | number
    fk_departamento?: IntWithAggregatesFilter | number
  }

  export type participanteWhereInput = {
    AND?: Enumerable<participanteWhereInput>
    OR?: Enumerable<participanteWhereInput>
    NOT?: Enumerable<participanteWhereInput>
    fk_usuario?: IntFilter | number
    fk_reuniao?: IntFilter | number
    reuniao?: XOR<ReuniaoRelationFilter, reuniaoWhereInput>
    usuario?: XOR<UsuarioRelationFilter, usuarioWhereInput>
  }

  export type participanteOrderByWithRelationInput = {
    fk_usuario?: SortOrder
    fk_reuniao?: SortOrder
    reuniao?: reuniaoOrderByWithRelationInput
    usuario?: usuarioOrderByWithRelationInput
  }

  export type participanteWhereUniqueInput = {
    fk_usuario_fk_reuniao?: participanteFk_usuarioFk_reuniaoCompoundUniqueInput
  }

  export type participanteOrderByWithAggregationInput = {
    fk_usuario?: SortOrder
    fk_reuniao?: SortOrder
    _count?: participanteCountOrderByAggregateInput
    _avg?: participanteAvgOrderByAggregateInput
    _max?: participanteMaxOrderByAggregateInput
    _min?: participanteMinOrderByAggregateInput
    _sum?: participanteSumOrderByAggregateInput
  }

  export type participanteScalarWhereWithAggregatesInput = {
    AND?: Enumerable<participanteScalarWhereWithAggregatesInput>
    OR?: Enumerable<participanteScalarWhereWithAggregatesInput>
    NOT?: Enumerable<participanteScalarWhereWithAggregatesInput>
    fk_usuario?: IntWithAggregatesFilter | number
    fk_reuniao?: IntWithAggregatesFilter | number
  }

  export type prioridade_reuniaoWhereInput = {
    AND?: Enumerable<prioridade_reuniaoWhereInput>
    OR?: Enumerable<prioridade_reuniaoWhereInput>
    NOT?: Enumerable<prioridade_reuniaoWhereInput>
    descricao?: StringFilter | string
    pk_prioridade?: IntFilter | number
    reuniao?: ReuniaoListRelationFilter
  }

  export type prioridade_reuniaoOrderByWithRelationInput = {
    descricao?: SortOrder
    pk_prioridade?: SortOrder
    reuniao?: reuniaoOrderByRelationAggregateInput
  }

  export type prioridade_reuniaoWhereUniqueInput = {
    descricao?: string
    pk_prioridade?: number
  }

  export type prioridade_reuniaoOrderByWithAggregationInput = {
    descricao?: SortOrder
    pk_prioridade?: SortOrder
    _count?: prioridade_reuniaoCountOrderByAggregateInput
    _avg?: prioridade_reuniaoAvgOrderByAggregateInput
    _max?: prioridade_reuniaoMaxOrderByAggregateInput
    _min?: prioridade_reuniaoMinOrderByAggregateInput
    _sum?: prioridade_reuniaoSumOrderByAggregateInput
  }

  export type prioridade_reuniaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<prioridade_reuniaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<prioridade_reuniaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<prioridade_reuniaoScalarWhereWithAggregatesInput>
    descricao?: StringWithAggregatesFilter | string
    pk_prioridade?: IntWithAggregatesFilter | number
  }

  export type reuniaoWhereInput = {
    AND?: Enumerable<reuniaoWhereInput>
    OR?: Enumerable<reuniaoWhereInput>
    NOT?: Enumerable<reuniaoWhereInput>
    title?: StringFilter | string
    duracao?: StringFilter | string
    date_realizacao?: DateTimeFilter | Date | string
    tempo_inicio?: DateTimeFilter | Date | string
    tempo_final?: DateTimeFilter | Date | string
    estado_reuniao?: Enumestado_reuniaoFilter | estado_reuniao
    pk_reuniao?: IntFilter | number
    fk_prioridade?: IntFilter | number
    fk_sala?: IntFilter | number
    sala?: XOR<SalaRelationFilter, salaWhereInput>
    prioridade_reuniao?: XOR<Prioridade_reuniaoRelationFilter, prioridade_reuniaoWhereInput>
    participante?: ParticipanteListRelationFilter
  }

  export type reuniaoOrderByWithRelationInput = {
    title?: SortOrder
    duracao?: SortOrder
    date_realizacao?: SortOrder
    tempo_inicio?: SortOrder
    tempo_final?: SortOrder
    estado_reuniao?: SortOrder
    pk_reuniao?: SortOrder
    fk_prioridade?: SortOrder
    fk_sala?: SortOrder
    sala?: salaOrderByWithRelationInput
    prioridade_reuniao?: prioridade_reuniaoOrderByWithRelationInput
    participante?: participanteOrderByRelationAggregateInput
  }

  export type reuniaoWhereUniqueInput = {
    title?: string
    pk_reuniao?: number
  }

  export type reuniaoOrderByWithAggregationInput = {
    title?: SortOrder
    duracao?: SortOrder
    date_realizacao?: SortOrder
    tempo_inicio?: SortOrder
    tempo_final?: SortOrder
    estado_reuniao?: SortOrder
    pk_reuniao?: SortOrder
    fk_prioridade?: SortOrder
    fk_sala?: SortOrder
    _count?: reuniaoCountOrderByAggregateInput
    _avg?: reuniaoAvgOrderByAggregateInput
    _max?: reuniaoMaxOrderByAggregateInput
    _min?: reuniaoMinOrderByAggregateInput
    _sum?: reuniaoSumOrderByAggregateInput
  }

  export type reuniaoScalarWhereWithAggregatesInput = {
    AND?: Enumerable<reuniaoScalarWhereWithAggregatesInput>
    OR?: Enumerable<reuniaoScalarWhereWithAggregatesInput>
    NOT?: Enumerable<reuniaoScalarWhereWithAggregatesInput>
    title?: StringWithAggregatesFilter | string
    duracao?: StringWithAggregatesFilter | string
    date_realizacao?: DateTimeWithAggregatesFilter | Date | string
    tempo_inicio?: DateTimeWithAggregatesFilter | Date | string
    tempo_final?: DateTimeWithAggregatesFilter | Date | string
    estado_reuniao?: Enumestado_reuniaoWithAggregatesFilter | estado_reuniao
    pk_reuniao?: IntWithAggregatesFilter | number
    fk_prioridade?: IntWithAggregatesFilter | number
    fk_sala?: IntWithAggregatesFilter | number
  }

  export type salaWhereInput = {
    AND?: Enumerable<salaWhereInput>
    OR?: Enumerable<salaWhereInput>
    NOT?: Enumerable<salaWhereInput>
    piso?: StringFilter | string
    nome?: StringFilter | string
    pk_sala?: IntFilter | number
    fk_edificio?: IntFilter | number
    edificio?: XOR<EdificioRelationFilter, edificioWhereInput>
    reuniao?: ReuniaoListRelationFilter
  }

  export type salaOrderByWithRelationInput = {
    piso?: SortOrder
    nome?: SortOrder
    pk_sala?: SortOrder
    fk_edificio?: SortOrder
    edificio?: edificioOrderByWithRelationInput
    reuniao?: reuniaoOrderByRelationAggregateInput
  }

  export type salaWhereUniqueInput = {
    nome?: string
    pk_sala?: number
  }

  export type salaOrderByWithAggregationInput = {
    piso?: SortOrder
    nome?: SortOrder
    pk_sala?: SortOrder
    fk_edificio?: SortOrder
    _count?: salaCountOrderByAggregateInput
    _avg?: salaAvgOrderByAggregateInput
    _max?: salaMaxOrderByAggregateInput
    _min?: salaMinOrderByAggregateInput
    _sum?: salaSumOrderByAggregateInput
  }

  export type salaScalarWhereWithAggregatesInput = {
    AND?: Enumerable<salaScalarWhereWithAggregatesInput>
    OR?: Enumerable<salaScalarWhereWithAggregatesInput>
    NOT?: Enumerable<salaScalarWhereWithAggregatesInput>
    piso?: StringWithAggregatesFilter | string
    nome?: StringWithAggregatesFilter | string
    pk_sala?: IntWithAggregatesFilter | number
    fk_edificio?: IntWithAggregatesFilter | number
  }

  export type usuarioWhereInput = {
    AND?: Enumerable<usuarioWhereInput>
    OR?: Enumerable<usuarioWhereInput>
    NOT?: Enumerable<usuarioWhereInput>
    email?: StringFilter | string
    name?: StringFilter | string
    password?: StringFilter | string
    perfil?: EnumPerfilFilter | Perfil
    pk_usuario?: IntFilter | number
    fk_funcao?: IntFilter | number
    funcao?: XOR<FuncaoRelationFilter, funcaoWhereInput>
    contacto?: ContactoListRelationFilter
    participante?: ParticipanteListRelationFilter
  }

  export type usuarioOrderByWithRelationInput = {
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    perfil?: SortOrder
    pk_usuario?: SortOrder
    fk_funcao?: SortOrder
    funcao?: funcaoOrderByWithRelationInput
    contacto?: contactoOrderByRelationAggregateInput
    participante?: participanteOrderByRelationAggregateInput
  }

  export type usuarioWhereUniqueInput = {
    email?: string
    pk_usuario?: number
  }

  export type usuarioOrderByWithAggregationInput = {
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    perfil?: SortOrder
    pk_usuario?: SortOrder
    fk_funcao?: SortOrder
    _count?: usuarioCountOrderByAggregateInput
    _avg?: usuarioAvgOrderByAggregateInput
    _max?: usuarioMaxOrderByAggregateInput
    _min?: usuarioMinOrderByAggregateInput
    _sum?: usuarioSumOrderByAggregateInput
  }

  export type usuarioScalarWhereWithAggregatesInput = {
    AND?: Enumerable<usuarioScalarWhereWithAggregatesInput>
    OR?: Enumerable<usuarioScalarWhereWithAggregatesInput>
    NOT?: Enumerable<usuarioScalarWhereWithAggregatesInput>
    email?: StringWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    password?: StringWithAggregatesFilter | string
    perfil?: EnumPerfilWithAggregatesFilter | Perfil
    pk_usuario?: IntWithAggregatesFilter | number
    fk_funcao?: IntWithAggregatesFilter | number
  }

  export type contactoCreateInput = {
    numero: string
    usuario: usuarioCreateNestedOneWithoutContactoInput
  }

  export type contactoUncheckedCreateInput = {
    numero: string
    fk_usuario: number
  }

  export type contactoUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateOneRequiredWithoutContactoNestedInput
  }

  export type contactoUncheckedUpdateInput = {
    numero?: StringFieldUpdateOperationsInput | string
    fk_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type contactoCreateManyInput = {
    numero: string
    fk_usuario: number
  }

  export type contactoUpdateManyMutationInput = {
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type contactoUncheckedUpdateManyInput = {
    numero?: StringFieldUpdateOperationsInput | string
    fk_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type departamentoCreateInput = {
    nome: string
    funcao?: funcaoCreateNestedManyWithoutDepartamentoInput
  }

  export type departamentoUncheckedCreateInput = {
    nome: string
    pk_departamento?: number
    funcao?: funcaoUncheckedCreateNestedManyWithoutDepartamentoInput
  }

  export type departamentoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    funcao?: funcaoUpdateManyWithoutDepartamentoNestedInput
  }

  export type departamentoUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_departamento?: IntFieldUpdateOperationsInput | number
    funcao?: funcaoUncheckedUpdateManyWithoutDepartamentoNestedInput
  }

  export type departamentoCreateManyInput = {
    nome: string
    pk_departamento?: number
  }

  export type departamentoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type departamentoUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_departamento?: IntFieldUpdateOperationsInput | number
  }

  export type edificioCreateInput = {
    nome: string
    sala?: salaCreateNestedManyWithoutEdificioInput
  }

  export type edificioUncheckedCreateInput = {
    nome: string
    pk_edificio?: number
    sala?: salaUncheckedCreateNestedManyWithoutEdificioInput
  }

  export type edificioUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    sala?: salaUpdateManyWithoutEdificioNestedInput
  }

  export type edificioUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_edificio?: IntFieldUpdateOperationsInput | number
    sala?: salaUncheckedUpdateManyWithoutEdificioNestedInput
  }

  export type edificioCreateManyInput = {
    nome: string
    pk_edificio?: number
  }

  export type edificioUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type edificioUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_edificio?: IntFieldUpdateOperationsInput | number
  }

  export type funcaoCreateInput = {
    nome: string
    departamento: departamentoCreateNestedOneWithoutFuncaoInput
    usuario?: usuarioCreateNestedManyWithoutFuncaoInput
  }

  export type funcaoUncheckedCreateInput = {
    nome: string
    pk_funcao?: number
    fk_departamento: number
    usuario?: usuarioUncheckedCreateNestedManyWithoutFuncaoInput
  }

  export type funcaoUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    departamento?: departamentoUpdateOneRequiredWithoutFuncaoNestedInput
    usuario?: usuarioUpdateManyWithoutFuncaoNestedInput
  }

  export type funcaoUncheckedUpdateInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_funcao?: IntFieldUpdateOperationsInput | number
    fk_departamento?: IntFieldUpdateOperationsInput | number
    usuario?: usuarioUncheckedUpdateManyWithoutFuncaoNestedInput
  }

  export type funcaoCreateManyInput = {
    nome: string
    pk_funcao?: number
    fk_departamento: number
  }

  export type funcaoUpdateManyMutationInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type funcaoUncheckedUpdateManyInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_funcao?: IntFieldUpdateOperationsInput | number
    fk_departamento?: IntFieldUpdateOperationsInput | number
  }

  export type participanteCreateInput = {
    reuniao: reuniaoCreateNestedOneWithoutParticipanteInput
    usuario: usuarioCreateNestedOneWithoutParticipanteInput
  }

  export type participanteUncheckedCreateInput = {
    fk_usuario: number
    fk_reuniao: number
  }

  export type participanteUpdateInput = {
    reuniao?: reuniaoUpdateOneRequiredWithoutParticipanteNestedInput
    usuario?: usuarioUpdateOneRequiredWithoutParticipanteNestedInput
  }

  export type participanteUncheckedUpdateInput = {
    fk_usuario?: IntFieldUpdateOperationsInput | number
    fk_reuniao?: IntFieldUpdateOperationsInput | number
  }

  export type participanteCreateManyInput = {
    fk_usuario: number
    fk_reuniao: number
  }

  export type participanteUpdateManyMutationInput = {

  }

  export type participanteUncheckedUpdateManyInput = {
    fk_usuario?: IntFieldUpdateOperationsInput | number
    fk_reuniao?: IntFieldUpdateOperationsInput | number
  }

  export type prioridade_reuniaoCreateInput = {
    descricao: string
    reuniao?: reuniaoCreateNestedManyWithoutPrioridade_reuniaoInput
  }

  export type prioridade_reuniaoUncheckedCreateInput = {
    descricao: string
    pk_prioridade?: number
    reuniao?: reuniaoUncheckedCreateNestedManyWithoutPrioridade_reuniaoInput
  }

  export type prioridade_reuniaoUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    reuniao?: reuniaoUpdateManyWithoutPrioridade_reuniaoNestedInput
  }

  export type prioridade_reuniaoUncheckedUpdateInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    pk_prioridade?: IntFieldUpdateOperationsInput | number
    reuniao?: reuniaoUncheckedUpdateManyWithoutPrioridade_reuniaoNestedInput
  }

  export type prioridade_reuniaoCreateManyInput = {
    descricao: string
    pk_prioridade?: number
  }

  export type prioridade_reuniaoUpdateManyMutationInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type prioridade_reuniaoUncheckedUpdateManyInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    pk_prioridade?: IntFieldUpdateOperationsInput | number
  }

  export type reuniaoCreateInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    sala: salaCreateNestedOneWithoutReuniaoInput
    prioridade_reuniao: prioridade_reuniaoCreateNestedOneWithoutReuniaoInput
    participante?: participanteCreateNestedManyWithoutReuniaoInput
  }

  export type reuniaoUncheckedCreateInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    pk_reuniao?: number
    fk_prioridade: number
    fk_sala: number
    participante?: participanteUncheckedCreateNestedManyWithoutReuniaoInput
  }

  export type reuniaoUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    sala?: salaUpdateOneRequiredWithoutReuniaoNestedInput
    prioridade_reuniao?: prioridade_reuniaoUpdateOneRequiredWithoutReuniaoNestedInput
    participante?: participanteUpdateManyWithoutReuniaoNestedInput
  }

  export type reuniaoUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    pk_reuniao?: IntFieldUpdateOperationsInput | number
    fk_prioridade?: IntFieldUpdateOperationsInput | number
    fk_sala?: IntFieldUpdateOperationsInput | number
    participante?: participanteUncheckedUpdateManyWithoutReuniaoNestedInput
  }

  export type reuniaoCreateManyInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    pk_reuniao?: number
    fk_prioridade: number
    fk_sala: number
  }

  export type reuniaoUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
  }

  export type reuniaoUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    pk_reuniao?: IntFieldUpdateOperationsInput | number
    fk_prioridade?: IntFieldUpdateOperationsInput | number
    fk_sala?: IntFieldUpdateOperationsInput | number
  }

  export type salaCreateInput = {
    piso: string
    nome: string
    edificio: edificioCreateNestedOneWithoutSalaInput
    reuniao?: reuniaoCreateNestedManyWithoutSalaInput
  }

  export type salaUncheckedCreateInput = {
    piso: string
    nome: string
    pk_sala?: number
    fk_edificio: number
    reuniao?: reuniaoUncheckedCreateNestedManyWithoutSalaInput
  }

  export type salaUpdateInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    edificio?: edificioUpdateOneRequiredWithoutSalaNestedInput
    reuniao?: reuniaoUpdateManyWithoutSalaNestedInput
  }

  export type salaUncheckedUpdateInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    pk_sala?: IntFieldUpdateOperationsInput | number
    fk_edificio?: IntFieldUpdateOperationsInput | number
    reuniao?: reuniaoUncheckedUpdateManyWithoutSalaNestedInput
  }

  export type salaCreateManyInput = {
    piso: string
    nome: string
    pk_sala?: number
    fk_edificio: number
  }

  export type salaUpdateManyMutationInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type salaUncheckedUpdateManyInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    pk_sala?: IntFieldUpdateOperationsInput | number
    fk_edificio?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioCreateInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    funcao: funcaoCreateNestedOneWithoutUsuarioInput
    contacto?: contactoCreateNestedManyWithoutUsuarioInput
    participante?: participanteCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    pk_usuario?: number
    fk_funcao: number
    contacto?: contactoUncheckedCreateNestedManyWithoutUsuarioInput
    participante?: participanteUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    funcao?: funcaoUpdateOneRequiredWithoutUsuarioNestedInput
    contacto?: contactoUpdateManyWithoutUsuarioNestedInput
    participante?: participanteUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    pk_usuario?: IntFieldUpdateOperationsInput | number
    fk_funcao?: IntFieldUpdateOperationsInput | number
    contacto?: contactoUncheckedUpdateManyWithoutUsuarioNestedInput
    participante?: participanteUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioCreateManyInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    pk_usuario?: number
    fk_funcao: number
  }

  export type usuarioUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
  }

  export type usuarioUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    pk_usuario?: IntFieldUpdateOperationsInput | number
    fk_funcao?: IntFieldUpdateOperationsInput | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type UsuarioRelationFilter = {
    is?: usuarioWhereInput
    isNot?: usuarioWhereInput
  }

  export type contactoCountOrderByAggregateInput = {
    numero?: SortOrder
    fk_usuario?: SortOrder
  }

  export type contactoAvgOrderByAggregateInput = {
    fk_usuario?: SortOrder
  }

  export type contactoMaxOrderByAggregateInput = {
    numero?: SortOrder
    fk_usuario?: SortOrder
  }

  export type contactoMinOrderByAggregateInput = {
    numero?: SortOrder
    fk_usuario?: SortOrder
  }

  export type contactoSumOrderByAggregateInput = {
    fk_usuario?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type FuncaoListRelationFilter = {
    every?: funcaoWhereInput
    some?: funcaoWhereInput
    none?: funcaoWhereInput
  }

  export type funcaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type departamentoCountOrderByAggregateInput = {
    nome?: SortOrder
    pk_departamento?: SortOrder
  }

  export type departamentoAvgOrderByAggregateInput = {
    pk_departamento?: SortOrder
  }

  export type departamentoMaxOrderByAggregateInput = {
    nome?: SortOrder
    pk_departamento?: SortOrder
  }

  export type departamentoMinOrderByAggregateInput = {
    nome?: SortOrder
    pk_departamento?: SortOrder
  }

  export type departamentoSumOrderByAggregateInput = {
    pk_departamento?: SortOrder
  }

  export type SalaListRelationFilter = {
    every?: salaWhereInput
    some?: salaWhereInput
    none?: salaWhereInput
  }

  export type salaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type edificioCountOrderByAggregateInput = {
    nome?: SortOrder
    pk_edificio?: SortOrder
  }

  export type edificioAvgOrderByAggregateInput = {
    pk_edificio?: SortOrder
  }

  export type edificioMaxOrderByAggregateInput = {
    nome?: SortOrder
    pk_edificio?: SortOrder
  }

  export type edificioMinOrderByAggregateInput = {
    nome?: SortOrder
    pk_edificio?: SortOrder
  }

  export type edificioSumOrderByAggregateInput = {
    pk_edificio?: SortOrder
  }

  export type DepartamentoRelationFilter = {
    is?: departamentoWhereInput
    isNot?: departamentoWhereInput
  }

  export type UsuarioListRelationFilter = {
    every?: usuarioWhereInput
    some?: usuarioWhereInput
    none?: usuarioWhereInput
  }

  export type usuarioOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type funcaoCountOrderByAggregateInput = {
    nome?: SortOrder
    pk_funcao?: SortOrder
    fk_departamento?: SortOrder
  }

  export type funcaoAvgOrderByAggregateInput = {
    pk_funcao?: SortOrder
    fk_departamento?: SortOrder
  }

  export type funcaoMaxOrderByAggregateInput = {
    nome?: SortOrder
    pk_funcao?: SortOrder
    fk_departamento?: SortOrder
  }

  export type funcaoMinOrderByAggregateInput = {
    nome?: SortOrder
    pk_funcao?: SortOrder
    fk_departamento?: SortOrder
  }

  export type funcaoSumOrderByAggregateInput = {
    pk_funcao?: SortOrder
    fk_departamento?: SortOrder
  }

  export type ReuniaoRelationFilter = {
    is?: reuniaoWhereInput
    isNot?: reuniaoWhereInput
  }

  export type participanteFk_usuarioFk_reuniaoCompoundUniqueInput = {
    fk_usuario: number
    fk_reuniao: number
  }

  export type participanteCountOrderByAggregateInput = {
    fk_usuario?: SortOrder
    fk_reuniao?: SortOrder
  }

  export type participanteAvgOrderByAggregateInput = {
    fk_usuario?: SortOrder
    fk_reuniao?: SortOrder
  }

  export type participanteMaxOrderByAggregateInput = {
    fk_usuario?: SortOrder
    fk_reuniao?: SortOrder
  }

  export type participanteMinOrderByAggregateInput = {
    fk_usuario?: SortOrder
    fk_reuniao?: SortOrder
  }

  export type participanteSumOrderByAggregateInput = {
    fk_usuario?: SortOrder
    fk_reuniao?: SortOrder
  }

  export type ReuniaoListRelationFilter = {
    every?: reuniaoWhereInput
    some?: reuniaoWhereInput
    none?: reuniaoWhereInput
  }

  export type reuniaoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type prioridade_reuniaoCountOrderByAggregateInput = {
    descricao?: SortOrder
    pk_prioridade?: SortOrder
  }

  export type prioridade_reuniaoAvgOrderByAggregateInput = {
    pk_prioridade?: SortOrder
  }

  export type prioridade_reuniaoMaxOrderByAggregateInput = {
    descricao?: SortOrder
    pk_prioridade?: SortOrder
  }

  export type prioridade_reuniaoMinOrderByAggregateInput = {
    descricao?: SortOrder
    pk_prioridade?: SortOrder
  }

  export type prioridade_reuniaoSumOrderByAggregateInput = {
    pk_prioridade?: SortOrder
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type Enumestado_reuniaoFilter = {
    equals?: estado_reuniao
    in?: Enumerable<estado_reuniao>
    notIn?: Enumerable<estado_reuniao>
    not?: NestedEnumestado_reuniaoFilter | estado_reuniao
  }

  export type SalaRelationFilter = {
    is?: salaWhereInput
    isNot?: salaWhereInput
  }

  export type Prioridade_reuniaoRelationFilter = {
    is?: prioridade_reuniaoWhereInput
    isNot?: prioridade_reuniaoWhereInput
  }

  export type ParticipanteListRelationFilter = {
    every?: participanteWhereInput
    some?: participanteWhereInput
    none?: participanteWhereInput
  }

  export type participanteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type reuniaoCountOrderByAggregateInput = {
    title?: SortOrder
    duracao?: SortOrder
    date_realizacao?: SortOrder
    tempo_inicio?: SortOrder
    tempo_final?: SortOrder
    estado_reuniao?: SortOrder
    pk_reuniao?: SortOrder
    fk_prioridade?: SortOrder
    fk_sala?: SortOrder
  }

  export type reuniaoAvgOrderByAggregateInput = {
    pk_reuniao?: SortOrder
    fk_prioridade?: SortOrder
    fk_sala?: SortOrder
  }

  export type reuniaoMaxOrderByAggregateInput = {
    title?: SortOrder
    duracao?: SortOrder
    date_realizacao?: SortOrder
    tempo_inicio?: SortOrder
    tempo_final?: SortOrder
    estado_reuniao?: SortOrder
    pk_reuniao?: SortOrder
    fk_prioridade?: SortOrder
    fk_sala?: SortOrder
  }

  export type reuniaoMinOrderByAggregateInput = {
    title?: SortOrder
    duracao?: SortOrder
    date_realizacao?: SortOrder
    tempo_inicio?: SortOrder
    tempo_final?: SortOrder
    estado_reuniao?: SortOrder
    pk_reuniao?: SortOrder
    fk_prioridade?: SortOrder
    fk_sala?: SortOrder
  }

  export type reuniaoSumOrderByAggregateInput = {
    pk_reuniao?: SortOrder
    fk_prioridade?: SortOrder
    fk_sala?: SortOrder
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type Enumestado_reuniaoWithAggregatesFilter = {
    equals?: estado_reuniao
    in?: Enumerable<estado_reuniao>
    notIn?: Enumerable<estado_reuniao>
    not?: NestedEnumestado_reuniaoWithAggregatesFilter | estado_reuniao
    _count?: NestedIntFilter
    _min?: NestedEnumestado_reuniaoFilter
    _max?: NestedEnumestado_reuniaoFilter
  }

  export type EdificioRelationFilter = {
    is?: edificioWhereInput
    isNot?: edificioWhereInput
  }

  export type salaCountOrderByAggregateInput = {
    piso?: SortOrder
    nome?: SortOrder
    pk_sala?: SortOrder
    fk_edificio?: SortOrder
  }

  export type salaAvgOrderByAggregateInput = {
    pk_sala?: SortOrder
    fk_edificio?: SortOrder
  }

  export type salaMaxOrderByAggregateInput = {
    piso?: SortOrder
    nome?: SortOrder
    pk_sala?: SortOrder
    fk_edificio?: SortOrder
  }

  export type salaMinOrderByAggregateInput = {
    piso?: SortOrder
    nome?: SortOrder
    pk_sala?: SortOrder
    fk_edificio?: SortOrder
  }

  export type salaSumOrderByAggregateInput = {
    pk_sala?: SortOrder
    fk_edificio?: SortOrder
  }

  export type EnumPerfilFilter = {
    equals?: Perfil
    in?: Enumerable<Perfil>
    notIn?: Enumerable<Perfil>
    not?: NestedEnumPerfilFilter | Perfil
  }

  export type FuncaoRelationFilter = {
    is?: funcaoWhereInput
    isNot?: funcaoWhereInput
  }

  export type ContactoListRelationFilter = {
    every?: contactoWhereInput
    some?: contactoWhereInput
    none?: contactoWhereInput
  }

  export type contactoOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usuarioCountOrderByAggregateInput = {
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    perfil?: SortOrder
    pk_usuario?: SortOrder
    fk_funcao?: SortOrder
  }

  export type usuarioAvgOrderByAggregateInput = {
    pk_usuario?: SortOrder
    fk_funcao?: SortOrder
  }

  export type usuarioMaxOrderByAggregateInput = {
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    perfil?: SortOrder
    pk_usuario?: SortOrder
    fk_funcao?: SortOrder
  }

  export type usuarioMinOrderByAggregateInput = {
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    perfil?: SortOrder
    pk_usuario?: SortOrder
    fk_funcao?: SortOrder
  }

  export type usuarioSumOrderByAggregateInput = {
    pk_usuario?: SortOrder
    fk_funcao?: SortOrder
  }

  export type EnumPerfilWithAggregatesFilter = {
    equals?: Perfil
    in?: Enumerable<Perfil>
    notIn?: Enumerable<Perfil>
    not?: NestedEnumPerfilWithAggregatesFilter | Perfil
    _count?: NestedIntFilter
    _min?: NestedEnumPerfilFilter
    _max?: NestedEnumPerfilFilter
  }

  export type usuarioCreateNestedOneWithoutContactoInput = {
    create?: XOR<usuarioCreateWithoutContactoInput, usuarioUncheckedCreateWithoutContactoInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutContactoInput
    connect?: usuarioWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type usuarioUpdateOneRequiredWithoutContactoNestedInput = {
    create?: XOR<usuarioCreateWithoutContactoInput, usuarioUncheckedCreateWithoutContactoInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutContactoInput
    upsert?: usuarioUpsertWithoutContactoInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<usuarioUpdateWithoutContactoInput, usuarioUncheckedUpdateWithoutContactoInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type funcaoCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<Enumerable<funcaoCreateWithoutDepartamentoInput>, Enumerable<funcaoUncheckedCreateWithoutDepartamentoInput>>
    connectOrCreate?: Enumerable<funcaoCreateOrConnectWithoutDepartamentoInput>
    createMany?: funcaoCreateManyDepartamentoInputEnvelope
    connect?: Enumerable<funcaoWhereUniqueInput>
  }

  export type funcaoUncheckedCreateNestedManyWithoutDepartamentoInput = {
    create?: XOR<Enumerable<funcaoCreateWithoutDepartamentoInput>, Enumerable<funcaoUncheckedCreateWithoutDepartamentoInput>>
    connectOrCreate?: Enumerable<funcaoCreateOrConnectWithoutDepartamentoInput>
    createMany?: funcaoCreateManyDepartamentoInputEnvelope
    connect?: Enumerable<funcaoWhereUniqueInput>
  }

  export type funcaoUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<Enumerable<funcaoCreateWithoutDepartamentoInput>, Enumerable<funcaoUncheckedCreateWithoutDepartamentoInput>>
    connectOrCreate?: Enumerable<funcaoCreateOrConnectWithoutDepartamentoInput>
    upsert?: Enumerable<funcaoUpsertWithWhereUniqueWithoutDepartamentoInput>
    createMany?: funcaoCreateManyDepartamentoInputEnvelope
    set?: Enumerable<funcaoWhereUniqueInput>
    disconnect?: Enumerable<funcaoWhereUniqueInput>
    delete?: Enumerable<funcaoWhereUniqueInput>
    connect?: Enumerable<funcaoWhereUniqueInput>
    update?: Enumerable<funcaoUpdateWithWhereUniqueWithoutDepartamentoInput>
    updateMany?: Enumerable<funcaoUpdateManyWithWhereWithoutDepartamentoInput>
    deleteMany?: Enumerable<funcaoScalarWhereInput>
  }

  export type funcaoUncheckedUpdateManyWithoutDepartamentoNestedInput = {
    create?: XOR<Enumerable<funcaoCreateWithoutDepartamentoInput>, Enumerable<funcaoUncheckedCreateWithoutDepartamentoInput>>
    connectOrCreate?: Enumerable<funcaoCreateOrConnectWithoutDepartamentoInput>
    upsert?: Enumerable<funcaoUpsertWithWhereUniqueWithoutDepartamentoInput>
    createMany?: funcaoCreateManyDepartamentoInputEnvelope
    set?: Enumerable<funcaoWhereUniqueInput>
    disconnect?: Enumerable<funcaoWhereUniqueInput>
    delete?: Enumerable<funcaoWhereUniqueInput>
    connect?: Enumerable<funcaoWhereUniqueInput>
    update?: Enumerable<funcaoUpdateWithWhereUniqueWithoutDepartamentoInput>
    updateMany?: Enumerable<funcaoUpdateManyWithWhereWithoutDepartamentoInput>
    deleteMany?: Enumerable<funcaoScalarWhereInput>
  }

  export type salaCreateNestedManyWithoutEdificioInput = {
    create?: XOR<Enumerable<salaCreateWithoutEdificioInput>, Enumerable<salaUncheckedCreateWithoutEdificioInput>>
    connectOrCreate?: Enumerable<salaCreateOrConnectWithoutEdificioInput>
    createMany?: salaCreateManyEdificioInputEnvelope
    connect?: Enumerable<salaWhereUniqueInput>
  }

  export type salaUncheckedCreateNestedManyWithoutEdificioInput = {
    create?: XOR<Enumerable<salaCreateWithoutEdificioInput>, Enumerable<salaUncheckedCreateWithoutEdificioInput>>
    connectOrCreate?: Enumerable<salaCreateOrConnectWithoutEdificioInput>
    createMany?: salaCreateManyEdificioInputEnvelope
    connect?: Enumerable<salaWhereUniqueInput>
  }

  export type salaUpdateManyWithoutEdificioNestedInput = {
    create?: XOR<Enumerable<salaCreateWithoutEdificioInput>, Enumerable<salaUncheckedCreateWithoutEdificioInput>>
    connectOrCreate?: Enumerable<salaCreateOrConnectWithoutEdificioInput>
    upsert?: Enumerable<salaUpsertWithWhereUniqueWithoutEdificioInput>
    createMany?: salaCreateManyEdificioInputEnvelope
    set?: Enumerable<salaWhereUniqueInput>
    disconnect?: Enumerable<salaWhereUniqueInput>
    delete?: Enumerable<salaWhereUniqueInput>
    connect?: Enumerable<salaWhereUniqueInput>
    update?: Enumerable<salaUpdateWithWhereUniqueWithoutEdificioInput>
    updateMany?: Enumerable<salaUpdateManyWithWhereWithoutEdificioInput>
    deleteMany?: Enumerable<salaScalarWhereInput>
  }

  export type salaUncheckedUpdateManyWithoutEdificioNestedInput = {
    create?: XOR<Enumerable<salaCreateWithoutEdificioInput>, Enumerable<salaUncheckedCreateWithoutEdificioInput>>
    connectOrCreate?: Enumerable<salaCreateOrConnectWithoutEdificioInput>
    upsert?: Enumerable<salaUpsertWithWhereUniqueWithoutEdificioInput>
    createMany?: salaCreateManyEdificioInputEnvelope
    set?: Enumerable<salaWhereUniqueInput>
    disconnect?: Enumerable<salaWhereUniqueInput>
    delete?: Enumerable<salaWhereUniqueInput>
    connect?: Enumerable<salaWhereUniqueInput>
    update?: Enumerable<salaUpdateWithWhereUniqueWithoutEdificioInput>
    updateMany?: Enumerable<salaUpdateManyWithWhereWithoutEdificioInput>
    deleteMany?: Enumerable<salaScalarWhereInput>
  }

  export type departamentoCreateNestedOneWithoutFuncaoInput = {
    create?: XOR<departamentoCreateWithoutFuncaoInput, departamentoUncheckedCreateWithoutFuncaoInput>
    connectOrCreate?: departamentoCreateOrConnectWithoutFuncaoInput
    connect?: departamentoWhereUniqueInput
  }

  export type usuarioCreateNestedManyWithoutFuncaoInput = {
    create?: XOR<Enumerable<usuarioCreateWithoutFuncaoInput>, Enumerable<usuarioUncheckedCreateWithoutFuncaoInput>>
    connectOrCreate?: Enumerable<usuarioCreateOrConnectWithoutFuncaoInput>
    createMany?: usuarioCreateManyFuncaoInputEnvelope
    connect?: Enumerable<usuarioWhereUniqueInput>
  }

  export type usuarioUncheckedCreateNestedManyWithoutFuncaoInput = {
    create?: XOR<Enumerable<usuarioCreateWithoutFuncaoInput>, Enumerable<usuarioUncheckedCreateWithoutFuncaoInput>>
    connectOrCreate?: Enumerable<usuarioCreateOrConnectWithoutFuncaoInput>
    createMany?: usuarioCreateManyFuncaoInputEnvelope
    connect?: Enumerable<usuarioWhereUniqueInput>
  }

  export type departamentoUpdateOneRequiredWithoutFuncaoNestedInput = {
    create?: XOR<departamentoCreateWithoutFuncaoInput, departamentoUncheckedCreateWithoutFuncaoInput>
    connectOrCreate?: departamentoCreateOrConnectWithoutFuncaoInput
    upsert?: departamentoUpsertWithoutFuncaoInput
    connect?: departamentoWhereUniqueInput
    update?: XOR<departamentoUpdateWithoutFuncaoInput, departamentoUncheckedUpdateWithoutFuncaoInput>
  }

  export type usuarioUpdateManyWithoutFuncaoNestedInput = {
    create?: XOR<Enumerable<usuarioCreateWithoutFuncaoInput>, Enumerable<usuarioUncheckedCreateWithoutFuncaoInput>>
    connectOrCreate?: Enumerable<usuarioCreateOrConnectWithoutFuncaoInput>
    upsert?: Enumerable<usuarioUpsertWithWhereUniqueWithoutFuncaoInput>
    createMany?: usuarioCreateManyFuncaoInputEnvelope
    set?: Enumerable<usuarioWhereUniqueInput>
    disconnect?: Enumerable<usuarioWhereUniqueInput>
    delete?: Enumerable<usuarioWhereUniqueInput>
    connect?: Enumerable<usuarioWhereUniqueInput>
    update?: Enumerable<usuarioUpdateWithWhereUniqueWithoutFuncaoInput>
    updateMany?: Enumerable<usuarioUpdateManyWithWhereWithoutFuncaoInput>
    deleteMany?: Enumerable<usuarioScalarWhereInput>
  }

  export type usuarioUncheckedUpdateManyWithoutFuncaoNestedInput = {
    create?: XOR<Enumerable<usuarioCreateWithoutFuncaoInput>, Enumerable<usuarioUncheckedCreateWithoutFuncaoInput>>
    connectOrCreate?: Enumerable<usuarioCreateOrConnectWithoutFuncaoInput>
    upsert?: Enumerable<usuarioUpsertWithWhereUniqueWithoutFuncaoInput>
    createMany?: usuarioCreateManyFuncaoInputEnvelope
    set?: Enumerable<usuarioWhereUniqueInput>
    disconnect?: Enumerable<usuarioWhereUniqueInput>
    delete?: Enumerable<usuarioWhereUniqueInput>
    connect?: Enumerable<usuarioWhereUniqueInput>
    update?: Enumerable<usuarioUpdateWithWhereUniqueWithoutFuncaoInput>
    updateMany?: Enumerable<usuarioUpdateManyWithWhereWithoutFuncaoInput>
    deleteMany?: Enumerable<usuarioScalarWhereInput>
  }

  export type reuniaoCreateNestedOneWithoutParticipanteInput = {
    create?: XOR<reuniaoCreateWithoutParticipanteInput, reuniaoUncheckedCreateWithoutParticipanteInput>
    connectOrCreate?: reuniaoCreateOrConnectWithoutParticipanteInput
    connect?: reuniaoWhereUniqueInput
  }

  export type usuarioCreateNestedOneWithoutParticipanteInput = {
    create?: XOR<usuarioCreateWithoutParticipanteInput, usuarioUncheckedCreateWithoutParticipanteInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutParticipanteInput
    connect?: usuarioWhereUniqueInput
  }

  export type reuniaoUpdateOneRequiredWithoutParticipanteNestedInput = {
    create?: XOR<reuniaoCreateWithoutParticipanteInput, reuniaoUncheckedCreateWithoutParticipanteInput>
    connectOrCreate?: reuniaoCreateOrConnectWithoutParticipanteInput
    upsert?: reuniaoUpsertWithoutParticipanteInput
    connect?: reuniaoWhereUniqueInput
    update?: XOR<reuniaoUpdateWithoutParticipanteInput, reuniaoUncheckedUpdateWithoutParticipanteInput>
  }

  export type usuarioUpdateOneRequiredWithoutParticipanteNestedInput = {
    create?: XOR<usuarioCreateWithoutParticipanteInput, usuarioUncheckedCreateWithoutParticipanteInput>
    connectOrCreate?: usuarioCreateOrConnectWithoutParticipanteInput
    upsert?: usuarioUpsertWithoutParticipanteInput
    connect?: usuarioWhereUniqueInput
    update?: XOR<usuarioUpdateWithoutParticipanteInput, usuarioUncheckedUpdateWithoutParticipanteInput>
  }

  export type reuniaoCreateNestedManyWithoutPrioridade_reuniaoInput = {
    create?: XOR<Enumerable<reuniaoCreateWithoutPrioridade_reuniaoInput>, Enumerable<reuniaoUncheckedCreateWithoutPrioridade_reuniaoInput>>
    connectOrCreate?: Enumerable<reuniaoCreateOrConnectWithoutPrioridade_reuniaoInput>
    createMany?: reuniaoCreateManyPrioridade_reuniaoInputEnvelope
    connect?: Enumerable<reuniaoWhereUniqueInput>
  }

  export type reuniaoUncheckedCreateNestedManyWithoutPrioridade_reuniaoInput = {
    create?: XOR<Enumerable<reuniaoCreateWithoutPrioridade_reuniaoInput>, Enumerable<reuniaoUncheckedCreateWithoutPrioridade_reuniaoInput>>
    connectOrCreate?: Enumerable<reuniaoCreateOrConnectWithoutPrioridade_reuniaoInput>
    createMany?: reuniaoCreateManyPrioridade_reuniaoInputEnvelope
    connect?: Enumerable<reuniaoWhereUniqueInput>
  }

  export type reuniaoUpdateManyWithoutPrioridade_reuniaoNestedInput = {
    create?: XOR<Enumerable<reuniaoCreateWithoutPrioridade_reuniaoInput>, Enumerable<reuniaoUncheckedCreateWithoutPrioridade_reuniaoInput>>
    connectOrCreate?: Enumerable<reuniaoCreateOrConnectWithoutPrioridade_reuniaoInput>
    upsert?: Enumerable<reuniaoUpsertWithWhereUniqueWithoutPrioridade_reuniaoInput>
    createMany?: reuniaoCreateManyPrioridade_reuniaoInputEnvelope
    set?: Enumerable<reuniaoWhereUniqueInput>
    disconnect?: Enumerable<reuniaoWhereUniqueInput>
    delete?: Enumerable<reuniaoWhereUniqueInput>
    connect?: Enumerable<reuniaoWhereUniqueInput>
    update?: Enumerable<reuniaoUpdateWithWhereUniqueWithoutPrioridade_reuniaoInput>
    updateMany?: Enumerable<reuniaoUpdateManyWithWhereWithoutPrioridade_reuniaoInput>
    deleteMany?: Enumerable<reuniaoScalarWhereInput>
  }

  export type reuniaoUncheckedUpdateManyWithoutPrioridade_reuniaoNestedInput = {
    create?: XOR<Enumerable<reuniaoCreateWithoutPrioridade_reuniaoInput>, Enumerable<reuniaoUncheckedCreateWithoutPrioridade_reuniaoInput>>
    connectOrCreate?: Enumerable<reuniaoCreateOrConnectWithoutPrioridade_reuniaoInput>
    upsert?: Enumerable<reuniaoUpsertWithWhereUniqueWithoutPrioridade_reuniaoInput>
    createMany?: reuniaoCreateManyPrioridade_reuniaoInputEnvelope
    set?: Enumerable<reuniaoWhereUniqueInput>
    disconnect?: Enumerable<reuniaoWhereUniqueInput>
    delete?: Enumerable<reuniaoWhereUniqueInput>
    connect?: Enumerable<reuniaoWhereUniqueInput>
    update?: Enumerable<reuniaoUpdateWithWhereUniqueWithoutPrioridade_reuniaoInput>
    updateMany?: Enumerable<reuniaoUpdateManyWithWhereWithoutPrioridade_reuniaoInput>
    deleteMany?: Enumerable<reuniaoScalarWhereInput>
  }

  export type salaCreateNestedOneWithoutReuniaoInput = {
    create?: XOR<salaCreateWithoutReuniaoInput, salaUncheckedCreateWithoutReuniaoInput>
    connectOrCreate?: salaCreateOrConnectWithoutReuniaoInput
    connect?: salaWhereUniqueInput
  }

  export type prioridade_reuniaoCreateNestedOneWithoutReuniaoInput = {
    create?: XOR<prioridade_reuniaoCreateWithoutReuniaoInput, prioridade_reuniaoUncheckedCreateWithoutReuniaoInput>
    connectOrCreate?: prioridade_reuniaoCreateOrConnectWithoutReuniaoInput
    connect?: prioridade_reuniaoWhereUniqueInput
  }

  export type participanteCreateNestedManyWithoutReuniaoInput = {
    create?: XOR<Enumerable<participanteCreateWithoutReuniaoInput>, Enumerable<participanteUncheckedCreateWithoutReuniaoInput>>
    connectOrCreate?: Enumerable<participanteCreateOrConnectWithoutReuniaoInput>
    createMany?: participanteCreateManyReuniaoInputEnvelope
    connect?: Enumerable<participanteWhereUniqueInput>
  }

  export type participanteUncheckedCreateNestedManyWithoutReuniaoInput = {
    create?: XOR<Enumerable<participanteCreateWithoutReuniaoInput>, Enumerable<participanteUncheckedCreateWithoutReuniaoInput>>
    connectOrCreate?: Enumerable<participanteCreateOrConnectWithoutReuniaoInput>
    createMany?: participanteCreateManyReuniaoInputEnvelope
    connect?: Enumerable<participanteWhereUniqueInput>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type Enumestado_reuniaoFieldUpdateOperationsInput = {
    set?: estado_reuniao
  }

  export type salaUpdateOneRequiredWithoutReuniaoNestedInput = {
    create?: XOR<salaCreateWithoutReuniaoInput, salaUncheckedCreateWithoutReuniaoInput>
    connectOrCreate?: salaCreateOrConnectWithoutReuniaoInput
    upsert?: salaUpsertWithoutReuniaoInput
    connect?: salaWhereUniqueInput
    update?: XOR<salaUpdateWithoutReuniaoInput, salaUncheckedUpdateWithoutReuniaoInput>
  }

  export type prioridade_reuniaoUpdateOneRequiredWithoutReuniaoNestedInput = {
    create?: XOR<prioridade_reuniaoCreateWithoutReuniaoInput, prioridade_reuniaoUncheckedCreateWithoutReuniaoInput>
    connectOrCreate?: prioridade_reuniaoCreateOrConnectWithoutReuniaoInput
    upsert?: prioridade_reuniaoUpsertWithoutReuniaoInput
    connect?: prioridade_reuniaoWhereUniqueInput
    update?: XOR<prioridade_reuniaoUpdateWithoutReuniaoInput, prioridade_reuniaoUncheckedUpdateWithoutReuniaoInput>
  }

  export type participanteUpdateManyWithoutReuniaoNestedInput = {
    create?: XOR<Enumerable<participanteCreateWithoutReuniaoInput>, Enumerable<participanteUncheckedCreateWithoutReuniaoInput>>
    connectOrCreate?: Enumerable<participanteCreateOrConnectWithoutReuniaoInput>
    upsert?: Enumerable<participanteUpsertWithWhereUniqueWithoutReuniaoInput>
    createMany?: participanteCreateManyReuniaoInputEnvelope
    set?: Enumerable<participanteWhereUniqueInput>
    disconnect?: Enumerable<participanteWhereUniqueInput>
    delete?: Enumerable<participanteWhereUniqueInput>
    connect?: Enumerable<participanteWhereUniqueInput>
    update?: Enumerable<participanteUpdateWithWhereUniqueWithoutReuniaoInput>
    updateMany?: Enumerable<participanteUpdateManyWithWhereWithoutReuniaoInput>
    deleteMany?: Enumerable<participanteScalarWhereInput>
  }

  export type participanteUncheckedUpdateManyWithoutReuniaoNestedInput = {
    create?: XOR<Enumerable<participanteCreateWithoutReuniaoInput>, Enumerable<participanteUncheckedCreateWithoutReuniaoInput>>
    connectOrCreate?: Enumerable<participanteCreateOrConnectWithoutReuniaoInput>
    upsert?: Enumerable<participanteUpsertWithWhereUniqueWithoutReuniaoInput>
    createMany?: participanteCreateManyReuniaoInputEnvelope
    set?: Enumerable<participanteWhereUniqueInput>
    disconnect?: Enumerable<participanteWhereUniqueInput>
    delete?: Enumerable<participanteWhereUniqueInput>
    connect?: Enumerable<participanteWhereUniqueInput>
    update?: Enumerable<participanteUpdateWithWhereUniqueWithoutReuniaoInput>
    updateMany?: Enumerable<participanteUpdateManyWithWhereWithoutReuniaoInput>
    deleteMany?: Enumerable<participanteScalarWhereInput>
  }

  export type edificioCreateNestedOneWithoutSalaInput = {
    create?: XOR<edificioCreateWithoutSalaInput, edificioUncheckedCreateWithoutSalaInput>
    connectOrCreate?: edificioCreateOrConnectWithoutSalaInput
    connect?: edificioWhereUniqueInput
  }

  export type reuniaoCreateNestedManyWithoutSalaInput = {
    create?: XOR<Enumerable<reuniaoCreateWithoutSalaInput>, Enumerable<reuniaoUncheckedCreateWithoutSalaInput>>
    connectOrCreate?: Enumerable<reuniaoCreateOrConnectWithoutSalaInput>
    createMany?: reuniaoCreateManySalaInputEnvelope
    connect?: Enumerable<reuniaoWhereUniqueInput>
  }

  export type reuniaoUncheckedCreateNestedManyWithoutSalaInput = {
    create?: XOR<Enumerable<reuniaoCreateWithoutSalaInput>, Enumerable<reuniaoUncheckedCreateWithoutSalaInput>>
    connectOrCreate?: Enumerable<reuniaoCreateOrConnectWithoutSalaInput>
    createMany?: reuniaoCreateManySalaInputEnvelope
    connect?: Enumerable<reuniaoWhereUniqueInput>
  }

  export type edificioUpdateOneRequiredWithoutSalaNestedInput = {
    create?: XOR<edificioCreateWithoutSalaInput, edificioUncheckedCreateWithoutSalaInput>
    connectOrCreate?: edificioCreateOrConnectWithoutSalaInput
    upsert?: edificioUpsertWithoutSalaInput
    connect?: edificioWhereUniqueInput
    update?: XOR<edificioUpdateWithoutSalaInput, edificioUncheckedUpdateWithoutSalaInput>
  }

  export type reuniaoUpdateManyWithoutSalaNestedInput = {
    create?: XOR<Enumerable<reuniaoCreateWithoutSalaInput>, Enumerable<reuniaoUncheckedCreateWithoutSalaInput>>
    connectOrCreate?: Enumerable<reuniaoCreateOrConnectWithoutSalaInput>
    upsert?: Enumerable<reuniaoUpsertWithWhereUniqueWithoutSalaInput>
    createMany?: reuniaoCreateManySalaInputEnvelope
    set?: Enumerable<reuniaoWhereUniqueInput>
    disconnect?: Enumerable<reuniaoWhereUniqueInput>
    delete?: Enumerable<reuniaoWhereUniqueInput>
    connect?: Enumerable<reuniaoWhereUniqueInput>
    update?: Enumerable<reuniaoUpdateWithWhereUniqueWithoutSalaInput>
    updateMany?: Enumerable<reuniaoUpdateManyWithWhereWithoutSalaInput>
    deleteMany?: Enumerable<reuniaoScalarWhereInput>
  }

  export type reuniaoUncheckedUpdateManyWithoutSalaNestedInput = {
    create?: XOR<Enumerable<reuniaoCreateWithoutSalaInput>, Enumerable<reuniaoUncheckedCreateWithoutSalaInput>>
    connectOrCreate?: Enumerable<reuniaoCreateOrConnectWithoutSalaInput>
    upsert?: Enumerable<reuniaoUpsertWithWhereUniqueWithoutSalaInput>
    createMany?: reuniaoCreateManySalaInputEnvelope
    set?: Enumerable<reuniaoWhereUniqueInput>
    disconnect?: Enumerable<reuniaoWhereUniqueInput>
    delete?: Enumerable<reuniaoWhereUniqueInput>
    connect?: Enumerable<reuniaoWhereUniqueInput>
    update?: Enumerable<reuniaoUpdateWithWhereUniqueWithoutSalaInput>
    updateMany?: Enumerable<reuniaoUpdateManyWithWhereWithoutSalaInput>
    deleteMany?: Enumerable<reuniaoScalarWhereInput>
  }

  export type funcaoCreateNestedOneWithoutUsuarioInput = {
    create?: XOR<funcaoCreateWithoutUsuarioInput, funcaoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: funcaoCreateOrConnectWithoutUsuarioInput
    connect?: funcaoWhereUniqueInput
  }

  export type contactoCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<contactoCreateWithoutUsuarioInput>, Enumerable<contactoUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<contactoCreateOrConnectWithoutUsuarioInput>
    createMany?: contactoCreateManyUsuarioInputEnvelope
    connect?: Enumerable<contactoWhereUniqueInput>
  }

  export type participanteCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<participanteCreateWithoutUsuarioInput>, Enumerable<participanteUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<participanteCreateOrConnectWithoutUsuarioInput>
    createMany?: participanteCreateManyUsuarioInputEnvelope
    connect?: Enumerable<participanteWhereUniqueInput>
  }

  export type contactoUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<contactoCreateWithoutUsuarioInput>, Enumerable<contactoUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<contactoCreateOrConnectWithoutUsuarioInput>
    createMany?: contactoCreateManyUsuarioInputEnvelope
    connect?: Enumerable<contactoWhereUniqueInput>
  }

  export type participanteUncheckedCreateNestedManyWithoutUsuarioInput = {
    create?: XOR<Enumerable<participanteCreateWithoutUsuarioInput>, Enumerable<participanteUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<participanteCreateOrConnectWithoutUsuarioInput>
    createMany?: participanteCreateManyUsuarioInputEnvelope
    connect?: Enumerable<participanteWhereUniqueInput>
  }

  export type EnumPerfilFieldUpdateOperationsInput = {
    set?: Perfil
  }

  export type funcaoUpdateOneRequiredWithoutUsuarioNestedInput = {
    create?: XOR<funcaoCreateWithoutUsuarioInput, funcaoUncheckedCreateWithoutUsuarioInput>
    connectOrCreate?: funcaoCreateOrConnectWithoutUsuarioInput
    upsert?: funcaoUpsertWithoutUsuarioInput
    connect?: funcaoWhereUniqueInput
    update?: XOR<funcaoUpdateWithoutUsuarioInput, funcaoUncheckedUpdateWithoutUsuarioInput>
  }

  export type contactoUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<contactoCreateWithoutUsuarioInput>, Enumerable<contactoUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<contactoCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<contactoUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: contactoCreateManyUsuarioInputEnvelope
    set?: Enumerable<contactoWhereUniqueInput>
    disconnect?: Enumerable<contactoWhereUniqueInput>
    delete?: Enumerable<contactoWhereUniqueInput>
    connect?: Enumerable<contactoWhereUniqueInput>
    update?: Enumerable<contactoUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<contactoUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<contactoScalarWhereInput>
  }

  export type participanteUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<participanteCreateWithoutUsuarioInput>, Enumerable<participanteUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<participanteCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<participanteUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: participanteCreateManyUsuarioInputEnvelope
    set?: Enumerable<participanteWhereUniqueInput>
    disconnect?: Enumerable<participanteWhereUniqueInput>
    delete?: Enumerable<participanteWhereUniqueInput>
    connect?: Enumerable<participanteWhereUniqueInput>
    update?: Enumerable<participanteUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<participanteUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<participanteScalarWhereInput>
  }

  export type contactoUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<contactoCreateWithoutUsuarioInput>, Enumerable<contactoUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<contactoCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<contactoUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: contactoCreateManyUsuarioInputEnvelope
    set?: Enumerable<contactoWhereUniqueInput>
    disconnect?: Enumerable<contactoWhereUniqueInput>
    delete?: Enumerable<contactoWhereUniqueInput>
    connect?: Enumerable<contactoWhereUniqueInput>
    update?: Enumerable<contactoUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<contactoUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<contactoScalarWhereInput>
  }

  export type participanteUncheckedUpdateManyWithoutUsuarioNestedInput = {
    create?: XOR<Enumerable<participanteCreateWithoutUsuarioInput>, Enumerable<participanteUncheckedCreateWithoutUsuarioInput>>
    connectOrCreate?: Enumerable<participanteCreateOrConnectWithoutUsuarioInput>
    upsert?: Enumerable<participanteUpsertWithWhereUniqueWithoutUsuarioInput>
    createMany?: participanteCreateManyUsuarioInputEnvelope
    set?: Enumerable<participanteWhereUniqueInput>
    disconnect?: Enumerable<participanteWhereUniqueInput>
    delete?: Enumerable<participanteWhereUniqueInput>
    connect?: Enumerable<participanteWhereUniqueInput>
    update?: Enumerable<participanteUpdateWithWhereUniqueWithoutUsuarioInput>
    updateMany?: Enumerable<participanteUpdateManyWithWhereWithoutUsuarioInput>
    deleteMany?: Enumerable<participanteScalarWhereInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedEnumestado_reuniaoFilter = {
    equals?: estado_reuniao
    in?: Enumerable<estado_reuniao>
    notIn?: Enumerable<estado_reuniao>
    not?: NestedEnumestado_reuniaoFilter | estado_reuniao
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedEnumestado_reuniaoWithAggregatesFilter = {
    equals?: estado_reuniao
    in?: Enumerable<estado_reuniao>
    notIn?: Enumerable<estado_reuniao>
    not?: NestedEnumestado_reuniaoWithAggregatesFilter | estado_reuniao
    _count?: NestedIntFilter
    _min?: NestedEnumestado_reuniaoFilter
    _max?: NestedEnumestado_reuniaoFilter
  }

  export type NestedEnumPerfilFilter = {
    equals?: Perfil
    in?: Enumerable<Perfil>
    notIn?: Enumerable<Perfil>
    not?: NestedEnumPerfilFilter | Perfil
  }

  export type NestedEnumPerfilWithAggregatesFilter = {
    equals?: Perfil
    in?: Enumerable<Perfil>
    notIn?: Enumerable<Perfil>
    not?: NestedEnumPerfilWithAggregatesFilter | Perfil
    _count?: NestedIntFilter
    _min?: NestedEnumPerfilFilter
    _max?: NestedEnumPerfilFilter
  }

  export type usuarioCreateWithoutContactoInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    funcao: funcaoCreateNestedOneWithoutUsuarioInput
    participante?: participanteCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutContactoInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    pk_usuario?: number
    fk_funcao: number
    participante?: participanteUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutContactoInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutContactoInput, usuarioUncheckedCreateWithoutContactoInput>
  }

  export type usuarioUpsertWithoutContactoInput = {
    update: XOR<usuarioUpdateWithoutContactoInput, usuarioUncheckedUpdateWithoutContactoInput>
    create: XOR<usuarioCreateWithoutContactoInput, usuarioUncheckedCreateWithoutContactoInput>
  }

  export type usuarioUpdateWithoutContactoInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    funcao?: funcaoUpdateOneRequiredWithoutUsuarioNestedInput
    participante?: participanteUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutContactoInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    pk_usuario?: IntFieldUpdateOperationsInput | number
    fk_funcao?: IntFieldUpdateOperationsInput | number
    participante?: participanteUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type funcaoCreateWithoutDepartamentoInput = {
    nome: string
    usuario?: usuarioCreateNestedManyWithoutFuncaoInput
  }

  export type funcaoUncheckedCreateWithoutDepartamentoInput = {
    nome: string
    pk_funcao?: number
    usuario?: usuarioUncheckedCreateNestedManyWithoutFuncaoInput
  }

  export type funcaoCreateOrConnectWithoutDepartamentoInput = {
    where: funcaoWhereUniqueInput
    create: XOR<funcaoCreateWithoutDepartamentoInput, funcaoUncheckedCreateWithoutDepartamentoInput>
  }

  export type funcaoCreateManyDepartamentoInputEnvelope = {
    data: Enumerable<funcaoCreateManyDepartamentoInput>
    skipDuplicates?: boolean
  }

  export type funcaoUpsertWithWhereUniqueWithoutDepartamentoInput = {
    where: funcaoWhereUniqueInput
    update: XOR<funcaoUpdateWithoutDepartamentoInput, funcaoUncheckedUpdateWithoutDepartamentoInput>
    create: XOR<funcaoCreateWithoutDepartamentoInput, funcaoUncheckedCreateWithoutDepartamentoInput>
  }

  export type funcaoUpdateWithWhereUniqueWithoutDepartamentoInput = {
    where: funcaoWhereUniqueInput
    data: XOR<funcaoUpdateWithoutDepartamentoInput, funcaoUncheckedUpdateWithoutDepartamentoInput>
  }

  export type funcaoUpdateManyWithWhereWithoutDepartamentoInput = {
    where: funcaoScalarWhereInput
    data: XOR<funcaoUpdateManyMutationInput, funcaoUncheckedUpdateManyWithoutFuncaoInput>
  }

  export type funcaoScalarWhereInput = {
    AND?: Enumerable<funcaoScalarWhereInput>
    OR?: Enumerable<funcaoScalarWhereInput>
    NOT?: Enumerable<funcaoScalarWhereInput>
    nome?: StringFilter | string
    pk_funcao?: IntFilter | number
    fk_departamento?: IntFilter | number
  }

  export type salaCreateWithoutEdificioInput = {
    piso: string
    nome: string
    reuniao?: reuniaoCreateNestedManyWithoutSalaInput
  }

  export type salaUncheckedCreateWithoutEdificioInput = {
    piso: string
    nome: string
    pk_sala?: number
    reuniao?: reuniaoUncheckedCreateNestedManyWithoutSalaInput
  }

  export type salaCreateOrConnectWithoutEdificioInput = {
    where: salaWhereUniqueInput
    create: XOR<salaCreateWithoutEdificioInput, salaUncheckedCreateWithoutEdificioInput>
  }

  export type salaCreateManyEdificioInputEnvelope = {
    data: Enumerable<salaCreateManyEdificioInput>
    skipDuplicates?: boolean
  }

  export type salaUpsertWithWhereUniqueWithoutEdificioInput = {
    where: salaWhereUniqueInput
    update: XOR<salaUpdateWithoutEdificioInput, salaUncheckedUpdateWithoutEdificioInput>
    create: XOR<salaCreateWithoutEdificioInput, salaUncheckedCreateWithoutEdificioInput>
  }

  export type salaUpdateWithWhereUniqueWithoutEdificioInput = {
    where: salaWhereUniqueInput
    data: XOR<salaUpdateWithoutEdificioInput, salaUncheckedUpdateWithoutEdificioInput>
  }

  export type salaUpdateManyWithWhereWithoutEdificioInput = {
    where: salaScalarWhereInput
    data: XOR<salaUpdateManyMutationInput, salaUncheckedUpdateManyWithoutSalaInput>
  }

  export type salaScalarWhereInput = {
    AND?: Enumerable<salaScalarWhereInput>
    OR?: Enumerable<salaScalarWhereInput>
    NOT?: Enumerable<salaScalarWhereInput>
    piso?: StringFilter | string
    nome?: StringFilter | string
    pk_sala?: IntFilter | number
    fk_edificio?: IntFilter | number
  }

  export type departamentoCreateWithoutFuncaoInput = {
    nome: string
  }

  export type departamentoUncheckedCreateWithoutFuncaoInput = {
    nome: string
    pk_departamento?: number
  }

  export type departamentoCreateOrConnectWithoutFuncaoInput = {
    where: departamentoWhereUniqueInput
    create: XOR<departamentoCreateWithoutFuncaoInput, departamentoUncheckedCreateWithoutFuncaoInput>
  }

  export type usuarioCreateWithoutFuncaoInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    contacto?: contactoCreateNestedManyWithoutUsuarioInput
    participante?: participanteCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutFuncaoInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    pk_usuario?: number
    contacto?: contactoUncheckedCreateNestedManyWithoutUsuarioInput
    participante?: participanteUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutFuncaoInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutFuncaoInput, usuarioUncheckedCreateWithoutFuncaoInput>
  }

  export type usuarioCreateManyFuncaoInputEnvelope = {
    data: Enumerable<usuarioCreateManyFuncaoInput>
    skipDuplicates?: boolean
  }

  export type departamentoUpsertWithoutFuncaoInput = {
    update: XOR<departamentoUpdateWithoutFuncaoInput, departamentoUncheckedUpdateWithoutFuncaoInput>
    create: XOR<departamentoCreateWithoutFuncaoInput, departamentoUncheckedCreateWithoutFuncaoInput>
  }

  export type departamentoUpdateWithoutFuncaoInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type departamentoUncheckedUpdateWithoutFuncaoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_departamento?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioUpsertWithWhereUniqueWithoutFuncaoInput = {
    where: usuarioWhereUniqueInput
    update: XOR<usuarioUpdateWithoutFuncaoInput, usuarioUncheckedUpdateWithoutFuncaoInput>
    create: XOR<usuarioCreateWithoutFuncaoInput, usuarioUncheckedCreateWithoutFuncaoInput>
  }

  export type usuarioUpdateWithWhereUniqueWithoutFuncaoInput = {
    where: usuarioWhereUniqueInput
    data: XOR<usuarioUpdateWithoutFuncaoInput, usuarioUncheckedUpdateWithoutFuncaoInput>
  }

  export type usuarioUpdateManyWithWhereWithoutFuncaoInput = {
    where: usuarioScalarWhereInput
    data: XOR<usuarioUpdateManyMutationInput, usuarioUncheckedUpdateManyWithoutUsuarioInput>
  }

  export type usuarioScalarWhereInput = {
    AND?: Enumerable<usuarioScalarWhereInput>
    OR?: Enumerable<usuarioScalarWhereInput>
    NOT?: Enumerable<usuarioScalarWhereInput>
    email?: StringFilter | string
    name?: StringFilter | string
    password?: StringFilter | string
    perfil?: EnumPerfilFilter | Perfil
    pk_usuario?: IntFilter | number
    fk_funcao?: IntFilter | number
  }

  export type reuniaoCreateWithoutParticipanteInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    sala: salaCreateNestedOneWithoutReuniaoInput
    prioridade_reuniao: prioridade_reuniaoCreateNestedOneWithoutReuniaoInput
  }

  export type reuniaoUncheckedCreateWithoutParticipanteInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    pk_reuniao?: number
    fk_prioridade: number
    fk_sala: number
  }

  export type reuniaoCreateOrConnectWithoutParticipanteInput = {
    where: reuniaoWhereUniqueInput
    create: XOR<reuniaoCreateWithoutParticipanteInput, reuniaoUncheckedCreateWithoutParticipanteInput>
  }

  export type usuarioCreateWithoutParticipanteInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    funcao: funcaoCreateNestedOneWithoutUsuarioInput
    contacto?: contactoCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioUncheckedCreateWithoutParticipanteInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    pk_usuario?: number
    fk_funcao: number
    contacto?: contactoUncheckedCreateNestedManyWithoutUsuarioInput
  }

  export type usuarioCreateOrConnectWithoutParticipanteInput = {
    where: usuarioWhereUniqueInput
    create: XOR<usuarioCreateWithoutParticipanteInput, usuarioUncheckedCreateWithoutParticipanteInput>
  }

  export type reuniaoUpsertWithoutParticipanteInput = {
    update: XOR<reuniaoUpdateWithoutParticipanteInput, reuniaoUncheckedUpdateWithoutParticipanteInput>
    create: XOR<reuniaoCreateWithoutParticipanteInput, reuniaoUncheckedCreateWithoutParticipanteInput>
  }

  export type reuniaoUpdateWithoutParticipanteInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    sala?: salaUpdateOneRequiredWithoutReuniaoNestedInput
    prioridade_reuniao?: prioridade_reuniaoUpdateOneRequiredWithoutReuniaoNestedInput
  }

  export type reuniaoUncheckedUpdateWithoutParticipanteInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    pk_reuniao?: IntFieldUpdateOperationsInput | number
    fk_prioridade?: IntFieldUpdateOperationsInput | number
    fk_sala?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioUpsertWithoutParticipanteInput = {
    update: XOR<usuarioUpdateWithoutParticipanteInput, usuarioUncheckedUpdateWithoutParticipanteInput>
    create: XOR<usuarioCreateWithoutParticipanteInput, usuarioUncheckedCreateWithoutParticipanteInput>
  }

  export type usuarioUpdateWithoutParticipanteInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    funcao?: funcaoUpdateOneRequiredWithoutUsuarioNestedInput
    contacto?: contactoUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutParticipanteInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    pk_usuario?: IntFieldUpdateOperationsInput | number
    fk_funcao?: IntFieldUpdateOperationsInput | number
    contacto?: contactoUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type reuniaoCreateWithoutPrioridade_reuniaoInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    sala: salaCreateNestedOneWithoutReuniaoInput
    participante?: participanteCreateNestedManyWithoutReuniaoInput
  }

  export type reuniaoUncheckedCreateWithoutPrioridade_reuniaoInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    pk_reuniao?: number
    fk_sala: number
    participante?: participanteUncheckedCreateNestedManyWithoutReuniaoInput
  }

  export type reuniaoCreateOrConnectWithoutPrioridade_reuniaoInput = {
    where: reuniaoWhereUniqueInput
    create: XOR<reuniaoCreateWithoutPrioridade_reuniaoInput, reuniaoUncheckedCreateWithoutPrioridade_reuniaoInput>
  }

  export type reuniaoCreateManyPrioridade_reuniaoInputEnvelope = {
    data: Enumerable<reuniaoCreateManyPrioridade_reuniaoInput>
    skipDuplicates?: boolean
  }

  export type reuniaoUpsertWithWhereUniqueWithoutPrioridade_reuniaoInput = {
    where: reuniaoWhereUniqueInput
    update: XOR<reuniaoUpdateWithoutPrioridade_reuniaoInput, reuniaoUncheckedUpdateWithoutPrioridade_reuniaoInput>
    create: XOR<reuniaoCreateWithoutPrioridade_reuniaoInput, reuniaoUncheckedCreateWithoutPrioridade_reuniaoInput>
  }

  export type reuniaoUpdateWithWhereUniqueWithoutPrioridade_reuniaoInput = {
    where: reuniaoWhereUniqueInput
    data: XOR<reuniaoUpdateWithoutPrioridade_reuniaoInput, reuniaoUncheckedUpdateWithoutPrioridade_reuniaoInput>
  }

  export type reuniaoUpdateManyWithWhereWithoutPrioridade_reuniaoInput = {
    where: reuniaoScalarWhereInput
    data: XOR<reuniaoUpdateManyMutationInput, reuniaoUncheckedUpdateManyWithoutReuniaoInput>
  }

  export type reuniaoScalarWhereInput = {
    AND?: Enumerable<reuniaoScalarWhereInput>
    OR?: Enumerable<reuniaoScalarWhereInput>
    NOT?: Enumerable<reuniaoScalarWhereInput>
    title?: StringFilter | string
    duracao?: StringFilter | string
    date_realizacao?: DateTimeFilter | Date | string
    tempo_inicio?: DateTimeFilter | Date | string
    tempo_final?: DateTimeFilter | Date | string
    estado_reuniao?: Enumestado_reuniaoFilter | estado_reuniao
    pk_reuniao?: IntFilter | number
    fk_prioridade?: IntFilter | number
    fk_sala?: IntFilter | number
  }

  export type salaCreateWithoutReuniaoInput = {
    piso: string
    nome: string
    edificio: edificioCreateNestedOneWithoutSalaInput
  }

  export type salaUncheckedCreateWithoutReuniaoInput = {
    piso: string
    nome: string
    pk_sala?: number
    fk_edificio: number
  }

  export type salaCreateOrConnectWithoutReuniaoInput = {
    where: salaWhereUniqueInput
    create: XOR<salaCreateWithoutReuniaoInput, salaUncheckedCreateWithoutReuniaoInput>
  }

  export type prioridade_reuniaoCreateWithoutReuniaoInput = {
    descricao: string
  }

  export type prioridade_reuniaoUncheckedCreateWithoutReuniaoInput = {
    descricao: string
    pk_prioridade?: number
  }

  export type prioridade_reuniaoCreateOrConnectWithoutReuniaoInput = {
    where: prioridade_reuniaoWhereUniqueInput
    create: XOR<prioridade_reuniaoCreateWithoutReuniaoInput, prioridade_reuniaoUncheckedCreateWithoutReuniaoInput>
  }

  export type participanteCreateWithoutReuniaoInput = {
    usuario: usuarioCreateNestedOneWithoutParticipanteInput
  }

  export type participanteUncheckedCreateWithoutReuniaoInput = {
    fk_usuario: number
  }

  export type participanteCreateOrConnectWithoutReuniaoInput = {
    where: participanteWhereUniqueInput
    create: XOR<participanteCreateWithoutReuniaoInput, participanteUncheckedCreateWithoutReuniaoInput>
  }

  export type participanteCreateManyReuniaoInputEnvelope = {
    data: Enumerable<participanteCreateManyReuniaoInput>
    skipDuplicates?: boolean
  }

  export type salaUpsertWithoutReuniaoInput = {
    update: XOR<salaUpdateWithoutReuniaoInput, salaUncheckedUpdateWithoutReuniaoInput>
    create: XOR<salaCreateWithoutReuniaoInput, salaUncheckedCreateWithoutReuniaoInput>
  }

  export type salaUpdateWithoutReuniaoInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    edificio?: edificioUpdateOneRequiredWithoutSalaNestedInput
  }

  export type salaUncheckedUpdateWithoutReuniaoInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    pk_sala?: IntFieldUpdateOperationsInput | number
    fk_edificio?: IntFieldUpdateOperationsInput | number
  }

  export type prioridade_reuniaoUpsertWithoutReuniaoInput = {
    update: XOR<prioridade_reuniaoUpdateWithoutReuniaoInput, prioridade_reuniaoUncheckedUpdateWithoutReuniaoInput>
    create: XOR<prioridade_reuniaoCreateWithoutReuniaoInput, prioridade_reuniaoUncheckedCreateWithoutReuniaoInput>
  }

  export type prioridade_reuniaoUpdateWithoutReuniaoInput = {
    descricao?: StringFieldUpdateOperationsInput | string
  }

  export type prioridade_reuniaoUncheckedUpdateWithoutReuniaoInput = {
    descricao?: StringFieldUpdateOperationsInput | string
    pk_prioridade?: IntFieldUpdateOperationsInput | number
  }

  export type participanteUpsertWithWhereUniqueWithoutReuniaoInput = {
    where: participanteWhereUniqueInput
    update: XOR<participanteUpdateWithoutReuniaoInput, participanteUncheckedUpdateWithoutReuniaoInput>
    create: XOR<participanteCreateWithoutReuniaoInput, participanteUncheckedCreateWithoutReuniaoInput>
  }

  export type participanteUpdateWithWhereUniqueWithoutReuniaoInput = {
    where: participanteWhereUniqueInput
    data: XOR<participanteUpdateWithoutReuniaoInput, participanteUncheckedUpdateWithoutReuniaoInput>
  }

  export type participanteUpdateManyWithWhereWithoutReuniaoInput = {
    where: participanteScalarWhereInput
    data: XOR<participanteUpdateManyMutationInput, participanteUncheckedUpdateManyWithoutParticipanteInput>
  }

  export type participanteScalarWhereInput = {
    AND?: Enumerable<participanteScalarWhereInput>
    OR?: Enumerable<participanteScalarWhereInput>
    NOT?: Enumerable<participanteScalarWhereInput>
    fk_usuario?: IntFilter | number
    fk_reuniao?: IntFilter | number
  }

  export type edificioCreateWithoutSalaInput = {
    nome: string
  }

  export type edificioUncheckedCreateWithoutSalaInput = {
    nome: string
    pk_edificio?: number
  }

  export type edificioCreateOrConnectWithoutSalaInput = {
    where: edificioWhereUniqueInput
    create: XOR<edificioCreateWithoutSalaInput, edificioUncheckedCreateWithoutSalaInput>
  }

  export type reuniaoCreateWithoutSalaInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    prioridade_reuniao: prioridade_reuniaoCreateNestedOneWithoutReuniaoInput
    participante?: participanteCreateNestedManyWithoutReuniaoInput
  }

  export type reuniaoUncheckedCreateWithoutSalaInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    pk_reuniao?: number
    fk_prioridade: number
    participante?: participanteUncheckedCreateNestedManyWithoutReuniaoInput
  }

  export type reuniaoCreateOrConnectWithoutSalaInput = {
    where: reuniaoWhereUniqueInput
    create: XOR<reuniaoCreateWithoutSalaInput, reuniaoUncheckedCreateWithoutSalaInput>
  }

  export type reuniaoCreateManySalaInputEnvelope = {
    data: Enumerable<reuniaoCreateManySalaInput>
    skipDuplicates?: boolean
  }

  export type edificioUpsertWithoutSalaInput = {
    update: XOR<edificioUpdateWithoutSalaInput, edificioUncheckedUpdateWithoutSalaInput>
    create: XOR<edificioCreateWithoutSalaInput, edificioUncheckedCreateWithoutSalaInput>
  }

  export type edificioUpdateWithoutSalaInput = {
    nome?: StringFieldUpdateOperationsInput | string
  }

  export type edificioUncheckedUpdateWithoutSalaInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_edificio?: IntFieldUpdateOperationsInput | number
  }

  export type reuniaoUpsertWithWhereUniqueWithoutSalaInput = {
    where: reuniaoWhereUniqueInput
    update: XOR<reuniaoUpdateWithoutSalaInput, reuniaoUncheckedUpdateWithoutSalaInput>
    create: XOR<reuniaoCreateWithoutSalaInput, reuniaoUncheckedCreateWithoutSalaInput>
  }

  export type reuniaoUpdateWithWhereUniqueWithoutSalaInput = {
    where: reuniaoWhereUniqueInput
    data: XOR<reuniaoUpdateWithoutSalaInput, reuniaoUncheckedUpdateWithoutSalaInput>
  }

  export type reuniaoUpdateManyWithWhereWithoutSalaInput = {
    where: reuniaoScalarWhereInput
    data: XOR<reuniaoUpdateManyMutationInput, reuniaoUncheckedUpdateManyWithoutReuniaoInput>
  }

  export type funcaoCreateWithoutUsuarioInput = {
    nome: string
    departamento: departamentoCreateNestedOneWithoutFuncaoInput
  }

  export type funcaoUncheckedCreateWithoutUsuarioInput = {
    nome: string
    pk_funcao?: number
    fk_departamento: number
  }

  export type funcaoCreateOrConnectWithoutUsuarioInput = {
    where: funcaoWhereUniqueInput
    create: XOR<funcaoCreateWithoutUsuarioInput, funcaoUncheckedCreateWithoutUsuarioInput>
  }

  export type contactoCreateWithoutUsuarioInput = {
    numero: string
  }

  export type contactoUncheckedCreateWithoutUsuarioInput = {
    numero: string
  }

  export type contactoCreateOrConnectWithoutUsuarioInput = {
    where: contactoWhereUniqueInput
    create: XOR<contactoCreateWithoutUsuarioInput, contactoUncheckedCreateWithoutUsuarioInput>
  }

  export type contactoCreateManyUsuarioInputEnvelope = {
    data: Enumerable<contactoCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type participanteCreateWithoutUsuarioInput = {
    reuniao: reuniaoCreateNestedOneWithoutParticipanteInput
  }

  export type participanteUncheckedCreateWithoutUsuarioInput = {
    fk_reuniao: number
  }

  export type participanteCreateOrConnectWithoutUsuarioInput = {
    where: participanteWhereUniqueInput
    create: XOR<participanteCreateWithoutUsuarioInput, participanteUncheckedCreateWithoutUsuarioInput>
  }

  export type participanteCreateManyUsuarioInputEnvelope = {
    data: Enumerable<participanteCreateManyUsuarioInput>
    skipDuplicates?: boolean
  }

  export type funcaoUpsertWithoutUsuarioInput = {
    update: XOR<funcaoUpdateWithoutUsuarioInput, funcaoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<funcaoCreateWithoutUsuarioInput, funcaoUncheckedCreateWithoutUsuarioInput>
  }

  export type funcaoUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    departamento?: departamentoUpdateOneRequiredWithoutFuncaoNestedInput
  }

  export type funcaoUncheckedUpdateWithoutUsuarioInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_funcao?: IntFieldUpdateOperationsInput | number
    fk_departamento?: IntFieldUpdateOperationsInput | number
  }

  export type contactoUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: contactoWhereUniqueInput
    update: XOR<contactoUpdateWithoutUsuarioInput, contactoUncheckedUpdateWithoutUsuarioInput>
    create: XOR<contactoCreateWithoutUsuarioInput, contactoUncheckedCreateWithoutUsuarioInput>
  }

  export type contactoUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: contactoWhereUniqueInput
    data: XOR<contactoUpdateWithoutUsuarioInput, contactoUncheckedUpdateWithoutUsuarioInput>
  }

  export type contactoUpdateManyWithWhereWithoutUsuarioInput = {
    where: contactoScalarWhereInput
    data: XOR<contactoUpdateManyMutationInput, contactoUncheckedUpdateManyWithoutContactoInput>
  }

  export type contactoScalarWhereInput = {
    AND?: Enumerable<contactoScalarWhereInput>
    OR?: Enumerable<contactoScalarWhereInput>
    NOT?: Enumerable<contactoScalarWhereInput>
    numero?: StringFilter | string
    fk_usuario?: IntFilter | number
  }

  export type participanteUpsertWithWhereUniqueWithoutUsuarioInput = {
    where: participanteWhereUniqueInput
    update: XOR<participanteUpdateWithoutUsuarioInput, participanteUncheckedUpdateWithoutUsuarioInput>
    create: XOR<participanteCreateWithoutUsuarioInput, participanteUncheckedCreateWithoutUsuarioInput>
  }

  export type participanteUpdateWithWhereUniqueWithoutUsuarioInput = {
    where: participanteWhereUniqueInput
    data: XOR<participanteUpdateWithoutUsuarioInput, participanteUncheckedUpdateWithoutUsuarioInput>
  }

  export type participanteUpdateManyWithWhereWithoutUsuarioInput = {
    where: participanteScalarWhereInput
    data: XOR<participanteUpdateManyMutationInput, participanteUncheckedUpdateManyWithoutParticipanteInput>
  }

  export type funcaoCreateManyDepartamentoInput = {
    nome: string
    pk_funcao?: number
  }

  export type funcaoUpdateWithoutDepartamentoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    usuario?: usuarioUpdateManyWithoutFuncaoNestedInput
  }

  export type funcaoUncheckedUpdateWithoutDepartamentoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_funcao?: IntFieldUpdateOperationsInput | number
    usuario?: usuarioUncheckedUpdateManyWithoutFuncaoNestedInput
  }

  export type funcaoUncheckedUpdateManyWithoutFuncaoInput = {
    nome?: StringFieldUpdateOperationsInput | string
    pk_funcao?: IntFieldUpdateOperationsInput | number
  }

  export type salaCreateManyEdificioInput = {
    piso: string
    nome: string
    pk_sala?: number
  }

  export type salaUpdateWithoutEdificioInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    reuniao?: reuniaoUpdateManyWithoutSalaNestedInput
  }

  export type salaUncheckedUpdateWithoutEdificioInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    pk_sala?: IntFieldUpdateOperationsInput | number
    reuniao?: reuniaoUncheckedUpdateManyWithoutSalaNestedInput
  }

  export type salaUncheckedUpdateManyWithoutSalaInput = {
    piso?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    pk_sala?: IntFieldUpdateOperationsInput | number
  }

  export type usuarioCreateManyFuncaoInput = {
    email: string
    name: string
    password: string
    perfil?: Perfil
    pk_usuario?: number
  }

  export type usuarioUpdateWithoutFuncaoInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    contacto?: contactoUpdateManyWithoutUsuarioNestedInput
    participante?: participanteUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateWithoutFuncaoInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    pk_usuario?: IntFieldUpdateOperationsInput | number
    contacto?: contactoUncheckedUpdateManyWithoutUsuarioNestedInput
    participante?: participanteUncheckedUpdateManyWithoutUsuarioNestedInput
  }

  export type usuarioUncheckedUpdateManyWithoutUsuarioInput = {
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    perfil?: EnumPerfilFieldUpdateOperationsInput | Perfil
    pk_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type reuniaoCreateManyPrioridade_reuniaoInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    pk_reuniao?: number
    fk_sala: number
  }

  export type reuniaoUpdateWithoutPrioridade_reuniaoInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    sala?: salaUpdateOneRequiredWithoutReuniaoNestedInput
    participante?: participanteUpdateManyWithoutReuniaoNestedInput
  }

  export type reuniaoUncheckedUpdateWithoutPrioridade_reuniaoInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    pk_reuniao?: IntFieldUpdateOperationsInput | number
    fk_sala?: IntFieldUpdateOperationsInput | number
    participante?: participanteUncheckedUpdateManyWithoutReuniaoNestedInput
  }

  export type reuniaoUncheckedUpdateManyWithoutReuniaoInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    pk_reuniao?: IntFieldUpdateOperationsInput | number
    fk_sala?: IntFieldUpdateOperationsInput | number
  }

  export type participanteCreateManyReuniaoInput = {
    fk_usuario: number
  }

  export type participanteUpdateWithoutReuniaoInput = {
    usuario?: usuarioUpdateOneRequiredWithoutParticipanteNestedInput
  }

  export type participanteUncheckedUpdateWithoutReuniaoInput = {
    fk_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type participanteUncheckedUpdateManyWithoutParticipanteInput = {
    fk_usuario?: IntFieldUpdateOperationsInput | number
  }

  export type reuniaoCreateManySalaInput = {
    title: string
    duracao: string
    date_realizacao: Date | string
    tempo_inicio: Date | string
    tempo_final: Date | string
    estado_reuniao?: estado_reuniao
    pk_reuniao?: number
    fk_prioridade: number
  }

  export type reuniaoUpdateWithoutSalaInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    prioridade_reuniao?: prioridade_reuniaoUpdateOneRequiredWithoutReuniaoNestedInput
    participante?: participanteUpdateManyWithoutReuniaoNestedInput
  }

  export type reuniaoUncheckedUpdateWithoutSalaInput = {
    title?: StringFieldUpdateOperationsInput | string
    duracao?: StringFieldUpdateOperationsInput | string
    date_realizacao?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_inicio?: DateTimeFieldUpdateOperationsInput | Date | string
    tempo_final?: DateTimeFieldUpdateOperationsInput | Date | string
    estado_reuniao?: Enumestado_reuniaoFieldUpdateOperationsInput | estado_reuniao
    pk_reuniao?: IntFieldUpdateOperationsInput | number
    fk_prioridade?: IntFieldUpdateOperationsInput | number
    participante?: participanteUncheckedUpdateManyWithoutReuniaoNestedInput
  }

  export type contactoCreateManyUsuarioInput = {
    numero: string
  }

  export type participanteCreateManyUsuarioInput = {
    fk_reuniao: number
  }

  export type contactoUpdateWithoutUsuarioInput = {
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type contactoUncheckedUpdateWithoutUsuarioInput = {
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type contactoUncheckedUpdateManyWithoutContactoInput = {
    numero?: StringFieldUpdateOperationsInput | string
  }

  export type participanteUpdateWithoutUsuarioInput = {
    reuniao?: reuniaoUpdateOneRequiredWithoutParticipanteNestedInput
  }

  export type participanteUncheckedUpdateWithoutUsuarioInput = {
    fk_reuniao?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}